<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>深入浅出区块链</title>
  
  <subtitle>系统学习区块链技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://learnblockchain.cn/"/>
  <updated>2019-03-12T06:49:30.486Z</updated>
  <id>https://learnblockchain.cn/</id>
  
  <author>
    <name>Tiny熊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>filecoin技术架构分析系列文章 - 目录</title>
    <link href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/"/>
    <id>https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/</id>
    <published>2019-03-11T07:35:33.000Z</published>
    <updated>2019-03-12T06:49:30.486Z</updated>
    
    <content type="html"><![CDATA[<p>我是杨尉，先河系统CTO，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，因为工作需要，在<a href="https://github.com/filecoin-project" target="_blank" rel="noopener">FileCoin</a>开源后，从源码层对filecoin的架构进行了一下分析，整理了一些文章，希望对大家有所帮助。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="https://learnblockchain.cn//2019/02/18/filecoin-code-analysis-1">1 filecoin概念</a></li><li><a href="https://learnblockchain.cn//2019/02/20/filecoin-code-analysis-2">2 filecoin通用语言理解</a></li><li><a href="https://learnblockchain.cn//2019/02/22/filecoin-code-analysis-3">3 filecoin开发网使用</a></li><li><a href="https://learnblockchain.cn//2019/02/28/filecoin-code-analysis-4">4 filecoin源码顶层架构分析</a></li><li><a href="https://learnblockchain.cn//2019/03/04/filecoin-code-analysis-5">5 filecoin源码协议层分析之心跳协议</a></li><li><a href="https://learnblockchain.cn//2019/03/04/filecoin-code-analysis-6">6 filecoin源码协议层分析之hello握手协议</a></li><li><a href="https://learnblockchain.cn//2019/03/05/filecoin-code-analysis-7">7 filecoin源码协议层分析之存储协议</a></li><li><a href="https://learnblockchain.cn//2019/03/05/filecoin-code-analysis-8">8 filecoin源码协议层分析之检索协议</a></li><li><a href="https://learnblockchain.cn//2019/03/06/filecoin-code-analysis-9">9 filecoin源码分析之支撑包分析(1)</a></li><li><a href="https://learnblockchain.cn//2019/03/07/filecoin-code-analysis-10">10 filecoin源码分析之支撑包分析(2/2)</a></li><li><a href="https://learnblockchain.cn//2019/03/07/filecoin-code-analysis-11">11 filecoin源码分析之内部接口层api包分析</a></li><li><a href="https://learnblockchain.cn//2019/03/07/filecoin-code-analysis-12">12 filecoin源码分析之内部接口层plumbing＆porcelain接口</a></li><li><a href="https://learnblockchain.cn//2019/03/08/filecoin-code-analysis-13">13 filecoin源码分析之服务层actor及vm</a></li><li><a href="https://learnblockchain.cn//2019/03/09/filecoin-code-analysis-14">14 filecoin源码分析之服务层链同步、共识协议及挖矿</a></li><li><a href="https://learnblockchain.cn//2019/03/10/filecoin-code-analysis-15">15 filecoin源码分析之节点运行逻辑</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是杨尉，先河系统CTO，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，因为工作需要，在&lt;a href=&quot;https://github.com/filecoin-project&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FileCoin&lt;/a&gt;开源后，从源码层对filecoin的架构进行了一下分析，整理了一些文章，希望对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析之十五：filecoin源码分析之节点运行逻辑</title>
    <link href="https://learnblockchain.cn/2019/03/10/filecoin-code-analysis-15/"/>
    <id>https://learnblockchain.cn/2019/03/10/filecoin-code-analysis-15/</id>
    <published>2019-03-10T08:35:33.000Z</published>
    <updated>2019-03-12T07:26:25.304Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十五章源码分析之节点运行逻辑。</p><a id="more"></a><blockquote><p>分析基于的源码版本：go-filecoin master a0598a54(2019年3月9日)</p></blockquote><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li><p>我们在前面的章节已经经过了三个阶段的梳理分析</p><ul><li>概念阶段，包括概念、通用语言理解、开发网络使用</li><li>顶层架构与概念的结合理解</li><li>具体源码的简析，包括协议层、支撑包、内部api层、服务层</li></ul></li><li><p>源码部分的command部分比较容易理解，就不单独文章赘述了，基本与内部api层都可以对应起来</p></li><li><p>现在再来看节点的运行逻辑应该会更加清晰了</p></li></ul><h2 id="filecoin节点运行逻辑简析"><a href="#filecoin节点运行逻辑简析" class="headerlink" title="filecoin节点运行逻辑简析"></a>filecoin节点运行逻辑简析</h2><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    node</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +ErrNoMinerAddress</span><br><span class="line">   -filecoinDHTProtocol : dhtprotocol.ID</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">   // 创建具体的filecoin节点实例</span><br><span class="line">▼+Config : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 设置区块时间</span><br><span class="line">   +BlockTime : time.Duration</span><br><span class="line">    // 配置节点是否转发</span><br><span class="line">   +IsRelay : bool</span><br><span class="line">    // libp2p选项</span><br><span class="line">   +Libp2pOpts : []libp2p.Option</span><br><span class="line">    // 在离线模式下，会关闭libp2p</span><br><span class="line">   +OfflineMode : bool</span><br><span class="line">    // 配置资源</span><br><span class="line">   +Repo : repo.Repo</span><br><span class="line">    // 配置区块奖励方法</span><br><span class="line">   +Rewarder : consensus.BlockRewarder</span><br><span class="line">    // 配置节点时空证明校验函数</span><br><span class="line">   +Verifier : proofs.Verifier</span><br><span class="line">    [methods]</span><br><span class="line">    // 创建node实例</span><br><span class="line">   +Build(ctx context.Context) : *Node, error</span><br><span class="line">   -buildHost(ctx context.Context, makeDHT func(host host.Host) routing.IpfsRouting, error) : host.Host, error</span><br><span class="line"></span><br><span class="line"> +ConfigOpt : func(*Config) error</span><br><span class="line"></span><br><span class="line">▼+Node : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 确认最新区块，本地持久化并广播</span><br><span class="line">   +AddNewlyMinedBlock : newBlockFunc</span><br><span class="line">    // 订阅主题&quot;/fil/blocks&quot;</span><br><span class="line">   +BlockSub : pubsub.Subscription</span><br><span class="line">    // 块服务接口</span><br><span class="line">   +Blockstore : bstore.Blockstore</span><br><span class="line">    // 维持相关节点连接</span><br><span class="line">   +Bootstrapper : *net.Bootstrapper</span><br><span class="line">    // 读取区块信息</span><br><span class="line">   +ChainReader : chain.ReadStore</span><br><span class="line">    // 同时协议</span><br><span class="line">   +Consensus : consensus.Protocol</span><br><span class="line">    // 块交换,节点间的数据交换</span><br><span class="line">   +Exchange : exchange.Interface</span><br><span class="line">    // new-head 主题</span><br><span class="line">   +HeaviestTipSetCh : chan interface&#123;&#125;</span><br><span class="line">    // 新区块处理请求</span><br><span class="line">   +HeaviestTipSetHandled : func()</span><br><span class="line">    // hello服务</span><br><span class="line">   +HelloSvc : *hello.Handler</span><br><span class="line">    // 消息订阅</span><br><span class="line">   +MessageSub : pubsub.Subscription</span><br><span class="line">    // 挖矿调度</span><br><span class="line">   +MiningScheduler : mining.Scheduler</span><br><span class="line">    // 消息池操作</span><br><span class="line">   +MsgPool : *core.MessagePool</span><br><span class="line">    // 离线模式</span><br><span class="line">   +OfflineMode : bool</span><br><span class="line">   +OnlineStore : *hamt.CborIpldStore</span><br><span class="line">    // 对应libp2p中的host</span><br><span class="line">   +PeerHost : host.Host</span><br><span class="line">    // libp2p中的ping service</span><br><span class="line">   +Ping : *ping.PingService</span><br><span class="line">    // 高层api</span><br><span class="line">   +PorcelainAPI : *porcelain.API</span><br><span class="line">    // 功率表</span><br><span class="line">   +PowerTable : consensus.PowerTableView</span><br><span class="line">    // 配置资源</span><br><span class="line">   +Repo : repo.Repo</span><br><span class="line">    // 检索客户端</span><br><span class="line">   +RetrievalClient : *retrieval.Client</span><br><span class="line">    // 检索矿工</span><br><span class="line">   +RetrievalMiner : *retrieval.Miner</span><br><span class="line">    // 路由,libp2p</span><br><span class="line">   +Router : routing.IpfsRouting</span><br><span class="line">    // 存储矿工</span><br><span class="line">   +StorageMiner : *storage.Miner</span><br><span class="line">    // 存储客户</span><br><span class="line">   +StorageMinerClient : *storage.Client</span><br><span class="line">    // 链同步</span><br><span class="line">   +Syncer : chain.Syncer</span><br><span class="line">    // 钱包管理</span><br><span class="line">   +Wallet : *wallet.Wallet</span><br><span class="line">   -blockTime : time.Duration</span><br><span class="line">   -blockservice : bserv.BlockService</span><br><span class="line">   -cancelMining : context.CancelFunc</span><br><span class="line">   -cancelSubscriptionsCtx : context.CancelFunc</span><br><span class="line">   -cborStore : *hamt.CborIpldStore</span><br><span class="line">   -host : host.Host</span><br><span class="line">   -lookup : lookup.PeerLookupService</span><br><span class="line">   -mining</span><br><span class="line">   -miningCtx : context.Context</span><br><span class="line">   -miningDoneWg : *sync.WaitGroup</span><br><span class="line">   -sectorBuilder : sectorbuilder.SectorBuilder</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">   +BlockHeight() : *types.BlockHeight, error</span><br><span class="line">   +BlockService() : bserv.BlockService</span><br><span class="line">   +CborStore() : *hamt.CborIpldStore</span><br><span class="line">   +ChainReadStore() : chain.ReadStore</span><br><span class="line">    // 创建矿工方法</span><br><span class="line">   +CreateMiner(ctx context.Context, accountAddr address.Address, gasPrice types.AttoFIL, gasLimit types.GasUnits, pledge uint64, pid libp2ppeer.ID, collateral *types.AttoFIL) : *address.Address, error</span><br><span class="line">   +GetBlockTime() : time.Duration</span><br><span class="line">   +Host() : host.Host</span><br><span class="line">    // 节点查找方法</span><br><span class="line">   +Lookup() : lookup.PeerLookupService</span><br><span class="line">   +MiningSignerAddress() : address.Address</span><br><span class="line">   +MiningTimes() : time.Duration, time.Duration</span><br><span class="line">    // 创建新的account地址，钱包地址</span><br><span class="line">   +NewAddress() : address.Address, error</span><br><span class="line">   +SectorBuilder() : sectorbuilder.SectorBuilder</span><br><span class="line">   +SetBlockTime(blockTime time.Duration)</span><br><span class="line">    // 启动节点</span><br><span class="line">   +Start(ctx context.Context) : error</span><br><span class="line">    // 启动挖矿</span><br><span class="line">   +StartMining(ctx context.Context) : error</span><br><span class="line">    // 停止节点</span><br><span class="line">   +Stop(ctx context.Context)</span><br><span class="line">    // 停止挖矿</span><br><span class="line">   +StopMining(ctx context.Context)</span><br><span class="line">   -addNewlyMinedBlock(ctx context.Context, b *types.Block)</span><br><span class="line">   -cancelSubscriptions()</span><br><span class="line">   -getLastUsedSectorID(ctx context.Context, minerAddr address.Address) : uint64, error</span><br><span class="line">   -getMinerActorPubKey() : []byte, error</span><br><span class="line">   -handleNewHeaviestTipSet(ctx context.Context, head types.TipSet)</span><br><span class="line">   -handleNewMiningOutput(miningOutCh chan mining.Output)</span><br><span class="line">   -handleSubscription(ctx context.Context, f pubSubProcessorFunc, fname string, s pubsub.Subscription, sname string)</span><br><span class="line">   -isMining() : bool</span><br><span class="line">   -miningAddress() : address.Address, error</span><br><span class="line">   -miningOwnerAddress(ctx context.Context, miningAddr address.Address) : address.Address, error</span><br><span class="line">   -saveMinerConfig(minerAddr address.Address, signerAddr address.Address) : error</span><br><span class="line">   -setIsMining(isMining bool)</span><br><span class="line">   -setupHeartbeatServices(ctx context.Context) : error</span><br><span class="line">   -setupMining(ctx context.Context) : error</span><br><span class="line">    [functions]</span><br><span class="line">    // 调用Build创建node实例</span><br><span class="line">   +New(ctx context.Context, opts ...ConfigOpt) : *Node, error</span><br><span class="line"></span><br><span class="line">▼-blankValidator : struct</span><br><span class="line">    [methods]</span><br><span class="line">   +Select(_ string, _ [][]byte) : int, error</span><br><span class="line">   +Validate(_ string, _ []byte) : error</span><br><span class="line"></span><br><span class="line"> -newBlockFunc : func(context.Context, *types.Block)</span><br><span class="line"></span><br><span class="line"> -pubSubProcessorFunc : func(ctx context.Context, msg pubsub.Message) error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +BlockTime(blockTime time.Duration) : ConfigOpt</span><br><span class="line">   +IsRelay() : ConfigOpt</span><br><span class="line">   +Libp2pOptions(opts ...libp2p.Option) : ConfigOpt</span><br><span class="line">   +OfflineMode(offlineMode bool) : ConfigOpt</span><br><span class="line">   +RewarderConfigOption(rewarder consensus.BlockRewarder) : ConfigOpt</span><br><span class="line">   +StartMining(ctx context.Context, node *Node) : error</span><br><span class="line">   +VerifierConfigOption(verifier proofs.Verifier) : ConfigOpt</span><br><span class="line">   -initSectorBuilderForNode(ctx context.Context, node *Node, sectorStoreType proofs.SectorStoreType) : sectorbuilder.SectorBuilder, error</span><br><span class="line">   -initStorageMinerForNode(ctx context.Context, node *Node) : *storage.Miner, error</span><br><span class="line">   -readGenesisCid(ds datastore.Datastore) : cid.Cid, error</span><br></pre></td></tr></table></figure><h3 id="创建filecoin节点实例"><a href="#创建filecoin节点实例" class="headerlink" title="创建filecoin节点实例"></a>创建filecoin节点实例</h3><ul><li>实例化filecoin节点,简析见如下添加的注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">// Build instantiates a filecoin Node from the settings specified in the config.</span><br><span class="line">func (nc *Config) Build(ctx context.Context) (*Node, error) &#123;</span><br><span class="line">// 创建内存资源实例</span><br><span class="line">if nc.Repo == nil &#123;</span><br><span class="line">nc.Repo = repo.NewInMemoryRepo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建块服务实例</span><br><span class="line">bs := bstore.NewBlockstore(nc.Repo.Datastore())</span><br><span class="line"></span><br><span class="line">validator := blankValidator&#123;&#125;</span><br><span class="line"></span><br><span class="line">var peerHost host.Host</span><br><span class="line">var router routing.IpfsRouting</span><br><span class="line"></span><br><span class="line">// 带宽统计实例,加入libp2popts</span><br><span class="line">bandwidthTracker := p2pmetrics.NewBandwidthCounter()</span><br><span class="line">nc.Libp2pOpts = append(nc.Libp2pOpts, libp2p.BandwidthReporter(bandwidthTracker))</span><br><span class="line"></span><br><span class="line">// 非离线模式才启用libp2p</span><br><span class="line">if !nc.OfflineMode &#123;</span><br><span class="line">makeDHT := func(h host.Host) (routing.IpfsRouting, error) &#123;</span><br><span class="line">r, err := dht.New(</span><br><span class="line">ctx,</span><br><span class="line">h,</span><br><span class="line">dhtopts.Datastore(nc.Repo.Datastore()),</span><br><span class="line">dhtopts.NamespacedValidator(&quot;v&quot;, validator),</span><br><span class="line">dhtopts.Protocols(filecoinDHTProtocol),</span><br><span class="line">)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, errors.Wrap(err, &quot;failed to setup routing&quot;)</span><br><span class="line">&#125;</span><br><span class="line">router = r</span><br><span class="line">return r, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var err error</span><br><span class="line">// 实例化非离线模式libp2p host</span><br><span class="line">peerHost, err = nc.buildHost(ctx, makeDHT)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 离线模式处理</span><br><span class="line">router = offroute.NewOfflineRouter(nc.Repo.Datastore(), validator)</span><br><span class="line">peerHost = rhost.Wrap(noopLibP2PHost&#123;&#125;, router)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ping服务实例</span><br><span class="line">// set up pinger</span><br><span class="line">pinger := ping.NewPingService(peerHost)</span><br><span class="line"></span><br><span class="line">// bitswap实例</span><br><span class="line">// set up bitswap</span><br><span class="line">nwork := bsnet.NewFromIpfsHost(peerHost, router)</span><br><span class="line">//nwork := bsnet.NewFromIpfsHost(innerHost, router)</span><br><span class="line">bswap := bitswap.New(ctx, nwork, bs)</span><br><span class="line">bservice := bserv.New(bs, bswap)</span><br><span class="line"></span><br><span class="line">cstOnline := hamt.CborIpldStore&#123;Blocks: bservice&#125;</span><br><span class="line">cstOffline := hamt.CborIpldStore&#123;Blocks: bserv.New(bs, offline.Exchange(bs))&#125;</span><br><span class="line">// 获取创世块cid</span><br><span class="line">genCid, err := readGenesisCid(nc.Repo.Datastore())</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// chain.Store实例以及功率表</span><br><span class="line">var chainStore chain.Store = chain.NewDefaultStore(nc.Repo.ChainDatastore(), &amp;cstOffline, genCid)</span><br><span class="line">powerTable := &amp;consensus.MarketView&#123;&#125;</span><br><span class="line"></span><br><span class="line">// 共识协议processor实例</span><br><span class="line">var processor consensus.Processor</span><br><span class="line">if nc.Rewarder == nil &#123;</span><br><span class="line">processor = consensus.NewDefaultProcessor()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">processor = consensus.NewConfiguredProcessor(consensus.NewDefaultMessageValidator(), nc.Rewarder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 共识协议实例</span><br><span class="line">var nodeConsensus consensus.Protocol</span><br><span class="line">if nc.Verifier == nil &#123;</span><br><span class="line">nodeConsensus = consensus.NewExpected(&amp;cstOffline, bs, processor, powerTable, genCid, &amp;proofs.RustVerifier&#123;&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">nodeConsensus = consensus.NewExpected(&amp;cstOffline, bs, processor, powerTable, genCid, nc.Verifier)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 链同步，链读取，消息池实例</span><br><span class="line">// only the syncer gets the storage which is online connected</span><br><span class="line">chainSyncer := chain.NewDefaultSyncer(&amp;cstOnline, &amp;cstOffline, nodeConsensus, chainStore)</span><br><span class="line">chainReader, ok := chainStore.(chain.ReadStore)</span><br><span class="line">if !ok &#123;</span><br><span class="line">return nil, errors.New(&quot;failed to cast chain.Store to chain.ReadStore&quot;)</span><br><span class="line">&#125;</span><br><span class="line">msgPool := core.NewMessagePool()</span><br><span class="line"></span><br><span class="line">// Set up libp2p pubsub</span><br><span class="line">fsub, err := libp2pps.NewFloodSub(ctx, peerHost)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, errors.Wrap(err, &quot;failed to set up pubsub&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 钱包服务实例</span><br><span class="line">backend, err := wallet.NewDSBackend(nc.Repo.WalletDatastore())</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, errors.Wrap(err, &quot;failed to set up wallet backend&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fcWallet := wallet.New(backend)</span><br><span class="line"></span><br><span class="line">// 实例化高层api</span><br><span class="line">PorcelainAPI := porcelain.New(plumbing.New(&amp;plumbing.APIDeps&#123;</span><br><span class="line">Chain:        chainReader,</span><br><span class="line">Config:       cfg.NewConfig(nc.Repo),</span><br><span class="line">Deals:        strgdls.New(nc.Repo.DealsDatastore()),</span><br><span class="line">MsgPool:      msgPool,</span><br><span class="line">MsgPreviewer: msg.NewPreviewer(fcWallet, chainReader, &amp;cstOffline, bs),</span><br><span class="line">MsgQueryer:   msg.NewQueryer(nc.Repo, fcWallet, chainReader, &amp;cstOffline, bs),</span><br><span class="line">MsgSender:    msg.NewSender(fcWallet, chainReader, msgPool, consensus.NewOutboundMessageValidator(), fsub.Publish),</span><br><span class="line">MsgWaiter:    msg.NewWaiter(chainReader, bs, &amp;cstOffline),</span><br><span class="line">Network:      net.New(peerHost, pubsub.NewPublisher(fsub), pubsub.NewSubscriber(fsub), net.NewRouter(router), bandwidthTracker),</span><br><span class="line">SigGetter:    mthdsig.NewGetter(chainReader),</span><br><span class="line">Wallet:       fcWallet,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">// 实例化node</span><br><span class="line">nd := &amp;Node&#123;</span><br><span class="line">blockservice: bservice,</span><br><span class="line">Blockstore:   bs,</span><br><span class="line">cborStore:    &amp;cstOffline,</span><br><span class="line">OnlineStore:  &amp;cstOnline,</span><br><span class="line">Consensus:    nodeConsensus,</span><br><span class="line">ChainReader:  chainReader,</span><br><span class="line">Syncer:       chainSyncer,</span><br><span class="line">PowerTable:   powerTable,</span><br><span class="line">PorcelainAPI: PorcelainAPI,</span><br><span class="line">Exchange:     bswap,</span><br><span class="line">host:         peerHost,</span><br><span class="line">MsgPool:      msgPool,</span><br><span class="line">OfflineMode:  nc.OfflineMode,</span><br><span class="line">PeerHost:     peerHost,</span><br><span class="line">Ping:         pinger,</span><br><span class="line">Repo:         nc.Repo,</span><br><span class="line">Wallet:       fcWallet,</span><br><span class="line">blockTime:    nc.BlockTime,</span><br><span class="line">Router:       router,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Bootstrapping network peers.</span><br><span class="line">periodStr := nd.Repo.Config().Bootstrap.Period</span><br><span class="line">period, err := time.ParseDuration(periodStr)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, errors.Wrapf(err, &quot;couldn&apos;t parse bootstrap period %s&quot;, periodStr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化Bootstrapper,指定node的该方法</span><br><span class="line">// Bootstrapper maintains connections to some subset of addresses</span><br><span class="line">ba := nd.Repo.Config().Bootstrap.Addresses</span><br><span class="line">bpi, err := net.PeerAddrsToPeerInfos(ba)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, errors.Wrapf(err, &quot;couldn&apos;t parse bootstrap addresses [%s]&quot;, ba)</span><br><span class="line">&#125;</span><br><span class="line">minPeerThreshold := nd.Repo.Config().Bootstrap.MinPeerThreshold</span><br><span class="line">nd.Bootstrapper = net.NewBootstrapper(bpi, nd.Host(), nd.Host().Network(), nd.Router, minPeerThreshold, period)</span><br><span class="line"></span><br><span class="line">// 实例化链查找服务，指定node的该方法</span><br><span class="line">// On-chain lookup service</span><br><span class="line">defaultAddressGetter := func() (address.Address, error) &#123;</span><br><span class="line">return nd.PorcelainAPI.GetAndMaybeSetDefaultSenderAddress()</span><br><span class="line">&#125;</span><br><span class="line">nd.lookup = lookup.NewChainLookupService(nd.ChainReader, defaultAddressGetter, bs)</span><br><span class="line"></span><br><span class="line">return nd, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动及停止filecoin节点"><a href="#启动及停止filecoin节点" class="headerlink" title="启动及停止filecoin节点"></a>启动及停止filecoin节点</h3><ul><li>启动filecoin节点的流程概览</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">// Start boots up the node.</span><br><span class="line">func (node *Node) Start(ctx context.Context) error &#123;</span><br><span class="line">// 加载本地chain信息</span><br><span class="line">if err := node.ChainReader.Load(ctx); err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果存在存储矿工，配置挖矿功能</span><br><span class="line">// Only set these up if there is a miner configured.</span><br><span class="line">if _, err := node.miningAddress(); err == nil &#123;</span><br><span class="line">if err := node.setupMining(ctx); err != nil &#123;</span><br><span class="line">log.Errorf(&quot;setup mining failed: %v&quot;, err)</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置链同步回调函数</span><br><span class="line">// Start up &apos;hello&apos; handshake service</span><br><span class="line">syncCallBack := func(pid libp2ppeer.ID, cids []cid.Cid, height uint64) &#123;</span><br><span class="line">// TODO it is possible the syncer interface should be modified to</span><br><span class="line">// make use of the additional context not used here (from addr + height).</span><br><span class="line">// To keep things simple for now this info is not used.</span><br><span class="line">err := node.Syncer.HandleNewBlocks(context.Background(), cids)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Infof(&quot;error handling blocks: %s&quot;, types.NewSortedCidSet(cids...).String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 实例化hello握手协议</span><br><span class="line">node.HelloSvc = hello.New(node.Host(), node.ChainReader.GenesisCid(), syncCallBack, node.ChainReader.Head)</span><br><span class="line"></span><br><span class="line">// 实例化存储矿工协议</span><br><span class="line">cni := storage.NewClientNodeImpl(dag.NewDAGService(node.BlockService()), node.Host(), node.GetBlockTime())</span><br><span class="line">var err error</span><br><span class="line">node.StorageMinerClient, err = storage.NewClient(cni, node.PorcelainAPI)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;Could not make new storage client&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化检索客户及检索矿工协议</span><br><span class="line">node.RetrievalClient = retrieval.NewClient(node)</span><br><span class="line">node.RetrievalMiner = retrieval.NewMiner(node)</span><br><span class="line"></span><br><span class="line">// 订阅区块通知</span><br><span class="line">// subscribe to block notifications</span><br><span class="line">blkSub, err := node.PorcelainAPI.PubSubSubscribe(BlockTopic)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to subscribe to blocks topic&quot;)</span><br><span class="line">&#125;</span><br><span class="line">node.BlockSub = blkSub</span><br><span class="line"></span><br><span class="line">// 订阅消息通知</span><br><span class="line">// subscribe to message notifications</span><br><span class="line">msgSub, err := node.PorcelainAPI.PubSubSubscribe(msg.Topic)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to subscribe to message topic&quot;)</span><br><span class="line">&#125;</span><br><span class="line">node.MessageSub = msgSub</span><br><span class="line"></span><br><span class="line">cctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">node.cancelSubscriptionsCtx = cancel</span><br><span class="line"></span><br><span class="line">// 启用新线程订阅区块及消息主题,设置handle回调</span><br><span class="line">go node.handleSubscription(cctx, node.processBlock, &quot;processBlock&quot;, node.BlockSub, &quot;BlockSub&quot;)</span><br><span class="line">go node.handleSubscription(cctx, node.processMessage, &quot;processMessage&quot;, node.MessageSub, &quot;MessageSub&quot;)</span><br><span class="line"></span><br><span class="line">// 启用新线程处理新的tipset事件</span><br><span class="line">node.HeaviestTipSetHandled = func() &#123;&#125;</span><br><span class="line">node.HeaviestTipSetCh = node.ChainReader.HeadEvents().Sub(chain.NewHeadTopic)</span><br><span class="line">go node.handleNewHeaviestTipSet(cctx, node.ChainReader.Head())</span><br><span class="line"></span><br><span class="line">// 非离线模式启动bootstapper服务</span><br><span class="line">if !node.OfflineMode &#123;</span><br><span class="line">node.Bootstrapper.Start(context.Background())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 启动心跳服务</span><br><span class="line">if err := node.setupHeartbeatServices(ctx); err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to start heartbeat services&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>停止filecoin节点的流程概览 </li></ul><blockquote><p>释放资源，停止相关服务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// Stop initiates the shutdown of the node.</span><br><span class="line">func (node *Node) Stop(ctx context.Context) &#123;</span><br><span class="line">node.ChainReader.HeadEvents().Unsub(node.HeaviestTipSetCh)</span><br><span class="line">// 停止挖矿</span><br><span class="line">node.StopMining(ctx)</span><br><span class="line"></span><br><span class="line">// 取消订阅</span><br><span class="line">node.cancelSubscriptions()</span><br><span class="line">// 停止链读取服务</span><br><span class="line">node.ChainReader.Stop()</span><br><span class="line"></span><br><span class="line">// 停止密封服务</span><br><span class="line">if node.SectorBuilder() != nil &#123;</span><br><span class="line">if err := node.SectorBuilder().Close(); err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;error closing sector builder: %s\n&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">node.sectorBuilder = nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭host实例</span><br><span class="line">if err := node.Host().Close(); err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;error closing host: %s\n&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭资源实例</span><br><span class="line">if err := node.Repo.Close(); err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;error closing repo: %s\n&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭bootstqpper实例</span><br><span class="line">node.Bootstrapper.Stop()</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;stopping filecoin :(&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动及停止挖矿"><a href="#启动及停止挖矿" class="headerlink" title="启动及停止挖矿"></a>启动及停止挖矿</h3><ul><li>启动挖矿</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">// StartMining causes the node to start feeding blocks to the mining worker and initializes</span><br><span class="line">// the SectorBuilder for the mining address.</span><br><span class="line">func (node *Node) StartMining(ctx context.Context) error &#123;</span><br><span class="line">// 如果在挖矿中，退出</span><br><span class="line">if node.isMining() &#123;</span><br><span class="line">return errors.New(&quot;Node is already mining&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 获取矿工地址</span><br><span class="line">minerAddr, err := node.miningAddress()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to get mining address&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 确保密封服务实例存在</span><br><span class="line">// ensure we have a sector builder</span><br><span class="line">if node.SectorBuilder() == nil &#123;</span><br><span class="line">if err := node.setupMining(ctx); err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取地址</span><br><span class="line">minerOwnerAddr, err := node.miningOwnerAddress(ctx, minerAddr)</span><br><span class="line">minerSigningAddress := node.MiningSignerAddress()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrapf(err, &quot;failed to get mining owner address for miner %s&quot;, minerAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockTime, mineDelay := node.MiningTimes()</span><br><span class="line"></span><br><span class="line">// 实例化挖矿调度服务</span><br><span class="line">if node.MiningScheduler == nil &#123;</span><br><span class="line">getStateFromKey := func(ctx context.Context, tsKey string) (state.Tree, error) &#123;</span><br><span class="line">tsas, err := node.ChainReader.GetTipSetAndState(ctx, tsKey)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">return state.LoadStateTree(ctx, node.CborStore(), tsas.TipSetStateRoot, builtin.Actors)</span><br><span class="line">&#125;</span><br><span class="line">getState := func(ctx context.Context, ts types.TipSet) (state.Tree, error) &#123;</span><br><span class="line">return getStateFromKey(ctx, ts.String())</span><br><span class="line">&#125;</span><br><span class="line">getWeight := func(ctx context.Context, ts types.TipSet) (uint64, error) &#123;</span><br><span class="line">parent, err := ts.Parents()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return uint64(0), err</span><br><span class="line">&#125;</span><br><span class="line">// TODO handle genesis cid more gracefully</span><br><span class="line">if parent.Len() == 0 &#123;</span><br><span class="line">return node.Consensus.Weight(ctx, ts, nil)</span><br><span class="line">&#125;</span><br><span class="line">pSt, err := getStateFromKey(ctx, parent.String())</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return uint64(0), err</span><br><span class="line">&#125;</span><br><span class="line">return node.Consensus.Weight(ctx, ts, pSt)</span><br><span class="line">&#125;</span><br><span class="line">getAncestors := func(ctx context.Context, ts types.TipSet, newBlockHeight *types.BlockHeight) ([]types.TipSet, error) &#123;</span><br><span class="line">return chain.GetRecentAncestors(ctx, ts, node.ChainReader, newBlockHeight, consensus.AncestorRoundsNeeded, consensus.LookBackParameter)</span><br><span class="line">&#125;</span><br><span class="line">processor := consensus.NewDefaultProcessor()</span><br><span class="line">worker := mining.NewDefaultWorker(node.MsgPool, getState, getWeight, getAncestors, processor, node.PowerTable,</span><br><span class="line">node.Blockstore, node.CborStore(), minerAddr, minerOwnerAddr, minerSigningAddress, node.Wallet, blockTime)</span><br><span class="line">node.MiningScheduler = mining.NewScheduler(worker, mineDelay, node.ChainReader.Head)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// paranoid check</span><br><span class="line">// 启动挖矿服务</span><br><span class="line">if !node.MiningScheduler.IsStarted() &#123;</span><br><span class="line">node.miningCtx, node.cancelMining = context.WithCancel(context.Background())</span><br><span class="line">outCh, doneWg := node.MiningScheduler.Start(node.miningCtx)</span><br><span class="line"></span><br><span class="line">node.miningDoneWg = doneWg</span><br><span class="line">node.AddNewlyMinedBlock = node.addNewlyMinedBlock</span><br><span class="line">node.miningDoneWg.Add(1)</span><br><span class="line">go node.handleNewMiningOutput(outCh)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// initialize a storage miner</span><br><span class="line">// 初始化存储矿工</span><br><span class="line">storageMiner, err := initStorageMinerForNode(ctx, node)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to initialize storage miner&quot;)</span><br><span class="line">&#125;</span><br><span class="line">node.StorageMiner = storageMiner</span><br><span class="line"></span><br><span class="line">// loop, turning sealing-results into commitSector messages to be included</span><br><span class="line">// in the chain</span><br><span class="line">// 新开线程处理，1 密封完成处理；2 接受停止挖矿消息</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">// 密封完成处理</span><br><span class="line">case result := &lt;-node.SectorBuilder().SectorSealResults():</span><br><span class="line">if result.SealingErr != nil &#123;</span><br><span class="line">log.Errorf(&quot;failed to seal sector with id %d: %s&quot;, result.SectorID, result.SealingErr.Error())</span><br><span class="line">&#125; else if result.SealingResult != nil &#123;</span><br><span class="line"></span><br><span class="line">// TODO: determine these algorithmically by simulating call and querying historical prices</span><br><span class="line">gasPrice := types.NewGasPrice(0)</span><br><span class="line">gasUnits := types.NewGasUnits(300)</span><br><span class="line"></span><br><span class="line">val := result.SealingResult</span><br><span class="line">// This call can fail due to, e.g. nonce collisions. Our miners existence depends on this.</span><br><span class="line">// We should deal with this, but MessageSendWithRetry is problematic.</span><br><span class="line">_, err := node.PorcelainAPI.MessageSend(</span><br><span class="line">node.miningCtx,</span><br><span class="line">minerOwnerAddr,</span><br><span class="line">minerAddr,</span><br><span class="line">nil,</span><br><span class="line">gasPrice,</span><br><span class="line">gasUnits,</span><br><span class="line">&quot;commitSector&quot;,</span><br><span class="line">val.SectorID,</span><br><span class="line">val.CommD[:],</span><br><span class="line">val.CommR[:],</span><br><span class="line">val.CommRStar[:],</span><br><span class="line">val.Proof[:],</span><br><span class="line">)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;failed to send commitSector message from %s to %s for sector with id %d: %s&quot;, minerOwnerAddr, minerAddr, val.SectorID, err)</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.StorageMiner.OnCommitmentAddedToChain(val, nil)</span><br><span class="line">&#125;</span><br><span class="line">// 挖矿取消</span><br><span class="line">case &lt;-node.miningCtx.Done():</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">// schedules sealing of staged piece-data</span><br><span class="line">// 定时密封阶段性的碎片数据</span><br><span class="line">if node.Repo.Config().Mining.AutoSealIntervalSeconds &gt; 0 &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">// 取消</span><br><span class="line">case &lt;-node.miningCtx.Done():</span><br><span class="line">return</span><br><span class="line">// 定时密封</span><br><span class="line">case &lt;-time.After(time.Duration(node.Repo.Config().Mining.AutoSealIntervalSeconds) * time.Second):</span><br><span class="line">log.Info(&quot;auto-seal has been triggered&quot;)</span><br><span class="line">if err := node.SectorBuilder().SealAllStagedSectors(node.miningCtx); err != nil &#123;</span><br><span class="line">log.Errorf(&quot;scheduler received error from node.SectorBuilder.SealAllStagedSectors (%s) - exiting&quot;, err.Error())</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">log.Debug(&quot;auto-seal is disabled&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 设置微挖矿状态</span><br><span class="line">node.setIsMining(true)</span><br><span class="line"></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>停止挖矿</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// StopMining stops mining on new blocks.</span><br><span class="line">func (node *Node) StopMining(ctx context.Context) &#123;</span><br><span class="line">node.setIsMining(false)</span><br><span class="line"></span><br><span class="line">// 取消挖矿</span><br><span class="line">if node.cancelMining != nil &#123;</span><br><span class="line">node.cancelMining()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 等待执行中的挖矿任务完成后结束</span><br><span class="line">if node.miningDoneWg != nil &#123;</span><br><span class="line">node.miningDoneWg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TODO: stop node.StorageMiner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阶段性分析结束说明"><a href="#阶段性分析结束说明" class="headerlink" title="阶段性分析结束说明"></a>阶段性分析结束说明</h2><blockquote><p>至此笔者针对go-filecoin部分的分析快告一个小的段落了</p><p>文章因为时间的关系，书面出来只是将关键部分书面表达出来，更多的像是笔者的一个分析笔记,但是我相信对于想分析源码的朋友有一定帮助</p><p>后面会抽空补充一章总结，笔者在第4章中有提到过，薄读-&gt;厚读-&gt;再薄读,我们还需要一次薄读，来加深我们对filecoin的认识。</p></blockquote><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十五章源码分析之节点运行逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析十四：filecoin源码分析之服务层链同步、共识协议及挖矿</title>
    <link href="https://learnblockchain.cn/2019/03/09/filecoin-code-analysis-14/"/>
    <id>https://learnblockchain.cn/2019/03/09/filecoin-code-analysis-14/</id>
    <published>2019-03-09T08:35:33.000Z</published>
    <updated>2019-03-12T07:26:21.849Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十四章源码分析之服务层链同步、共识协议及挖矿。</p><a id="more"></a><blockquote><p>分析基于的源码版本：go-filecoin master a0598a54(2019年3月9日)</p></blockquote><h2 id="chain同步"><a href="#chain同步" class="headerlink" title="chain同步"></a>chain同步</h2><h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><ul><li>TipIndex 定义定义了tipset的基础结构及方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    chain</span><br><span class="line"></span><br><span class="line">▼+TipIndex : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -mu : sync.Mutex</span><br><span class="line">    // 根据id来获取tipset及其状态根</span><br><span class="line">   -tsasByID : tsasByTipSetID</span><br><span class="line">    // 根据父块来获取tipset及其状态根</span><br><span class="line">   -tsasByParentsAndHeight : map[string]tsasByTipSetID</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 根据id来获取tipset及其状态根</span><br><span class="line">   +Get(tsKey string) : *TipSetAndState, error</span><br><span class="line">    // 根据父块来获取tipset及其状态根</span><br><span class="line">   +GetByParentsAndHeight(pKey string, h uint64) : []*TipSetAndState, error</span><br><span class="line">    // 根据Id判断是否有此tipset</span><br><span class="line">   +Has(tsKey string) : bool</span><br><span class="line">    // 根据父块判断是否有此tipset</span><br><span class="line">   +HasByParentsAndHeight(pKey string, h uint64) : bool</span><br><span class="line">    // 设置tipset和状态根</span><br><span class="line">   +Put(tsas *TipSetAndState) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewTipIndex() : *TipIndex</span><br><span class="line"></span><br><span class="line">▼+TipSetAndState : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // tipset</span><br><span class="line">   +TipSet : types.TipSet</span><br><span class="line">    // 相当于区块的root cid</span><br><span class="line">   +TipSetStateRoot : cid.Cid</span><br></pre></td></tr></table></figure><h3 id="链同步"><a href="#链同步" class="headerlink" title="链同步"></a>链同步</h3><ul><li>chain同步的接口定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location: chain/syncer.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    chain</span><br><span class="line"></span><br><span class="line">▼+Syncer : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 处理新区块的接口定义</span><br><span class="line">   +HandleNewBlocks(ctx context.Context, blkCids []cid.Cid) : error</span><br><span class="line"></span><br><span class="line">   具体接口实现在location: chain/defalut_syncer.go中</span><br></pre></td></tr></table></figure><ul><li>特殊情况的错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location: chain/reorg.go</span><br><span class="line"></span><br><span class="line">    // 如果当前区块头不包含在最新的区块头之上时候，会报此错误</span><br><span class="line">▼ functions</span><br><span class="line">   +IsReorg(curHead types.TipSet, newChain []types.TipSet) : bool</span><br></pre></td></tr></table></figure><h3 id="链存储"><a href="#链存储" class="headerlink" title="链存储"></a>链存储</h3><ul><li>其中<ul><li>Readstore是一个通用接口</li><li>Store的设计基本是给ChainSync使用的</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">location: chain/store.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    chain</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 用于发布新的区块头的主题&quot;new-head&quot;</span><br><span class="line">   +NewHeadTopic</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">    // 创世块的key</span><br><span class="line">   +GenesisKey</span><br><span class="line"></span><br><span class="line">▼+ReadStore : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 获取历史区块，通过channel实现</span><br><span class="line">   +BlockHistory(ctx context.Context, tips types.TipSet) : chan interface&#123;&#125;</span><br><span class="line">    // 获取创世区块cid</span><br><span class="line">   +GenesisCid() : cid.Cid</span><br><span class="line">    // 通过cid获取具体的block</span><br><span class="line">   +GetBlock(ctx context.Context, id cid.Cid) : *types.Block, error</span><br><span class="line">    // 通过cid获取具体的block</span><br><span class="line">   +GetTipSetAndState(ctx context.Context, tsKey string) : *TipSetAndState, error</span><br><span class="line">    // 获取最新区块</span><br><span class="line">   +Head() : types.TipSet</span><br><span class="line">    // 最新区块变更事件</span><br><span class="line">   +HeadEvents() : *pubsub.PubSub</span><br><span class="line">    // 最新合约状态</span><br><span class="line">   +LatestState(ctx context.Context) : state.Tree, error</span><br><span class="line">    // 加载chain</span><br><span class="line">   +Load(ctx context.Context) : error</span><br><span class="line">    // 停止</span><br><span class="line">   +Stop()</span><br><span class="line"></span><br><span class="line">    // 这个接口只是chain同步使用</span><br><span class="line">▼+Store : interface</span><br><span class="line">    [embedded]</span><br><span class="line">   +ReadStore</span><br><span class="line">    [methods]</span><br><span class="line">   +GetBlocks(ctx context.Context, ids types.SortedCidSet) : []*types.Block, error</span><br><span class="line">   +GetTipSetAndStatesByParentsAndHeight(ctx context.Context, pTsKey string, h uint64) : []*TipSetAndState, error</span><br><span class="line">   +HasAllBlocks(ctx context.Context, cs []cid.Cid) : bool</span><br><span class="line">   +HasBlock(ctx context.Context, c cid.Cid) : bool</span><br><span class="line">   +HasTipSetAndState(ctx context.Context, tsKey string) : bool</span><br><span class="line">   +HasTipSetAndStatesWithParentsAndHeight(ctx context.Context, pTsKey string, h uint64) : bool</span><br><span class="line">    // 存储并更新最新区块信息</span><br><span class="line">   +PutTipSetAndState(ctx context.Context, tsas *TipSetAndState) : error</span><br><span class="line">   +SetHead(ctx context.Context, s types.TipSet) : error</span><br></pre></td></tr></table></figure><h2 id="consensus"><a href="#consensus" class="headerlink" title="consensus"></a>consensus</h2><ul><li>主要功能<ul><li>提供创建选票方法，验证中奖选票方法,确定最终的tipset</li><li>将合法的tipset消息取出，生效actor状态</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    consensus</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +ECPrM : uint64</span><br><span class="line">   +ECV : uint64</span><br><span class="line">   +LookBackParameter</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +AncestorRoundsNeeded</span><br><span class="line">   +ErrInvalidBase</span><br><span class="line">   +ErrStateRootMismatch</span><br><span class="line">   +ErrUnorderedTipSets</span><br><span class="line">   -log</span><br><span class="line">   -ticketDomain : *big.Int</span><br><span class="line"></span><br><span class="line">    // Expected实现EC共识</span><br><span class="line">▼+Expected : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 全局功率表</span><br><span class="line">   +PwrTableView : PowerTableView</span><br><span class="line">   -bstore : blockstore.Blockstore</span><br><span class="line">   -cstore : *hamt.CborIpldStore</span><br><span class="line">   -genesisCid : cid.Cid</span><br><span class="line">   -processor : Processor</span><br><span class="line">   -verifier : proofs.Verifier</span><br><span class="line">    [methods]</span><br><span class="line">    // 比较两个tipset的权重</span><br><span class="line">   +IsHeavier(ctx context.Context, a, b types.TipSet, aSt, bSt state.Tree) : bool, error</span><br><span class="line">    // 建立新的tipset</span><br><span class="line">   +NewValidTipSet(ctx context.Context, blks []*types.Block) : types.TipSet, error</span><br><span class="line">    // 运行状态转换</span><br><span class="line">    // 1 新区块到来的时候出发状态转换(chain sync逻辑)</span><br><span class="line">    // 2 进入后判断tipset的有效性，包括验证选票是否中奖</span><br><span class="line">    // 3 逐一执行消息，切换状态</span><br><span class="line">   +RunStateTransition(ctx context.Context, ts types.TipSet, ancestors []types.TipSet, pSt state.Tree) : state.Tree, error</span><br><span class="line">    // 计算tipset权重</span><br><span class="line">   +Weight(ctx context.Context, ts types.TipSet, pSt state.Tree) : uint64, error</span><br><span class="line">   -runMessages(ctx context.Context, st state.Tree, vms vm.StorageMap, ts types.TipSet, ancestors []types.TipSet) : state.Tree, error</span><br><span class="line">   -validateBlockStructure(ctx context.Context, b *types.Block) : error</span><br><span class="line">   -validateMining(ctx context.Context, st state.Tree, ts types.TipSet, parentTs types.TipSet) : error</span><br><span class="line"></span><br><span class="line">▼+Processor : interface</span><br><span class="line">    // 会被RunStateTransition间接掉用,进行状态切换(生效挖矿成功的tipset消息)</span><br><span class="line">    [methods]</span><br><span class="line">    // 从tipset中逐一取出block处理</span><br><span class="line">   +ProcessBlock(ctx context.Context, st state.Tree, vms vm.StorageMap, blk *types.Block, ancestors []types.TipSet) : []*ApplicationResult, error</span><br><span class="line">   +ProcessTipSet(ctx context.Context, st state.Tree, vms vm.StorageMap, ts types.TipSet, ancestors []types.TipSet) : *ProcessTipSetResponse, error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 与白皮书描述一致，按照存储功率出块，用以判断是否中奖</span><br><span class="line">   +CompareTicketPower(ticket types.Signature, minerPower uint64, totalPower uint64) : bool</span><br><span class="line">    // 产生随机挑战种子,针对时空证明</span><br><span class="line">   +CreateChallengeSeed(parents types.TipSet, nullBlkCount uint64) : proofs.PoStChallengeSeed, error</span><br><span class="line">    // 生成选票</span><br><span class="line">    // 用上一个区块的时空证明+矿工地址（目前直接用的矿工地址,issue1054讨论中） 生成２５６bit哈希</span><br><span class="line">   +CreateTicket(proof proofs.PoStProof, minerAddr address.Address) : []byte</span><br><span class="line">    // 判断是否中奖,调用CompareTicketPower</span><br><span class="line">   +IsWinningTicket(ctx context.Context, bs blockstore.Blockstore, ptv PowerTableView, st state.Tree, ticket types.Signature, miner address.Address) : bool, error</span><br><span class="line">    // 实例化Expected</span><br><span class="line">   +NewExpected(cs *hamt.CborIpldStore, bs blockstore.Blockstore, processor Processor, pt PowerTableView, gCid cid.Cid, verifier proofs.Verifier) : Protocol</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><h2 id="mining"><a href="#mining" class="headerlink" title="mining"></a>mining</h2><h3 id="挖矿的主要逻辑"><a href="#挖矿的主要逻辑" class="headerlink" title="挖矿的主要逻辑"></a>挖矿的主要逻辑</h3><ul><li>1 不能将空块最为基准块</li><li>2 基于上一个Tipset信息（如果上一个为空块，必须找到空块之前高度最高的Tipset，并记录中间空块数据）和空块数母生成合法的时空证明挑战参数</li><li>3 生成时空证明</li><li>4 时空证明成功，调用共识协议创建奖票</li><li>5 如果奖票中奖，将未打包的消息打包区块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">location: mining/working</span><br><span class="line"></span><br><span class="line">//这里是挖矿逻辑的真正入口</span><br><span class="line"></span><br><span class="line">// Mine implements the DefaultWorkers main mining function..</span><br><span class="line">// The returned bool indicates if this miner created a new block or not.</span><br><span class="line">func (w *DefaultWorker) Mine(ctx context.Context, base types.TipSet, nullBlkCount int, outCh chan&lt;- Output) bool &#123;</span><br><span class="line">log.Info(&quot;Worker.Mine&quot;)</span><br><span class="line">ctx = log.Start(ctx, &quot;Worker.Mine&quot;)</span><br><span class="line">defer log.Finish(ctx)</span><br><span class="line">    // 不能将空块作为基准块挖矿</span><br><span class="line">if len(base) == 0 &#123;</span><br><span class="line">log.Warning(&quot;Worker.Mine returning because it can&apos;t mine on an empty tipset&quot;)</span><br><span class="line">outCh &lt;- Output&#123;Err: errors.New(&quot;bad input tipset with no blocks sent to Mine()&quot;)&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st, err := w.getStateTree(ctx, base)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;Worker.Mine couldn&apos;t get state tree for tipset: %s&quot;, err.Error())</span><br><span class="line">outCh &lt;- Output&#123;Err: err&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Debugf(&quot;Mining on tipset: %s, with %d null blocks.&quot;, base.String(), nullBlkCount)</span><br><span class="line">if ctx.Err() != nil &#123;</span><br><span class="line">log.Warningf(&quot;Worker.Mine returning with ctx error %s&quot;, ctx.Err().Error())</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 基于上一个基准Tipset以及空块数目生成Post随机挑战参数</span><br><span class="line">challenge, err := consensus.CreateChallengeSeed(base, uint64(nullBlkCount))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">outCh &lt;- Output&#123;Err: err&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 生成时空证明</span><br><span class="line">prCh := createProof(challenge, w.createPoSTFunc)</span><br><span class="line"></span><br><span class="line">var proof proofs.PoStProof</span><br><span class="line">var ticket []byte</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">log.Infof(&quot;Mining run on base %s with %d null blocks canceled.&quot;, base.String(), nullBlkCount)</span><br><span class="line">return false</span><br><span class="line">case prChRead, more := &lt;-prCh:</span><br><span class="line">if !more &#123;</span><br><span class="line">log.Errorf(&quot;Worker.Mine got zero value from channel prChRead&quot;)</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">copy(proof[:], prChRead[:])</span><br><span class="line">        // 时空证明成功，调用共识协议创建奖票</span><br><span class="line">ticket = consensus.CreateTicket(proof, w.minerAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TODO: Test the interplay of isWinningTicket() and createPoSTFunc()</span><br><span class="line">// https://github.com/filecoin-project/go-filecoin/issues/1791</span><br><span class="line">    // 调用共识协议确认是否中奖</span><br><span class="line">weHaveAWinner, err := consensus.IsWinningTicket(ctx, w.blockstore, w.powerTable, st, ticket, w.minerAddr)</span><br><span class="line"></span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;Worker.Mine couldn&apos;t compute ticket: %s&quot;, err.Error())</span><br><span class="line">outCh &lt;- Output&#123;Err: err&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if weHaveAWinner &#123;</span><br><span class="line">        // 如果中奖将打包消息，生成区块</span><br><span class="line">next, err := w.Generate(ctx, base, ticket, proof, uint64(nullBlkCount))</span><br><span class="line">if err == nil &#123;</span><br><span class="line">log.SetTag(ctx, &quot;block&quot;, next)</span><br><span class="line">log.Debugf(&quot;Worker.Mine generates new winning block! %s&quot;, next.Cid().String())</span><br><span class="line">&#125;</span><br><span class="line">outCh &lt;- NewOutput(next, err)</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他细节源码简析"><a href="#其他细节源码简析" class="headerlink" title="其他细节源码简析"></a>其他细节源码简析</h3><ul><li>消息队列（交易消息集）的处理 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">location: mining/mqueue.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    mining</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+MessageQueue : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -senderQueues : queueHeap</span><br><span class="line">    [methods]</span><br><span class="line">    // 取出消息切片，即多条消息</span><br><span class="line">   +Drain() : []*types.SignedMessage</span><br><span class="line">   +Empty() : bool</span><br><span class="line">    // 从队列取出一条消息</span><br><span class="line">   +Pop() : *types.SignedMessage, bool</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化消息队列</span><br><span class="line">   +NewMessageQueue(msgs []*types.SignedMessage) : MessageQueue</span><br><span class="line"></span><br><span class="line"> -nonceQueue : []*types.SignedMessage</span><br><span class="line"></span><br><span class="line">    // 一些队列的基本操作</span><br><span class="line">    // 1 长度、push、pop功能</span><br><span class="line">    // 2 Less主要是比较两条交易中的Gas价格，大家可以回头看看type中的消息定义,这里不赘述了</span><br><span class="line">    // 3 为什么要提供Less接口，留给大家思索一下，熟悉以太坊的可能一眼就看出了</span><br><span class="line">▼-queueHeap : []nonceQueue</span><br><span class="line">    [methods]</span><br><span class="line">   +Len() : int</span><br><span class="line">   +Less(i, j int) : bool</span><br><span class="line">   +Pop() : interface&#123;&#125;</span><br><span class="line">   +Push(x interface&#123;&#125;)</span><br><span class="line">   +Swap(i, j int)</span><br></pre></td></tr></table></figure><ul><li>调度器<ul><li>入口</li><li>node实例会调用NewScheduler创建相关实例并启动挖矿</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    mining</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +MineDelayConversionFactor</span><br><span class="line"></span><br><span class="line">▼-timingScheduler : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -isStarted : bool</span><br><span class="line">   -mineDelay : time.Duration</span><br><span class="line">    // 查找权重最高的Tipset</span><br><span class="line">   -pollHeadFunc : func() types.TipSet</span><br><span class="line">    // 底层的挖矿逻辑，在下面会分析Worker</span><br><span class="line">   -worker : Worker</span><br><span class="line">    [methods]</span><br><span class="line">    // 判断是否启动挖矿</span><br><span class="line">   +IsStarted() : bool</span><br><span class="line">    // 启动挖矿</span><br><span class="line">   +Start(miningCtx context.Context) : chan Output, *sync.WaitGroup</span><br><span class="line"></span><br><span class="line">▼+Scheduler : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +IsStarted() : bool</span><br><span class="line">   +Start(miningCtx context.Context) : chan Output, *sync.WaitGroup</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +MineOnce(ctx context.Context, w Worker, md time.Duration, ts types.TipSet) : Output, error</span><br><span class="line">    // 实例化timingScheduler </span><br><span class="line">   +NewScheduler(w Worker, md time.Duration, f func() types.TipSet) : Scheduler</span><br><span class="line">   -nextNullBlkCount(prevNullBlkCount int, prevBase, currBase types.TipSet) : int</span><br></pre></td></tr></table></figure><ul><li>打包区块<ul><li>具体见如下注释，可对应此查阅源码。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location: mining/block_generate.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    mining</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ DefaultWorker* : ctype</span><br><span class="line">    [methods]</span><br><span class="line">    // 1 如果节点没有产生过有效存储，无法参与挖矿</span><br><span class="line">    // 2 计算区块高度= 基准Tipset高度+空块数目</span><br><span class="line">    // 3 取出未打包消息，调用vm执行,生成收据，并更新状态</span><br><span class="line">    // 4 打包区块信息,返回</span><br><span class="line">   +Generate(ctx context.Context, baseTipSet types.TipSet, ticket types.Signature, proof proofs.PoStProof, nullBlockCount uint64) : *types.Block, error</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十四章源码分析之服务层链同步、共识协议及挖矿。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析十三：filecoin源码分析之服务层actor及vm</title>
    <link href="https://learnblockchain.cn/2019/03/08/filecoin-code-analysis-13/"/>
    <id>https://learnblockchain.cn/2019/03/08/filecoin-code-analysis-13/</id>
    <published>2019-03-08T08:35:33.000Z</published>
    <updated>2019-03-12T07:26:18.158Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十三章源码分析之服务层actor及vm。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>分析源代码版本：master 2c87fd59（2019.3.7）</p><p>回头看第三章开发网使用中创建矿工，提交订单，支付等操作实际上都是actor的新增及状态改变</p><p>当前的实现vm还不具备通用abi数据的解释执行能力，未达到真正智能合约水平</p></blockquote><h2 id="exec-actor及vm的接口定义"><a href="#exec-actor及vm的接口定义" class="headerlink" title="exec(actor及vm的接口定义)"></a>exec(actor及vm的接口定义)</h2><ul><li><p>说明</p><ul><li>提供可执行actor的最小接口要求 ExecutableActor (由actor及具体actor包实现)</li><li>提供actor键值存取接口定义 Lookup (由actor包实现)</li><li>提供状态临时存储的接口定义　Storage (由vm.Storage实现)</li><li>actor的执行环境接口定义 VMContext (由vm.context实现)</li></ul></li><li><p>具体源码注释如下</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    exec</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +ErrDanglingPointer</span><br><span class="line">   +ErrDecode</span><br><span class="line">   +ErrInsufficientGas</span><br><span class="line">   +ErrStaleHead</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +Errors</span><br><span class="line"></span><br><span class="line">▼+Error : string</span><br><span class="line">    [methods]</span><br><span class="line">   +Error() : string</span><br><span class="line"></span><br><span class="line"> +ExportedFunc : func(ctx VMContext) []byte, uint8, error</span><br><span class="line"></span><br><span class="line">    // actor符号集合</span><br><span class="line">▼+Exports : map[string]*FunctionSignature</span><br><span class="line">    [methods]</span><br><span class="line">    // 判断是否存在特定方法</span><br><span class="line">   +Has(method string) : bool</span><br><span class="line">    </span><br><span class="line">    // 对于单个函数的符号表</span><br><span class="line">    // todo中的事情：需要转换为非go类型</span><br><span class="line">▼+FunctionSignature : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Params : []abi.Type</span><br><span class="line">   +Return : []abi.Type</span><br><span class="line"></span><br><span class="line">    // 可执行合约接口，这是每一类型的合约必须实现的最小接口</span><br><span class="line">    // 包括account,miner,storagemarket,paymentbroker</span><br><span class="line">▼+ExecutableActor : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Exports() : Exports</span><br><span class="line">   +InitializeState(storage Storage, initializerData interface&#123;&#125;) : error</span><br><span class="line"></span><br><span class="line">   // 由actor.lookup实现键值存储　（actor/storage.go）</span><br><span class="line">▼+Lookup : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Commit(ctx context.Context) : cid.Cid, error</span><br><span class="line">   +Delete(ctx context.Context, k string) : error</span><br><span class="line">   +Find(ctx context.Context, k string) : interface&#123;&#125;, error</span><br><span class="line">   +IsEmpty() : bool</span><br><span class="line">   +Set(ctx context.Context, k string, v interface&#123;&#125;) : error</span><br><span class="line">   +Values(ctx context.Context) : []*hamt.KV, error</span><br><span class="line"></span><br><span class="line">   // 由vm.Storage实现</span><br><span class="line">   // 解决持久化的问题，有副本防止回滚机制</span><br><span class="line">   // 具体实现还有Flush持久化到datastore功能</span><br><span class="line">▼+Storage : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 提交最新actor　Head</span><br><span class="line">   +Commit(cid.Cid, cid.Cid) : error</span><br><span class="line">    // 如下都为内存中操作</span><br><span class="line">   +Get(cid.Cid) : []byte, error</span><br><span class="line">   +Head() : cid.Cid</span><br><span class="line">   +Put(interface&#123;&#125;) : cid.Cid, error</span><br><span class="line"></span><br><span class="line">    // actor的abi执行环境接口,由vm.context实现</span><br><span class="line">▼+VMContext : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 创建新的合约地址</span><br><span class="line">   +AddressForNewActor() : address.Address, error</span><br><span class="line">    // 查询区块高度</span><br><span class="line">   +BlockHeight() : *types.BlockHeight</span><br><span class="line">    // Gas收费</span><br><span class="line">   +Charge(cost types.GasUnits) : error</span><br><span class="line">    //　创建合约</span><br><span class="line">   +CreateNewActor(addr address.Address, code cid.Cid, initalizationParams interface&#123;&#125;) : error</span><br><span class="line">    // 判断是否为account类型的Actor</span><br><span class="line">   +IsFromAccountActor() : bool</span><br><span class="line">    // 合约中交易信息</span><br><span class="line">   +Message() : *types.Message</span><br><span class="line">    // 执行合约函数</span><br><span class="line">   +Send(to address.Address, method string, value *types.AttoFIL, params []interface&#123;&#125;) : [][]byte, uint8, error</span><br><span class="line">   +Storage() : Storage</span><br><span class="line">    // 当Storage接口完成会删除如下两项</span><br><span class="line">   +ReadStorage() : []byte, error</span><br><span class="line">   +WriteStorage(interface&#123;&#125;) : error</span><br></pre></td></tr></table></figure><h2 id="actor的类型及源码分析"><a href="#actor的类型及源码分析" class="headerlink" title="actor的类型及源码分析"></a>actor的类型及源码分析</h2><ul><li>actor包定义及实现了基础actor,此外filecoin还定义了四种内置的actor类型<ul><li>存储市场actor,此类actor整个网络只有一个实例，用于创建存储矿工、更新功率表、获取总存储容量</li><li>Miner actor,此类actor整个网络只有多个实例（随用户数增加而增加），用于执行矿工相关的操作</li><li>paymentbroker actor,此类actor整个网络只有一个实例，用于创建支付通道以及支付相关信息</li><li>account actor,账户actor,此类actor整个网络只有多个实例（随用户数增加而增加），只能用于基本的转账操作</li></ul></li></ul><p>###　基础actor包</p><ul><li>说明<ul><li>定义了actor的基础结构,其中code如果使用内置的如上四种actor，他们的值都是固定的</li><li>提供了actor的基础操作方法</li><li>见笔者在代码中的注释</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">location: actor/actor.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    actor</span><br><span class="line"></span><br><span class="line">    // Actor可以理解为合约或者账户，转账操作要检查code cid合法性</span><br><span class="line">▼+Actor : struct</span><br><span class="line">    [fields]</span><br><span class="line">    //余额</span><br><span class="line">   +Balance : *types.AttoFIL</span><br><span class="line"></span><br><span class="line">    // 合约代码的cid，vm具体执行其对应的代码</span><br><span class="line">    // 1 具体代码的cid</span><br><span class="line">    // 2 在go语言实现的四种特定合约，这个字段是常量，比如account,miner,storagemarket,paymentbroker</span><br><span class="line">   +Code : cid.Cid</span><br><span class="line"></span><br><span class="line">    //　合约状态的最新状态</span><br><span class="line">   +Head : cid.Cid</span><br><span class="line"></span><br><span class="line">    // 防止重放攻击而设置的参数</span><br><span class="line">   +Nonce : types.Uint64</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 计算actor的cid</span><br><span class="line">   +Cid() : cid.Cid, error</span><br><span class="line"></span><br><span class="line">    // 打印合约信息</span><br><span class="line">   +Format(f fmt.State, c rune)</span><br><span class="line"></span><br><span class="line">    // 增加Nonce+1方法</span><br><span class="line">   +IncNonce()</span><br><span class="line"></span><br><span class="line">    // 编码</span><br><span class="line">   +Marshal() : []byte, error</span><br><span class="line"></span><br><span class="line">    // 解码</span><br><span class="line">   +Unmarshal(b []byte) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewActor(code cid.Cid, balance *types.AttoFIL) : *Actor</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 只有account类型的actor使用</span><br><span class="line">   +NextNonce(actor *Actor) : uint64, error</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location: actor/export.go</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 返回某个actor的方法执行函数</span><br><span class="line">   +MakeTypedExport(actor exec.ExecutableActor, method string) : exec.ExportedFunc</span><br><span class="line"></span><br><span class="line">   //　序列化成字节切片</span><br><span class="line">   +MarshalValue(val interface&#123;&#125;) : []byte, error</span><br></pre></td></tr></table></figure><h3 id="storagemarket-actor"><a href="#storagemarket-actor" class="headerlink" title="storagemarket actor"></a>storagemarket actor</h3><ul><li>主要功能<ul><li>创建存储矿工</li><li>获取总存储量</li><li>更新功率</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    storagemarket</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +ErrInsufficientCollateral</span><br><span class="line">   +ErrPledgeTooLow</span><br><span class="line">   +ErrUnknownMiner</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +Errors</span><br><span class="line">   +MinimumCollateralPerSector</span><br><span class="line">   +MinimumPledge</span><br><span class="line">   -storageMarketExports</span><br><span class="line"></span><br><span class="line">▼+Actor : struct</span><br><span class="line">    [methods]</span><br><span class="line">    // 创建存储矿工</span><br><span class="line">    // 会调用到miner actor的创建</span><br><span class="line">   +CreateMiner(vmctx exec.VMContext, pledge *big.Int, publicKey []byte, pid peer.ID) : address.Address, uint8, error</span><br><span class="line">   +Exports() : exec.Exports</span><br><span class="line">    // 获取总存储</span><br><span class="line">   +GetTotalStorage(vmctx exec.VMContext) : *big.Int, uint8, error</span><br><span class="line">   +InitializeState(storage exec.Storage, _ interface&#123;&#125;) : error</span><br><span class="line">    // 更新功率</span><br><span class="line">   +UpdatePower(vmctx exec.VMContext, delta *big.Int) : uint8, error</span><br><span class="line"></span><br><span class="line">▼+State : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // miners合集的cid</span><br><span class="line">   +Miners : cid.Cid</span><br><span class="line">   +TotalCommittedStorage : *big.Int</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +MinimumCollateral(sectors *big.Int) : *types.AttoFIL</span><br><span class="line">    // 实例化存储市场</span><br><span class="line">   +NewActor() : *actor.Actor, error</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><h3 id="miner-actor"><a href="#miner-actor" class="headerlink" title="miner actor"></a>miner actor</h3><ul><li>提供功能<ul><li>有基本转账功能 </li><li>提供如下功能</li><li>filecoin网络中存在多个Miner Actor</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    miner</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +ErrAskNotFound</span><br><span class="line">   +ErrCallerUnauthorized</span><br><span class="line">   +ErrInsufficientPledge</span><br><span class="line">   +ErrInvalidPoSt</span><br><span class="line">   +ErrInvalidSealProof</span><br><span class="line">   +ErrInvalidSector</span><br><span class="line">   +ErrPublicKeyTooBig</span><br><span class="line">   +ErrSectorCommitted</span><br><span class="line">   +ErrStoragemarketCallFailed</span><br><span class="line">   +MaximumPublicKeySize</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +Errors</span><br><span class="line">   +GracePeriodBlocks</span><br><span class="line">   +ProvingPeriodBlocks</span><br><span class="line">   -minerExports</span><br><span class="line"></span><br><span class="line">▼+Actor : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Bootstrap : bool</span><br><span class="line">    [methods]</span><br><span class="line">    // 增加订单</span><br><span class="line">   +AddAsk(ctx exec.VMContext, price *types.AttoFIL, expiry *big.Int) : *big.Int, uint8, error</span><br><span class="line">    // 抵押承诺</span><br><span class="line">   +CommitSector(ctx exec.VMContext, sectorID uint64, commD, commR, commRStar, proof []byte) : uint8, error</span><br><span class="line">   +Exports() : exec.Exports</span><br><span class="line">    // 获取存储矿工相关信息</span><br><span class="line">   +GetAsk(ctx exec.VMContext, askid *big.Int) : []byte, uint8, error</span><br><span class="line">   +GetAsks(ctx exec.VMContext) : []uint64, uint8, error</span><br><span class="line">   +GetKey(ctx exec.VMContext) : []byte, uint8, error</span><br><span class="line">   +GetLastUsedSectorID(ctx exec.VMContext) : uint64, uint8, error</span><br><span class="line">   +GetOwner(ctx exec.VMContext) : address.Address, uint8, error</span><br><span class="line">   +GetPeerID(ctx exec.VMContext) : peer.ID, uint8, error</span><br><span class="line">   +GetPledge(ctx exec.VMContext) : *big.Int, uint8, error</span><br><span class="line">   +GetPower(ctx exec.VMContext) : *big.Int, uint8, error</span><br><span class="line">   +GetProvingPeriodStart(ctx exec.VMContext) : *types.BlockHeight, uint8, error</span><br><span class="line">   +GetSectorCommitments(ctx exec.VMContext) : map[string]types.Commitments, uint8, error</span><br><span class="line">   +InitializeState(storage exec.Storage, initializerData interface&#123;&#125;) : error</span><br><span class="line">    // 提交时空证明</span><br><span class="line">   +SubmitPoSt(ctx exec.VMContext, postProofs []proofs.PoStProof) : uint8, error</span><br><span class="line">    // 更新节点Id</span><br><span class="line">   +UpdatePeerID(ctx exec.VMContext, pid peer.ID) : uint8, error</span><br><span class="line"></span><br><span class="line">    // 报价单：价格，时长，序号</span><br><span class="line">▼+Ask : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Expiry : *types.BlockHeight</span><br><span class="line">   +ID : *big.Int</span><br><span class="line">   +Price : *types.AttoFIL</span><br><span class="line"></span><br><span class="line">    // 矿工Actor状态</span><br><span class="line">▼+State : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Asks : []*Ask</span><br><span class="line">   +Collateral : *types.AttoFIL</span><br><span class="line">   +LastPoSt : *types.BlockHeight</span><br><span class="line">   +LastUsedSectorID : uint64</span><br><span class="line">   +NextAskID : *big.Int</span><br><span class="line">   +Owner : address.Address</span><br><span class="line">   +PeerID : peer.ID</span><br><span class="line">   +PledgeSectors : *big.Int</span><br><span class="line">   +Power : *big.Int</span><br><span class="line">   +ProvingPeriodStart : *types.BlockHeight</span><br><span class="line">   +PublicKey : []byte</span><br><span class="line">   +SectorCommitments : map[string]types.Commitments</span><br><span class="line">    [functions]</span><br><span class="line">   +NewState(owner address.Address, key []byte, pledge *big.Int, pid peer.ID, collateral *types.AttoFIL) : *State</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +NewActor() : *actor.Actor</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><h3 id="paymentbroker-actor"><a href="#paymentbroker-actor" class="headerlink" title="paymentbroker actor"></a>paymentbroker actor</h3><ul><li>说明<ul><li>全网只有一个paymentbroker</li><li>几个概念的关系简图</li></ul></li></ul><p><img src="/images/payment.png" alt=""></p><ul><li>源码分析注释<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    paymentbroker</span><br><span class="line"></span><br><span class="line">▼+Actor : struct</span><br><span class="line">    [methods]</span><br><span class="line">    // 关闭支付通道</span><br><span class="line">   +Close(vmctx exec.VMContext, payer address.Address, chid *types.ChannelID, amt *types.AttoFIL, validAt *types.BlockHeight, sig []byte) : uint8, error</span><br><span class="line">    // 创建支付通道</span><br><span class="line">   +CreateChannel(vmctx exec.VMContext, target address.Address, eol *types.BlockHeight) : *types.ChannelID, uint8, error</span><br><span class="line">   +Exports() : exec.Exports</span><br><span class="line">    // 增加资金</span><br><span class="line">   +Extend(vmctx exec.VMContext, chid *types.ChannelID, eol *types.BlockHeight) : uint8, error</span><br><span class="line">   +InitializeState(storage exec.Storage, initializerData interface&#123;&#125;) : error</span><br><span class="line">    // 查询某个支付者的信息</span><br><span class="line">   +Ls(vmctx exec.VMContext, payer address.Address) : []byte, uint8, error</span><br><span class="line">    // 撤回资金</span><br><span class="line">   +Reclaim(vmctx exec.VMContext, chid *types.ChannelID) : uint8, error</span><br><span class="line">    // 赎回(或者收款)资金</span><br><span class="line">   +Redeem(vmctx exec.VMContext, payer address.Address, chid *types.ChannelID, amt *types.AttoFIL, validAt *types.BlockHeight, sig []byte) : uint8, error</span><br><span class="line">    // 收据，指明在特定区块高度之前都是有效的</span><br><span class="line">   +Voucher(vmctx exec.VMContext, chid *types.ChannelID, amount *types.AttoFIL, validAt *types.BlockHeight) : []byte, uint8, error</span><br><span class="line"></span><br><span class="line">▼+PaymentChannel : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 支付通道内金额</span><br><span class="line">   +Amount : *types.AttoFIL</span><br><span class="line">    // 已被赎回金额</span><br><span class="line">   +AmountRedeemed : *types.AttoFIL</span><br><span class="line">   +Eol : *types.BlockHeight</span><br><span class="line">    // 收款人地址</span><br><span class="line">   +Target : address.Address</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 收据的签名及校验</span><br><span class="line">   +SignVoucher(channelID *types.ChannelID, amount *types.AttoFIL, validAt *types.BlockHeight, addr address.Address, signer types.Signer) : types.Signature, error</span><br><span class="line">   +VerifyVoucherSignature(payer address.Address, chid *types.ChannelID, amt *types.AttoFIL, validAt *types.BlockHeight, sig []byte) : bool</span><br><span class="line">   -createVoucherSignatureData(channelID *types.ChannelID, amount *types.AttoFIL, validAt *types.BlockHeight) : []byte</span><br><span class="line">   -findByChannelLookup(ctx context.Context, storage exec.Storage, byPayer exec.Lookup, payer address.Address) : exec.Lookup, error</span><br><span class="line">   -init()</span><br><span class="line">   -reclaim(ctx context.Context, vmctx exec.VMContext, byChannelID exec.Lookup, payer address.Address, chid *types.ChannelID, channel *PaymentChannel) : error</span><br><span class="line">   -updateChannel(ctx exec.VMContext, target address.Address, channel *PaymentChannel, amt *types.AttoFIL, validAt *types.BlockHeight) : error</span><br><span class="line">   -withPayerChannels(ctx context.Context, storage exec.Storage, payer address.Address, f func(exec.Lookup) error) : error</span><br><span class="line">   -withPayerChannelsForReading(ctx context.Context, storage exec.Storage, payer address.Address, f func(exec.Lookup) error) : error</span><br></pre></td></tr></table></figure></li></ul><h3 id="account-actor"><a href="#account-actor" class="headerlink" title="account actor"></a>account actor</h3><ul><li>说明<ul><li>纯账户，记录nonce</li><li>只有转帐功能</li><li>filecoin网络中存在多个account Actor</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    account</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -accountExports</span><br><span class="line"></span><br><span class="line">▼+Actor : struct</span><br><span class="line">    [methods]</span><br><span class="line">   +Exports() : exec.Exports</span><br><span class="line">   +InitializeState(_ exec.Storage, _ interface&#123;&#125;) : error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 实例化account actor 集成actor包中Actor所实现的所有方法</span><br><span class="line">   +NewActor(balance *types.AttoFIL) : *actor.Actor, error</span><br><span class="line">    // 将其他actor类型转为account，保留余额</span><br><span class="line">   +UpgradeActor(act *actor.Actor) : error</span><br></pre></td></tr></table></figure><h2 id="vm-虚拟机运行环境"><a href="#vm-虚拟机运行环境" class="headerlink" title="vm(虚拟机运行环境)"></a>vm(虚拟机运行环境)</h2><ul><li>虚拟机执行函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    vm</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼-sendDeps : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -transfer : func(*actor.Actor, *actor.Actor, *types.AttoFIL) error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 执行合约</span><br><span class="line">   +Send(ctx context.Context, vmCtx *Context) : [][]byte, uint8, error</span><br><span class="line">    // 转账</span><br><span class="line">   +Transfer(fromActor, toActor *actor.Actor, value *types.AttoFIL) : error</span><br><span class="line">   -send(ctx context.Context, deps sendDeps, vmCtx *Context) : [][]byte, uint8, error</span><br></pre></td></tr></table></figure><ul><li>vm环境实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">▼+Context : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -ancestors : []types.TipSet</span><br><span class="line">   -blockHeight : *types.BlockHeight</span><br><span class="line">   -deps : *deps</span><br><span class="line">   -from : *actor.Actor</span><br><span class="line">   -gasTracker : *GasTracker</span><br><span class="line">   -lookBack : int</span><br><span class="line">   -message : *types.Message</span><br><span class="line">   -state : *state.CachedTree</span><br><span class="line">   -storageMap : StorageMap</span><br><span class="line">   -to : *actor.Actor</span><br><span class="line">    [methods]</span><br><span class="line">    // 实现上述VMContext 接口，注释见上</span><br><span class="line">   +AddressForNewActor() : address.Address, error</span><br><span class="line">   +BlockHeight() : *types.BlockHeight</span><br><span class="line">   +Charge(cost types.GasUnits) : error</span><br><span class="line">   +CreateNewActor(addr address.Address, code cid.Cid, initializerData interface&#123;&#125;) : error</span><br><span class="line">   +GasUnits() : types.GasUnits</span><br><span class="line">   +IsFromAccountActor() : bool</span><br><span class="line">   +Message() : *types.Message</span><br><span class="line">   +Rand(sampleHeight *types.BlockHeight) : []byte, error</span><br><span class="line">   +ReadStorage() : []byte, error</span><br><span class="line">   +Send(to address.Address, method string, value *types.AttoFIL, params []interface&#123;&#125;) : [][]byte, uint8, error</span><br><span class="line">   +Storage() : exec.Storage</span><br><span class="line">   +WriteStorage(memory interface&#123;&#125;) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewVMContext(params NewContextParams) : *Context</span><br><span class="line"></span><br><span class="line">▼+NewContextParams : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Ancestors : []types.TipSet</span><br><span class="line">   +BlockHeight : *types.BlockHeight</span><br><span class="line">   +From : *actor.Actor</span><br><span class="line">   +GasTracker : *GasTracker</span><br><span class="line">   +LookBack : int</span><br><span class="line">   +Message : *types.Message</span><br><span class="line">   +State : *state.CachedTree</span><br><span class="line">   +StorageMap : StorageMap</span><br><span class="line">   +To : *actor.Actor</span><br><span class="line"></span><br><span class="line">▼-deps : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +EncodeValues : func([]*abi.Value) []byte, error</span><br><span class="line">   +GetOrCreateActor : func(context.Context, address.Address, func() *actor.Actor, error) *actor.Actor, error</span><br><span class="line">   +Send : func(context.Context, *Context) [][]byte, uint8, error</span><br><span class="line">   +ToValues : func([]interface&#123;&#125;) []*abi.Value, error</span><br><span class="line"></span><br><span class="line">▼ deps* : ctype</span><br><span class="line">    [functions]</span><br><span class="line">   -makeDeps(st *state.CachedTree) : *deps</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -computeActorAddress(creator address.Address, nonce uint64) : address.Address, error</span><br></pre></td></tr></table></figure><ul><li>合约状态存储</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">▼+Storage : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -actor : *actor.Actor</span><br><span class="line">   -blockstore : blockstore.Blockstore</span><br><span class="line">   -chunks : map[cid.Cid]ipld.Node</span><br><span class="line">    [methods]</span><br><span class="line">   +Commit(newCid cid.Cid, oldCid cid.Cid) : error</span><br><span class="line">   +Flush() : error</span><br><span class="line">   +Get(cid cid.Cid) : []byte, error</span><br><span class="line">   +Head() : cid.Cid</span><br><span class="line">   +Prune() : error</span><br><span class="line">   +Put(v interface&#123;&#125;) : cid.Cid, error</span><br><span class="line">   -liveDescendantIds(id cid.Cid) : *cid.Set, error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewStorage(bs blockstore.Blockstore, act *actor.Actor) : Storage</span><br><span class="line"></span><br><span class="line">▼-storageMap : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -blockstore : blockstore.Blockstore</span><br><span class="line">   -storageMap : map[address.Address]Storage</span><br><span class="line">    [methods]</span><br><span class="line">   +Flush() : error</span><br><span class="line">   +NewStorage(addr address.Address, actor *actor.Actor) : Storage</span><br><span class="line"></span><br><span class="line">▼+StorageMap : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Flush() : error</span><br><span class="line">   +NewStorage(addr address.Address, actor *actor.Actor) : Storage</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +NewStorageMap(bs blockstore.Blockstore) : StorageMap</span><br></pre></td></tr></table></figure><h2 id="state包-actor状态"><a href="#state包-actor状态" class="headerlink" title="state包(actor状态)"></a>state包(actor状态)</h2><ul><li>表征actor的状态</li></ul><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十三章源码分析之服务层actor及vm。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析之十二：filecoin源码分析之内部接口层plumbing＆porcelain接口</title>
    <link href="https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-12/"/>
    <id>https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-12/</id>
    <published>2019-03-07T10:35:33.000Z</published>
    <updated>2019-03-12T07:26:14.750Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十二章源码分析之内部接口层plumbing＆porcelain接口。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>目前官方正在将api包解耦，往plumbing、porcelain中迁移</p><ul><li>缘由: 原来的api包，依赖于node包，而node包应该属于api之上的，这导致代码耦合性大</li><li>node作为一个上帝对象，被api包依赖，对架构扩展性，其他类型节点扩展开发不利</li><li>就在笔者写这篇文章的同时，官方应该还在继续迁移，后面api包会逐步都迁移完</li></ul></li><li><p>porcelain主要依赖于plumbing接口</p></li><li><p>上一章所述的api包将会被废除</p></li></ul><h2 id="plumbing＆porcelain模式简述"><a href="#plumbing＆porcelain模式简述" class="headerlink" title="plumbing＆porcelain模式简述"></a>plumbing＆porcelain模式简述</h2><ul><li>该模式是借鉴git的思路，提供两种接口，porcelain偏高层面对用户更加友好方便；plumbing偏底层，友好度弱于porcelain</li><li>porcelain是英文瓷器的意思,类似洗手盆之类；plumbing是水管装置的意思，类似下水管,用户当然直接用洗手盆省心，不用管水管的事情</li><li>用户级更偏向用porcelain，协议级更偏向使用plumbing，</li></ul><h2 id="plumbing底层接口"><a href="#plumbing底层接口" class="headerlink" title="plumbing底层接口"></a>plumbing底层接口</h2><ul><li><p>说明</p><ul><li>plumbing底层接口是为实现协议以及面向网络的必须最小实现</li><li>更应用级别的调用更多将会调用到porcelain高层接口</li></ul></li><li><p>提供的具体功能接口</p><ul><li>区块状态读取</li><li>配置信息</li><li>日志</li><li>消息池操作</li><li>消息预览，Gas计算</li><li>消息查询</li><li>消息发送</li><li>消息等待</li><li>网络操作</li><li>Chain状态获取（actor信息）</li><li>钱包底层操作</li></ul></li><li><p>具体的方法如下</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    plumbing</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+API : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -chain : chain.ReadStore</span><br><span class="line">   -config : *cfg.Config</span><br><span class="line">   -logger : logging.EventLogger</span><br><span class="line">   -msgPool : *core.MessagePool</span><br><span class="line">   -msgPreviewer : *msg.Previewer</span><br><span class="line">   -msgQueryer : *msg.Queryer</span><br><span class="line">   -msgSender : *msg.Sender</span><br><span class="line">   -msgWaiter : *msg.Waiter</span><br><span class="line">   -network : *ntwk.Network</span><br><span class="line">   -sigGetter : *mthdsig.Getter</span><br><span class="line">   -wallet : *wallet.Wallet</span><br><span class="line">    [methods]</span><br><span class="line">   +ActorGet(ctx context.Context, addr address.Address) : *actor.Actor, error</span><br><span class="line">   +ActorGetSignature(ctx context.Context, actorAddr address.Address, method string) : *exec.FunctionSignature, error</span><br><span class="line">   +BlockGet(ctx context.Context, id cid.Cid) : *types.Block, error</span><br><span class="line">   +ChainHead(ctx context.Context) : types.TipSet</span><br><span class="line">   +ChainLs(ctx context.Context) : chan interface&#123;&#125;</span><br><span class="line">   +ConfigGet(dottedPath string) : interface&#123;&#125;, error</span><br><span class="line">   +ConfigSet(dottedPath string, paramJSON string) : error</span><br><span class="line">   +MessagePoolGet(cid cid.Cid) : *types.SignedMessage, bool</span><br><span class="line">   +MessagePoolPending() : []*types.SignedMessage</span><br><span class="line">   +MessagePoolRemove(cid cid.Cid)</span><br><span class="line">   +MessagePreview(ctx context.Context, from, to address.Address, method string, params ...interface&#123;&#125;) : types.GasUnits, error</span><br><span class="line">   +MessageQuery(ctx context.Context, optFrom, to address.Address, method string, params ...interface&#123;&#125;) : [][]byte, *exec.FunctionSignature, error</span><br><span class="line">   +MessageSend(ctx context.Context, from, to address.Address, value *types.AttoFIL, gasPrice types.AttoFIL, gasLimit types.GasUnits, method string, params ...interface&#123;&#125;) : cid.Cid, error</span><br><span class="line">   +MessageWait(ctx context.Context, msgCid cid.Cid, cb func(*types.Block, *types.SignedMessage, *types.MessageReceipt) error) : error</span><br><span class="line">   +NetworkFindProvidersAsync(ctx context.Context, key cid.Cid, count int) : chan pstore.PeerInfo</span><br><span class="line">   +NetworkGetPeerID() : peer.ID</span><br><span class="line">   +PubSubPublish(topic string, data []byte) : error</span><br><span class="line">   +PubSubSubscribe(topic string) : pubsub.Subscription, error</span><br><span class="line">   +SignBytes(data []byte, addr address.Address) : types.Signature, error</span><br><span class="line">   +WalletAddresses() : []address.Address</span><br><span class="line">   +WalletFind(address address.Address) : wallet.Backend, error</span><br><span class="line">   +WalletNewAddress() : address.Address, error</span><br><span class="line">    [functions]</span><br><span class="line">   +New(deps *APIDeps) : *API</span><br></pre></td></tr></table></figure><h2 id="porcelain高层接口"><a href="#porcelain高层接口" class="headerlink" title="porcelain高层接口"></a>porcelain高层接口</h2><ul><li><p>说明</p><ul><li>porcelain主要依赖plumbing实现。</li><li>主要是面向用户级操作</li></ul></li><li><p>提供功能</p><ul><li>获取区块高度</li><li>建立支付通道/多支付通道</li><li>获取默认地址</li><li>消息池等待未被打包进区块的消息</li><li>采用默认地址发送消息</li><li>获取指定矿工报价单</li><li>获取矿工Owner地址</li><li>获取矿工节点ID</li><li>创建矿工，预览Gas消耗</li><li>矿工报价，预览Gas消耗</li><li>矿工报价</li><li>获取签名支付凭证</li><li>钱包余额查询</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    porcelain</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+API : struct</span><br><span class="line">    [embedded]</span><br><span class="line">   +*plumbing.API : *plumbing.API</span><br><span class="line">    [methods]</span><br><span class="line">   +ChainBlockHeight(ctx context.Context) : *types.BlockHeight, error</span><br><span class="line">   +CreatePayments(ctx context.Context, config CreatePaymentsParams) : *CreatePaymentsReturn, error</span><br><span class="line">   +GetAndMaybeSetDefaultSenderAddress() : address.Address, error</span><br><span class="line">   +MessagePoolWait(ctx context.Context, messageCount uint) : []*types.SignedMessage, error</span><br><span class="line">   +MessageSendWithDefaultAddress(ctx context.Context, from, to address.Address, value *types.AttoFIL, gasPrice types.AttoFIL, gasLimit types.GasUnits, method string, params ...interface&#123;&#125;) : cid.Cid, error</span><br><span class="line">   +MinerGetAsk(ctx context.Context, minerAddr address.Address, askID uint64) : minerActor.Ask, error</span><br><span class="line">   +MinerGetOwnerAddress(ctx context.Context, minerAddr address.Address) : address.Address, error</span><br><span class="line">   +MinerGetPeerID(ctx context.Context, minerAddr address.Address) : peer.ID, error</span><br><span class="line">   +MinerPreviewCreate(ctx context.Context, fromAddr address.Address, pledge uint64, pid peer.ID, collateral *types.AttoFIL) : types.GasUnits, error</span><br><span class="line">   +MinerPreviewSetPrice(ctx context.Context, from address.Address, miner address.Address, price *types.AttoFIL, expiry *big.Int) : types.GasUnits, error</span><br><span class="line">   +MinerSetPrice(ctx context.Context, from address.Address, miner address.Address, gasPrice types.AttoFIL, gasLimit types.GasUnits, price *types.AttoFIL, expiry *big.Int) : MinerSetPriceResponse, error</span><br><span class="line">   +PaymentChannelLs(ctx context.Context, fromAddr address.Address, payerAddr address.Address) : map[string]*paymentbroker.PaymentChannel, error</span><br><span class="line">   +PaymentChannelVoucher(ctx context.Context, fromAddr address.Address, channel *types.ChannelID, amount *types.AttoFIL, validAt *types.BlockHeight) : *paymentbroker.PaymentVoucher, error</span><br><span class="line">   +WalletBalance(ctx context.Context, address address.Address) : *types.AttoFIL, error</span><br><span class="line">    [functions]</span><br><span class="line">   +New(plumbing *plumbing.API) : *API</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十二章源码分析之内部接口层plumbing＆porcelain接口。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析十一：filecoin源码分析之内部接口层api包分析</title>
    <link href="https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-11/"/>
    <id>https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-11/</id>
    <published>2019-03-07T09:35:33.000Z</published>
    <updated>2019-03-12T07:26:10.586Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十一章源码分析之内部接口层api包分析。</p><a id="more"></a><blockquote><p>api包提供内部接口,供协议层、command/REST使用</p><p>较大程度依赖node包</p></blockquote><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="api的接口定义"><a href="#api的接口定义" class="headerlink" title="api的接口定义"></a>api的接口定义</h3><blockquote><p>如下所示，包含了一系列子接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type API interface &#123;</span><br><span class="line">Actor() Actor</span><br><span class="line">Address() Address</span><br><span class="line">Client() Client</span><br><span class="line">Daemon() Daemon</span><br><span class="line">Dag() Dag</span><br><span class="line">ID() ID</span><br><span class="line">Log() Log</span><br><span class="line">Miner() Miner</span><br><span class="line">Mining() Mining</span><br><span class="line">Paych() Paych</span><br><span class="line">Ping() Ping</span><br><span class="line">RetrievalClient() RetrievalClient</span><br><span class="line">Swarm() Swarm</span><br><span class="line">Version() Version</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="api的接口实现"><a href="#api的接口实现" class="headerlink" title="api的接口实现"></a>api的接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    impl</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">// nodeAPI来实现其接口定义</span><br><span class="line">▼-nodeAPI : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 合约</span><br><span class="line">   -actor : *nodeActor</span><br><span class="line">    // 地址</span><br><span class="line">   -address : *nodeAddress</span><br><span class="line">    // 客户端</span><br><span class="line">   -client : *nodeClient</span><br><span class="line">    // daemon</span><br><span class="line">   -daemon : *nodeDaemon</span><br><span class="line">    // dag</span><br><span class="line">   -dag : *nodeDag</span><br><span class="line">    // 节点ID</span><br><span class="line">   -id : *nodeID</span><br><span class="line">    // 日志</span><br><span class="line">   -log : *nodeLog</span><br><span class="line">    // 日志</span><br><span class="line">   -logger : logging.EventLogger</span><br><span class="line">    // 矿工</span><br><span class="line">   -miner : *nodeMiner</span><br><span class="line">    // 挖矿</span><br><span class="line">   -mining : *nodeMining</span><br><span class="line">    // 节点</span><br><span class="line">   -node : *node.Node</span><br><span class="line">    // 支付通道</span><br><span class="line">   -paych : *nodePaych</span><br><span class="line">    // ping</span><br><span class="line">   -ping : *nodePing</span><br><span class="line">    // 检索客户端</span><br><span class="line">   -retrievalClient : *nodeRetrievalClient</span><br><span class="line">    // swarm</span><br><span class="line">   -swarm : *nodeSwarm</span><br><span class="line">    // 版本</span><br><span class="line">   -version : *nodeVersion</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 如下为实现API接口</span><br><span class="line">   +Actor() : api.Actor</span><br><span class="line">   +Address() : api.Address</span><br><span class="line">   +Client() : api.Client</span><br><span class="line">   +Daemon() : api.Daemon</span><br><span class="line">   +Dag() : api.Dag</span><br><span class="line">   +ID() : api.ID</span><br><span class="line">   +Log() : api.Log</span><br><span class="line">   +Miner() : api.Miner</span><br><span class="line">   +Mining() : api.Mining</span><br><span class="line">   +Paych() : api.Paych</span><br><span class="line">   +Ping() : api.Ping</span><br><span class="line">   +RetrievalClient() : api.RetrievalClient</span><br><span class="line">   +Swarm() : api.Swarm</span><br><span class="line">   +Version() : api.Version</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 实例化API</span><br><span class="line">    // 1 获取高层API porcelainAPI 指针,miner与paych有用到</span><br><span class="line">    // 2 调用各子系统的实例化函数逐一实例化</span><br><span class="line">   +New(node *node.Node) : api.API</span><br></pre></td></tr></table></figure><h2 id="actor"><a href="#actor" class="headerlink" title="actor"></a>actor</h2><h3 id="actor的接口定义"><a href="#actor的接口定义" class="headerlink" title="actor的接口定义"></a>actor的接口定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    api</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+ActorView : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // actor类型</span><br><span class="line">   +ActorType : string</span><br><span class="line">    // actor地址</span><br><span class="line">   +Address : string</span><br><span class="line">    // actor余额</span><br><span class="line">   +Balance : *types.AttoFIL</span><br><span class="line">    // actor代码-CID</span><br><span class="line">   +Code : cid.Cid</span><br><span class="line">    // 导出符号集合</span><br><span class="line">   +Exports : ReadableExports</span><br><span class="line">    // 表征actor实例的状态</span><br><span class="line">   +Head : cid.Cid</span><br><span class="line">    // 消息计数器，仅为account actors与外部发生交互的时候计算</span><br><span class="line">   +Nonce : uint64</span><br><span class="line"></span><br><span class="line">    // 导出符号集合</span><br><span class="line"> +ReadableExports : map[string]*ReadableFunctionSignature</span><br><span class="line"></span><br><span class="line">▼+ReadableFunctionSignature : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 参数</span><br><span class="line">   +Params : []string</span><br><span class="line">    // 返回</span><br><span class="line">   +Return : []string</span><br><span class="line"></span><br><span class="line">▼+Actor : interface</span><br><span class="line">    // 目前接口只有查看功能,返回合约的具体信息</span><br><span class="line">    [methods]</span><br><span class="line">   +Ls(ctx context.Context) : []*ActorView, error</span><br></pre></td></tr></table></figure><h3 id="actor的接口实现"><a href="#actor的接口实现" class="headerlink" title="actor的接口实现"></a>actor的接口实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    impl</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">// 使用nodeActor来实现Actor接口</span><br><span class="line">▼-nodeActor : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -api : *nodeAPI</span><br><span class="line">    [methods]</span><br><span class="line">    // 调用ls方法实现查询功能</span><br><span class="line">   +Ls(ctx context.Context) : []*api.ActorView, error</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化nodeActor，由api实现代码中调用</span><br><span class="line">   -newNodeActor(api *nodeAPI) : *nodeActor</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 获取合约类型</span><br><span class="line">    // 1 account actor</span><br><span class="line">    // 2 存储市场actor</span><br><span class="line">    // 3 支付通道actor</span><br><span class="line">    // 4 矿工actor</span><br><span class="line">    // 4 BootstrapMiner actor</span><br><span class="line">   -getActorType(actType exec.ExecutableActor) : string</span><br><span class="line">    // 查询合约状态</span><br><span class="line">   -ls(ctx context.Context, fcn *node.Node, actorGetter state.GetAllActorsFunc) : []*api.ActorView, error</span><br><span class="line">   -makeActorView(act *actor.Actor, addr string, actType exec.ExecutableActor) : *api.ActorView</span><br><span class="line">   -makeReadable(f *exec.FunctionSignature) : *api.ReadableFunctionSignature</span><br><span class="line">   -presentExports(e exec.Exports) : api.ReadableExports</span><br></pre></td></tr></table></figure><h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><ul><li>提供功能<ul><li>地址显示方法</li><li>地址查找方法</li><li>创建地址方法</li><li>导出地址方法</li><li>导入地址方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    api</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+Address : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Addrs() : Addrs</span><br><span class="line">   +Export(ctx context.Context, addrs []address.Address) : []*types.KeyInfo, error</span><br><span class="line">   +Import(ctx context.Context, f files.File) : []address.Address, error</span><br><span class="line"></span><br><span class="line">▼+Addrs : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Lookup(ctx context.Context, addr address.Address) : peer.ID, error</span><br><span class="line">   +Ls(ctx context.Context) : []address.Address, error</span><br><span class="line">   +New(ctx context.Context) : address.Address, error</span><br></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><ul><li>提供如下功能<ul><li>查询piece数据（DAG格式）</li><li>导入数据（相当于ipfs add）</li><li>列出所有订单</li><li>支付</li><li>发起存储交易</li><li>查询存储交易</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">▼+Ask : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Error : error</span><br><span class="line">   +Expiry : *types.BlockHeight</span><br><span class="line">   +ID : uint64</span><br><span class="line">   +Miner : address.Address</span><br><span class="line">   +Price : *types.AttoFIL</span><br><span class="line"></span><br><span class="line">▼+Client : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Cat(ctx context.Context, c cid.Cid) : uio.DagReader, error</span><br><span class="line">   +ImportData(ctx context.Context, data io.Reader) : ipld.Node, error</span><br><span class="line">   +ListAsks(ctx context.Context) : chan Ask, error</span><br><span class="line">   +Payments(ctx context.Context, dealCid cid.Cid) : []*paymentbroker.PaymentVoucher, error</span><br><span class="line">   +ProposeStorageDeal(ctx context.Context, data cid.Cid, miner address.Address, ask uint64, duration uint64, allowDuplicates bool) : *storage.DealResponse, error</span><br><span class="line">   +QueryStorageDeal(ctx context.Context, prop cid.Cid) : *storage.DealResponse, error</span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><ul><li>提供功能<ul><li>Get配置</li><li>Set配置</li></ul></li></ul><h2 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h2><ul><li>提供功能<ul><li>启动进程相关</li><li>具体的业务启动逻辑会调用到node包</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    api</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+DaemonInitConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 如果配置，定期检查并密封staged扇区</span><br><span class="line">   +AutoSealIntervalSeconds : uint</span><br><span class="line">   +DefaultAddress : address.Address</span><br><span class="line">    // 指定网络</span><br><span class="line">   +DevnetNightly : bool</span><br><span class="line">   +DevnetTest : bool</span><br><span class="line">   +DevnetUser : bool</span><br><span class="line">    // 创世文件</span><br><span class="line">   +GenesisFile : string</span><br><span class="line">   +PeerKeyFile : string</span><br><span class="line">    // repo目录</span><br><span class="line">   +RepoDir : string</span><br><span class="line">    // 指定矿工</span><br><span class="line">   +WithMiner : address.Address</span><br><span class="line"></span><br><span class="line"> +DaemonInitOpt : func(*DaemonInitConfig)</span><br><span class="line"></span><br><span class="line">▼+Daemon : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Init(ctx context.Context, opts ...DaemonInitOpt) : error</span><br><span class="line">   +Start(ctx context.Context) : error</span><br><span class="line">   +Stop(ctx context.Context) : error</span><br></pre></td></tr></table></figure><h2 id="dag"><a href="#dag" class="headerlink" title="dag"></a>dag</h2><ul><li>提供功能<ul><li>dag查询功能</li><li>类似ipfs block get</li></ul></li></ul><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><ul><li>提供功能<ul><li>ID详细信息</li><li>如多地址、协议版本、导出公钥等</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">▼+IDDetails : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Addresses : []ma.Multiaddr</span><br><span class="line">   +AgentVersion : string</span><br><span class="line">   +ID : peer.ID</span><br><span class="line">   +ProtocolVersion : string</span><br><span class="line">   +PublicKey : []byte</span><br><span class="line">    [methods]</span><br><span class="line">   +MarshalJSON() : []byte, error</span><br><span class="line">   +UnmarshalJSON(data []byte) : error</span><br><span class="line"></span><br><span class="line">▼+ID : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Details() : *IDDetails, error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -decode(idd map[string]*json.RawMessage, key string, dest interface&#123;&#125;) : error</span><br></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ul><li>提供日志功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼+Log : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Tail(ctx context.Context) : io.Reader</span><br></pre></td></tr></table></figure><h2 id="miner"><a href="#miner" class="headerlink" title="miner"></a>miner</h2><ul><li>创建矿工</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼+Miner : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Create(ctx context.Context, fromAddr address.Address, gasPrice types.AttoFIL, gasLimit types.GasUnits, pledge uint64, pid peer.ID, collateral *types.AttoFIL) : address.Address, error</span><br></pre></td></tr></table></figure><h2 id="mining"><a href="#mining" class="headerlink" title="mining"></a>mining</h2><ul><li>挖矿控制<ul><li>启动</li><li>停止</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▼+Mining : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Once(ctx context.Context) : *types.Block, error</span><br><span class="line">   +Start(ctx context.Context) : error</span><br><span class="line">   +Stop(ctx context.Context) : error</span><br></pre></td></tr></table></figure><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><ul><li>提供ping接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">▼+PingResult : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Success : bool</span><br><span class="line">   +Text : string</span><br><span class="line">   +Time : time.Duration</span><br><span class="line"></span><br><span class="line">▼+Ping : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Ping(ctx context.Context, pid peer.ID, count uint, delay time.Duration) : chan *PingResult, error</span><br></pre></td></tr></table></figure><h2 id="retrieval-client"><a href="#retrieval-client" class="headerlink" title="retrieval_client"></a>retrieval_client</h2><ul><li>提供检索接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼+RetrievalClient : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +RetrievePiece(ctx context.Context, pieceCID cid.Cid, minerAddr address.Address) : io.ReadCloser, error</span><br></pre></td></tr></table></figure><h2 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h2><ul><li>提供节点连接功能<ul><li>显示连接节点</li><li>连接节点</li><li>查找节点</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">▼+SwarmConnInfo : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Addr : string</span><br><span class="line">   +Latency : string</span><br><span class="line">   +Muxer : string</span><br><span class="line">   +Peer : string</span><br><span class="line">   +Streams : []SwarmStreamInfo</span><br><span class="line">    [methods]</span><br><span class="line">   +Len() : int</span><br><span class="line">   +Less(i, j int) : bool</span><br><span class="line">   +Swap(i, j int)</span><br><span class="line"></span><br><span class="line">▼+SwarmConnInfos : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Peers : []SwarmConnInfo</span><br><span class="line">    [methods]</span><br><span class="line">   +Len() : int</span><br><span class="line">   +Less(i, j int) : bool</span><br><span class="line">   +Swap(i, j int)</span><br><span class="line"></span><br><span class="line">▼+SwarmConnectResult : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Peer : string</span><br><span class="line">   +Success : bool</span><br><span class="line"></span><br><span class="line">▼+SwarmStreamInfo : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Protocol : string</span><br><span class="line"></span><br><span class="line">▼+Swarm : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Connect(ctx context.Context, addrs []string) : []SwarmConnectResult, error</span><br><span class="line">   +FindPeer(ctx context.Context, peerID peer.ID) : peerstore.PeerInfo, error</span><br><span class="line">   +Peers(ctx context.Context, verbose, latency, streams bool) : *SwarmConnInfos, error</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十一章源码分析之内部接口层api包分析。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析十：filecoin源码分析之支撑包分析(2)</title>
    <link href="https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-10/"/>
    <id>https://learnblockchain.cn/2019/03/07/filecoin-code-analysis-10/</id>
    <published>2019-03-07T08:35:33.000Z</published>
    <updated>2019-03-12T07:26:05.573Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第十章源码分析之支撑包分析(2)。</p><a id="more"></a><blockquote><p>本章续上一章的支撑包介绍，主要为便于后面章节的源码理解</p></blockquote><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h2><ul><li>提供功能<ul><li>实例化fs资源或者mem资源</li><li>提供读取、设置API地址方法</li><li>提供存储已被校验区块的方法</li><li>提供阶段密封数据存储方法 </li><li>提供密封完成数据存储方法 </li><li>提供读取配置方法</li><li>提供通用数据存储方法 </li><li>提供交易数据存储方法</li><li>提供钱包信息存储方法</li><li>提供存储密钥方法</li><li>提供快照配置存储方法</li><li>提供版本号读取方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    repo</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 当前为１，可以cat ~/.filecoin/version确认</span><br><span class="line">   +Version : uint</span><br><span class="line"></span><br><span class="line">▼+Datastore : interface</span><br><span class="line">    [embedded]</span><br><span class="line">    // 包含datastore的read、write、batch</span><br><span class="line">   +datastore.Batching</span><br><span class="line"></span><br><span class="line">    // Repo接口分别由fsrepo及memrepo实现</span><br><span class="line">▼+Repo : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 读取API地址</span><br><span class="line">   +APIAddr() : string, error</span><br><span class="line">    // 存储已被校验过的区块数据</span><br><span class="line">   +ChainDatastore() : Datastore</span><br><span class="line">    // 关闭</span><br><span class="line">   +Close() : error</span><br><span class="line">    // 读取配置，对应上一章中的config</span><br><span class="line">   +Config() : *config.Config</span><br><span class="line">    // 存储通用数据</span><br><span class="line">   +Datastore() : Datastore</span><br><span class="line">    // 交易数据存储</span><br><span class="line">   +DealsDatastore() : Datastore</span><br><span class="line">    // 存储密钥相关</span><br><span class="line">   +Keystore() : keystore.Keystore</span><br><span class="line">    // 存储倒数第二个配置</span><br><span class="line">   +ReplaceConfig(cfg *config.Config) : error</span><br><span class="line">    // 存储密封扇区</span><br><span class="line">   +SealedDir() : string</span><br><span class="line">    // 设置API地址</span><br><span class="line">   +SetAPIAddr(string) : error</span><br><span class="line">    // 存储分段密封扇区</span><br><span class="line">   +StagingDir() : string</span><br><span class="line">    // 读取版本号</span><br><span class="line">   +Version() : uint</span><br><span class="line">    // 存储钱包信息</span><br><span class="line">   +WalletDatastore() : Datastore</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">location: repo/fsrepo.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    repo</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // api文件</span><br><span class="line">   +APIFile</span><br><span class="line">    // chain目录:chain</span><br><span class="line">   -chainDatastorePrefix</span><br><span class="line">    // 配置文件名称，对应上一章中的config</span><br><span class="line">   -configFilename</span><br><span class="line">    // 交易目录：deals</span><br><span class="line">   -dealsDatastorePrefix</span><br><span class="line">    // 资源目录锁文件：repo.lock</span><br><span class="line">   -lockFile</span><br><span class="line">    // 快照文件前缀名　snapshot</span><br><span class="line">   -snapshotFilenamePrefix</span><br><span class="line">    // 快照目录;配置快照</span><br><span class="line">   -snapshotStorePrefix</span><br><span class="line">    // 临时配置文件名称</span><br><span class="line">   -tempConfigFilename</span><br><span class="line">    // version文件名称</span><br><span class="line">   -versionFilename</span><br><span class="line">    // 钱包目录名称wallet</span><br><span class="line">   -walletDatastorePrefix</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">▼+FSRepo : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -cfg : *config.Config</span><br><span class="line">   -chainDs : Datastore</span><br><span class="line">   -dealsDs : Datastore</span><br><span class="line">   -ds : Datastore</span><br><span class="line">   -keystore : keystore.Keystore</span><br><span class="line">   -lk : sync.RWMutex</span><br><span class="line">   -lockfile : io.Closer</span><br><span class="line">    // 资源目录路径</span><br><span class="line">   -path : string</span><br><span class="line">    // 资源目录版本</span><br><span class="line">   -version : uint</span><br><span class="line">   -walletDs : Datastore</span><br><span class="line">    [methods]</span><br><span class="line">   +APIAddr() : string, error</span><br><span class="line">   +ChainDatastore() : Datastore</span><br><span class="line">   +Close() : error</span><br><span class="line">   +Config() : *config.Config</span><br><span class="line">   +Datastore() : Datastore</span><br><span class="line">   +DealsDatastore() : Datastore</span><br><span class="line">   +Keystore() : keystore.Keystore</span><br><span class="line">   +ReplaceConfig(cfg *config.Config) : error</span><br><span class="line">   +SealedDir() : string</span><br><span class="line">   +SetAPIAddr(maddr string) : error</span><br><span class="line">    // 快照存储</span><br><span class="line">   +SnapshotConfig(cfg *config.Config) : error</span><br><span class="line">   +StagingDir() : string</span><br><span class="line">   +Version() : uint</span><br><span class="line">   +WalletDatastore() : Datastore</span><br><span class="line">   -loadConfig() : error</span><br><span class="line">   -loadFromDisk() : error</span><br><span class="line">   -loadVersion() : uint, error</span><br><span class="line">   -openChainDatastore() : error</span><br><span class="line">   -openDatastore() : error</span><br><span class="line">   -openDealsDatastore() : error</span><br><span class="line">   -openKeystore() : error</span><br><span class="line">   -openWalletDatastore() : error</span><br><span class="line">   -removeAPIFile() : error</span><br><span class="line">   -removeFile(path string) : error</span><br><span class="line">    [functions]</span><br><span class="line">    // 打开已被初始化过的资源目录</span><br><span class="line">   +OpenFSRepo(p string) : *FSRepo, error</span><br><span class="line"></span><br><span class="line">▼+NoRepoError : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Path : string</span><br><span class="line">    [methods]</span><br><span class="line">   +Error() : string</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 从文件中读取api file</span><br><span class="line">   +APIAddrFromFile(apiFilePath string) : string, error</span><br><span class="line">    // 初始化资源目录</span><br><span class="line">   +InitFSRepo(p string, cfg *config.Config) : error</span><br><span class="line">   -checkWritable(dir string) : error</span><br><span class="line">   -fileExists(file string) : bool</span><br><span class="line">   -genSnapshotFileName() : string</span><br><span class="line">   -initConfig(p string, cfg *config.Config) : error</span><br><span class="line">   -initVersion(p string, version uint) : error</span><br><span class="line">   -isInitialized(p string) : bool, error</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    repo</span><br><span class="line"></span><br><span class="line">▼ imports</span><br><span class="line"></span><br><span class="line">▼+MemRepo : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +C : *config.Config</span><br><span class="line">   +Chain : Datastore</span><br><span class="line">   +D : Datastore</span><br><span class="line">   +DealsDs : Datastore</span><br><span class="line">   +Ks : keystore.Keystore</span><br><span class="line">   +W : Datastore</span><br><span class="line">   -apiAddress : string</span><br><span class="line">   -lk : sync.RWMutex</span><br><span class="line">   -sealedDir : string</span><br><span class="line">   -stagingDir : string</span><br><span class="line">   -version : uint</span><br><span class="line">    [methods]</span><br><span class="line">   +APIAddr() : string, error</span><br><span class="line">   +ChainDatastore() : Datastore</span><br><span class="line">   +CleanupSectorDirs()</span><br><span class="line">   +Close() : error</span><br><span class="line">   +Config() : *config.Config</span><br><span class="line">   +Datastore() : Datastore</span><br><span class="line">   +DealsDatastore() : Datastore</span><br><span class="line">   +Keystore() : keystore.Keystore</span><br><span class="line">   +ReplaceConfig(cfg *config.Config) : error</span><br><span class="line">   +SealedDir() : string</span><br><span class="line">   +SetAPIAddr(addr string) : error</span><br><span class="line">   +StagingDir() : string</span><br><span class="line">   +Version() : uint</span><br><span class="line">   +WalletDatastore() : Datastore</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化内存资源接口,会调用NewInMemoryRepoWithSectorDirectories</span><br><span class="line">   +NewInMemoryRepo() : *MemRepo</span><br><span class="line">    // 实例化内存资源接口，指定阶段密封和最终密封目录</span><br><span class="line">   +NewInMemoryRepoWithSectorDirectories(staging, sealedDir string) : *MemRepo</span><br></pre></td></tr></table></figure><h2 id="proofs和sectorbuilder"><a href="#proofs和sectorbuilder" class="headerlink" title="proofs和sectorbuilder"></a>proofs和sectorbuilder</h2><ul><li>proofs提供功能<ul><li>校验时空证明的方法</li><li>校验密封证明的方法</li><li>更细节的注释见如下代码笔者增加的注释</li><li>rustverifier实现具体的方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">location: proofs/types.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    proofs</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // merkle根长度</span><br><span class="line">   +CommitmentBytesLen : uint</span><br><span class="line">    // 时空证明挑战参数长度:32bytes</span><br><span class="line">   +PoStChallengeSeedBytesLen : uint</span><br><span class="line">    // 密封复制证明长度：384bytes</span><br><span class="line">   +SealBytesLen : uint</span><br><span class="line">    // 时空证明长度：192bytes</span><br><span class="line">   +SnarkBytesLen : uint</span><br><span class="line"></span><br><span class="line">    // 原始数据的merkle根，由PoRep输出</span><br><span class="line"> +CommD : []byte</span><br><span class="line"></span><br><span class="line">    // 副本数据的merkle根，由PoRep输出</span><br><span class="line"> +CommR : []byte</span><br><span class="line"></span><br><span class="line">    // 中间层的merkle根，由PoRep输出</span><br><span class="line"> +CommRStar : []byte</span><br><span class="line"></span><br><span class="line">    // 挑战随机参数,32bytes,256bits,PoSt的输入</span><br><span class="line"> +PoStChallengeSeed : []byte</span><br><span class="line"></span><br><span class="line">    // 时空证明输出，192bytes</span><br><span class="line"> +PoStProof : []byte</span><br><span class="line"></span><br><span class="line">    // 密封复制证明,384bytes</span><br><span class="line"> +SealProof : []byte</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">location: proofs/interface.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    proofs</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +Live</span><br><span class="line">   +Test</span><br><span class="line"></span><br><span class="line"> +SectorStoreType : int</span><br><span class="line"></span><br><span class="line">    // 校验时空证明校验请求</span><br><span class="line">▼+VerifyPoSTRequest : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 挑战参数</span><br><span class="line">   +ChallengeSeed : PoStChallengeSeed</span><br><span class="line">   +CommRs : []CommR</span><br><span class="line">   +Faults : []uint64</span><br><span class="line">   +Proof : PoStProof</span><br><span class="line">   +StoreType : SectorStoreType</span><br><span class="line"></span><br><span class="line">▼+VerifyPoSTResponse : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +IsValid : bool</span><br><span class="line"></span><br><span class="line">    // 向特定矿工&amp;特定扇区发起密封校验请求</span><br><span class="line">▼+VerifySealRequest : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 来自于密封的返回参数</span><br><span class="line">   +CommD : CommD</span><br><span class="line">   +CommR : CommR</span><br><span class="line">   +CommRStar : CommRStar</span><br><span class="line">   +Proof : SealProof</span><br><span class="line">    // 矿工标识</span><br><span class="line">   +ProverID : [31]byte</span><br><span class="line">    // 扇区ID</span><br><span class="line">   +SectorID : [31]byte</span><br><span class="line">    // 用于控制密封校验效率</span><br><span class="line">   +StoreType : SectorStoreType</span><br><span class="line"></span><br><span class="line">▼+VerifySealResponse : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +IsValid : bool</span><br><span class="line"></span><br><span class="line">▼+Verifier : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 校验时空证明</span><br><span class="line">   +VerifyPoST(VerifyPoSTRequest) : VerifyPoSTResponse, error</span><br><span class="line">    // 校验密封证明</span><br><span class="line">   +VerifySeal(VerifySealRequest) : VerifySealResponse, error</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">location: proofs/rustverifier.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    proofs</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">    // RustVerifier 实现VerifyPoST与VerifySeal接口</span><br><span class="line">▼+RustVerifier : struct</span><br><span class="line">    [methods]</span><br><span class="line">   +VerifyPoST(req VerifyPoSTRequest) : VerifyPoSTResponse, error</span><br><span class="line">   +VerifySeal(req VerifySealRequest) : VerifySealResponse, error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   +CSectorStoreType(cfg SectorStoreType) : *C.ConfiguredStore, error</span><br><span class="line">   -cUint64s(src []uint64) : *C.uint64_t, C.size_t</span><br><span class="line">   -elapsed(what string) : func()</span><br></pre></td></tr></table></figure><ul><li>sectorbuilder <ul><li>提供向unsealed扇区写入pieces的方法</li><li>提供生成时空证明的方法</li><li>提供从特定扇区读取特定pieces的方法</li><li>提供密封完成通知的方法</li><li>提供批量密封所有未完成的分段扇区</li><li>与rust-fil-proof交互，更深入的逻辑需要参见rust</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">location: proofs/sectorbuilder/interface.go</span><br><span class="line"></span><br><span class="line">package sectorbuilder</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">    // 生成生成时空证明请求</span><br><span class="line">▼+GeneratePoSTRequest : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +ChallengeSeed : proofs.PoStChallengeSeed</span><br><span class="line">   +CommRs : []proofs.CommR</span><br><span class="line"></span><br><span class="line">    // 生成生成时空证明响应</span><br><span class="line">▼+GeneratePoSTResponse : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Faults : []uint64</span><br><span class="line">   +Proof : proofs.PoStProof</span><br><span class="line"></span><br><span class="line">▼+PieceInfo : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Ref : cid.Cid</span><br><span class="line">   +Size : uint64</span><br><span class="line"></span><br><span class="line">    // 密封元数据</span><br><span class="line">▼+SealedSectorMetadata : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +CommD : proofs.CommD</span><br><span class="line">    // 副本哈希后续将被删除</span><br><span class="line">   +CommR : proofs.CommR</span><br><span class="line">   +CommRStar : proofs.CommRStar</span><br><span class="line">    // Pieces后续将被删除</span><br><span class="line">   +Pieces : []*PieceInfo</span><br><span class="line">   +Proof : proofs.SealProof</span><br><span class="line">   +SectorID : uint64</span><br><span class="line"></span><br><span class="line">    // 密封结果</span><br><span class="line">▼+SectorSealResult : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +SealingErr : error</span><br><span class="line">   +SealingResult : *SealedSectorMetadata</span><br><span class="line">   +SectorID : uint64</span><br><span class="line"></span><br><span class="line">    // SectorBuilder提供相关功能</span><br><span class="line">    // 1 写入、密封pieces至扇区</span><br><span class="line">    // 2 unseal、读取pieces</span><br><span class="line">▼+SectorBuilder : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 向unsealed扇区写入pieces</span><br><span class="line">   +AddPiece(ctx context.Context, pi *PieceInfo) : uint64, error</span><br><span class="line">   +Close() : error</span><br><span class="line">    // 生成时空证明</span><br><span class="line">   +GeneratePoST(GeneratePoSTRequest) : GeneratePoSTResponse, error</span><br><span class="line">   +GetMaxUserBytesPerStagedSector() : uint64, error</span><br><span class="line">    // 从扇区中读取特定pieces</span><br><span class="line">   +ReadPieceFromSealedSector(pieceCid cid.Cid) : io.Reader, error</span><br><span class="line">    // 密封所有未完成的分段扇区</span><br><span class="line">   +SealAllStagedSectors(ctx context.Context) : error</span><br><span class="line">    // 密封完成的通知</span><br><span class="line">   +SectorSealResults() : chan SectorSealResult</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location: proofs/sectorbuilder/poller.go</span><br><span class="line"></span><br><span class="line">// 当pieces加入后，会进行FFI调用，定时执行密封</span><br><span class="line">const SealedSectorPollingInterval = 1 * time.Second</span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>如下对一些主要结构进行简析</p><ul><li><p>AttoFIL(10*-18 FIL)</p><ul><li>提供AttoFIL的算数运算方法</li><li>提供AttoFIL的逻辑运算方法</li></ul></li><li><p>Block </p><ul><li>区块结构</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">▼+Block : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Height : Uint64</span><br><span class="line">   +MessageReceipts : []*MessageReceipt</span><br><span class="line">   +Messages : []*SignedMessage</span><br><span class="line">   +Miner : address.Address</span><br><span class="line">   +Nonce : Uint64</span><br><span class="line">   +ParentWeight : Uint64</span><br><span class="line">   +Parents : SortedCidSet</span><br><span class="line">   +Proof : proofs.PoStProof</span><br><span class="line">   +StateRoot : cid.Cid</span><br><span class="line">   +Ticket : Signature</span><br><span class="line">   -cachedBytes : []byte</span><br><span class="line">   -cachedCid : cid.Cid</span><br><span class="line">    [methods]</span><br><span class="line">   +Cid() : cid.Cid</span><br><span class="line">   +Equals(other *Block) : bool</span><br><span class="line">   +IsParentOf(c Block) : bool</span><br><span class="line">   +Score() : uint64</span><br><span class="line">   +String() : string</span><br><span class="line">   +ToNode() : node.Node</span><br><span class="line">    [functions]</span><br><span class="line">   +DecodeBlock(b []byte) : *Block, error</span><br></pre></td></tr></table></figure><ul><li>BlockHeight <ul><li>区块高度相关操作方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">▼+BlockHeight : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -val : *big.Int</span><br><span class="line">    [methods]</span><br><span class="line">   +Add(y *BlockHeight) : *BlockHeight</span><br><span class="line">   +AsBigInt() : *big.Int</span><br><span class="line">   +Bytes() : []byte</span><br><span class="line">   +Equal(y *BlockHeight) : bool</span><br><span class="line">   +GreaterEqual(y *BlockHeight) : bool</span><br><span class="line">   +GreaterThan(y *BlockHeight) : bool</span><br><span class="line">   +LessEqual(y *BlockHeight) : bool</span><br><span class="line">   +LessThan(y *BlockHeight) : bool</span><br><span class="line">   +String() : string</span><br><span class="line">   +Sub(y *BlockHeight) : *BlockHeight</span><br><span class="line">    [functions]</span><br><span class="line">   +NewBlockHeight(x uint64) : *BlockHeight</span><br><span class="line">   +NewBlockHeightFromBytes(buf []byte) : *BlockHeight</span><br><span class="line">   +NewBlockHeightFromString(s string, base int) : *BlockHeight, bool</span><br></pre></td></tr></table></figure><ul><li><p>BytesAmount (*big.Int)</p><ul><li>提供相关的算数逻辑运算</li></ul></li><li><p>ChannelID(支付通道结构体)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">▼+ChannelID : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -val : *big.Int</span><br><span class="line">    [methods]</span><br><span class="line">   +Bytes() : []byte</span><br><span class="line">   +Equal(y *ChannelID) : bool</span><br><span class="line">   +Inc() : *ChannelID</span><br><span class="line">   +KeyString() : string</span><br><span class="line">   +String() : string</span><br><span class="line">    [functions]</span><br><span class="line">   +NewChannelID(x uint64) : *ChannelID</span><br><span class="line">   +NewChannelIDFromBytes(buf []byte) : *ChannelID</span><br><span class="line">   +NewChannelIDFromString(s string, base int) : *ChannelID, bool</span><br></pre></td></tr></table></figure><ul><li>一些变量定义<ul><li>创建各类actor对象</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func init() &#123;</span><br><span class="line">AccountActorCodeObj = dag.NewRawNode([]byte(&quot;accountactor&quot;))</span><br><span class="line">AccountActorCodeCid = AccountActorCodeObj.Cid()</span><br><span class="line">StorageMarketActorCodeObj = dag.NewRawNode([]byte(&quot;storagemarket&quot;))</span><br><span class="line">StorageMarketActorCodeCid = StorageMarketActorCodeObj.Cid()</span><br><span class="line">PaymentBrokerActorCodeObj = dag.NewRawNode([]byte(&quot;paymentbroker&quot;))</span><br><span class="line">PaymentBrokerActorCodeCid = PaymentBrokerActorCodeObj.Cid()</span><br><span class="line">MinerActorCodeObj = dag.NewRawNode([]byte(&quot;mineractor&quot;))</span><br><span class="line">MinerActorCodeCid = MinerActorCodeObj.Cid()</span><br><span class="line">BootstrapMinerActorCodeObj = dag.NewRawNode([]byte(&quot;bootstrapmineractor&quot;))</span><br><span class="line">BootstrapMinerActorCodeCid = BootstrapMinerActorCodeObj.Cid()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Message相关<ul><li>消息结构及方法</li><li>filecoin网络的交易由一些列的Message组成</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">▼+Message : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +From : address.Address</span><br><span class="line">   +Method : string</span><br><span class="line">   +Nonce : Uint64</span><br><span class="line">   +Params : []byte</span><br><span class="line">   +To : address.Address</span><br><span class="line">   +Value : *AttoFIL</span><br><span class="line">    [methods]</span><br><span class="line">   +Cid() : cid.Cid, error</span><br><span class="line">   +Marshal() : []byte, error</span><br><span class="line">   +String() : string</span><br><span class="line">   +Unmarshal(b []byte) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewMessage(from, to address.Address, nonce uint64, value *AttoFIL, method string, params []byte) : *Message</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▼+MessageReceipt : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +ExitCode : uint8</span><br><span class="line">   +GasAttoFIL : *AttoFIL</span><br><span class="line">   +Return : [][]byte</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">▼+MeteredMessage : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +GasLimit : GasUnits</span><br><span class="line">   +GasPrice : AttoFIL</span><br><span class="line">    [embedded]</span><br><span class="line">   +Message : Message</span><br><span class="line">    [methods]</span><br><span class="line">   +Marshal() : []byte, error</span><br><span class="line">   +Unmarshal(b []byte) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewMeteredMessage(msg Message, gasPrice AttoFIL, gasLimit GasUnits) : *MeteredMessage</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼+SignedMessage : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +Signature : Signature</span><br><span class="line">    [embedded]</span><br><span class="line">   +MeteredMessage : MeteredMessage</span><br><span class="line">    [methods]</span><br><span class="line">   +Cid() : cid.Cid, error</span><br><span class="line">   +Marshal() : []byte, error</span><br><span class="line">   +RecoverAddress(r Recoverer) : address.Address, error</span><br><span class="line">   +String() : string</span><br><span class="line">   +Unmarshal(b []byte) : error</span><br><span class="line">   +VerifySignature() : bool</span><br><span class="line">    [functions]</span><br><span class="line">   +NewSignedMessage(msg Message, s Signer, gasPrice AttoFIL, gasLimit GasUnits) : *SignedMessage, error</span><br></pre></td></tr></table></figure><ul><li>TipSet <ul><li>区块集合</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> +Tip : Block</span><br><span class="line"></span><br><span class="line">▼+TipSet : map[cid.Cid]*Tip</span><br><span class="line">    [methods]</span><br><span class="line">   +AddBlock(b *Block) : error</span><br><span class="line">   +Clone() : TipSet</span><br><span class="line">   +Equals(ts2 TipSet) : bool</span><br><span class="line">   +Height() : uint64, error</span><br><span class="line">   +MinTicket() : Signature, error</span><br><span class="line">   +ParentWeight() : uint64, error</span><br><span class="line">   +Parents() : SortedCidSet, error</span><br><span class="line">   +String() : string</span><br><span class="line">   +ToSlice() : []*Block</span><br><span class="line">   +ToSortedCidSet() : SortedCidSet</span><br></pre></td></tr></table></figure><h2 id="abi"><a href="#abi" class="headerlink" title="abi"></a>abi</h2><ul><li>abi<ul><li>对filecoin中的各类数据定义数据类型</li><li>提供abi编解码操作方法</li></ul></li></ul><h2 id="pubsub"><a href="#pubsub" class="headerlink" title="pubsub"></a>pubsub</h2><ul><li>提供功能<ul><li>提供订阅实例化以及订阅方法</li><li>提供发布实例化以及发布方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    pubsub</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+Subscriber : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -pubsub : *libp2p.PubSub</span><br><span class="line">    [methods]</span><br><span class="line">   +Subscribe(topic string) : Subscription, error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewSubscriber(sub *libp2p.PubSub) : *Subscriber</span><br><span class="line"></span><br><span class="line">▼-subscriptionWrapper : struct</span><br><span class="line">    [embedded]</span><br><span class="line">   +*libp2p.Subscription : *libp2p.Subscription</span><br><span class="line">    [methods]</span><br><span class="line">   +Next(ctx context.Context) : Message, error</span><br><span class="line"></span><br><span class="line">▼+Message : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +GetData() : []byte</span><br><span class="line">   +GetFrom() : peer.ID</span><br><span class="line"></span><br><span class="line">▼+Subscription : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Cancel()</span><br><span class="line">   +Next(ctx context.Context) : Message, error</span><br><span class="line">   +Topic() : string</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    pubsub</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+Publisher : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -pubsub : *pubsub.PubSub</span><br><span class="line">    [methods]</span><br><span class="line">   +Publish(topic string, data []byte) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewPublisher(sub *pubsub.PubSub) : *Publisher</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第十章源码分析之支撑包分析(2)。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>登链钱包（一款功能强大的以太坊钱包）完全开源</title>
    <link href="https://learnblockchain.cn/2019/03/07/wallet-annouce/"/>
    <id>https://learnblockchain.cn/2019/03/07/wallet-annouce/</id>
    <published>2019-03-07T02:34:57.000Z</published>
    <updated>2019-03-12T01:49:17.732Z</updated>
    
    <content type="html"><![CDATA[<p>你是否和我前段时间一样，苦苦的寻找一款好用的开源以太坊钱包，你会发现可用都很少，因为很多钱包说开源，仅仅是开源部分代码，现在不需要再找了，</p><p>登链钱包完全开源，登链钱包完全开源，登链钱包完全开源，重要的事情说三遍。</p><p>再也不用傻乎乎找人开发以太坊钱包了， 直接拿去用吧；再也不用担心私钥会被上传到别人的服务器上。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>区块链是开放的，很难想象一个封闭的项目如何产生信任，开源一直是区块链社区所倡导的行为准则。<br>我们也希望开源能够降低行业的开发门槛，吸引更多的开发者和公司能够利用我们的代码，找到更多落地的应用场景，一起来推动行业的发展。<br>同时我们也相信开源可以是产品更加的安全，我们也邀请专业的区块链安全团队<a href="https://www.noneage.com/" target="_blank" rel="noopener">零时科技</a>来为钱包做安全审计。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>先来看看钱包长什么样吧，我制作了一个gif图片：</p><p align="center"><br>  <img src="https://wiki.learnblockchain.cn/images/upchainwallet.gif" width="450"><br></p><p>Gif 图片比较简陋，见谅见谅，可以看的出来界面参考了现在的主流钱包，感谢imToken及<a href="https://github.com/DwyaneQ/ETHWallet" target="_blank" rel="noopener">ETHWallet</a>，</p><p>大家可以戳<a href="https://wiki.learnblockchain.cn/images/upchain_wallet.apk" target="_blank" rel="noopener">链接</a>下载APK体验，<br>Google play 也已经上架，正在审核中。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>目前版本支持一下功能：</p><ul><li style="list-style: none"><input type="checkbox" checked> 支持通过生成助记词、Keystore文件、私钥 创建钱包账号；</li><li style="list-style: none"><input type="checkbox" checked> 支持导出钱包账号助记词、私钥、Keystore文件；</li><li style="list-style: none"><input type="checkbox" checked> 账户余额查询及转账功能；</li><li style="list-style: none"><input type="checkbox" checked> 支持多个钱包账号管理；</li><li style="list-style: none"><input type="checkbox" checked> 支持ERC20 代币（余额显示、转账、代币币价显示）；</li><li style="list-style: none"><input type="checkbox" checked> 历史交易列表显示；</li><li style="list-style: none"><input type="checkbox" checked> 二维码扫描，兼容imToken格式；</li><li style="list-style: none"><input type="checkbox" checked> 支持用法币（美元和人民币）实时显示币价；</li><li style="list-style: none"><input type="checkbox" checked> 支持以太坊官方测试网络（Infura Koven及Ropsten）及本地测试网络。</li></ul><p>功能够全面吧，尤其是最后一个功能支持以太坊官方测试网络（Infura Koven及Ropsten）及本地测试网络，估计是开发者的最爱，做为开发者的我，懂你们的痛（可以获取到免费的以太币用于测试）。</p><p>代码的讲解和相应的课程，我们后面会陆续放出，在还没有放出之前，先提醒大家几个注意的点：</p><ol><li>使用本地网络测试的时候注意Geth 或 Ganache 设置下可接收RPC连接的地址，因为默认情况下只支持本地连接，这样手机上就无法连接。</li><li>显示交易记录功能需要自己搭建一个服务器提供API接口，这个接口来自TrustWallet，为了和本应用保持版本一致，我Fork了一份，地址为<a href="https://github.com/xilibi2003/trust-ray" target="_blank" rel="noopener">trust-ray</a>，这个库会解析区块，并把交易信息存到MongoDb数据库里，然后用API提供给客户端使用。</li><li>实时币价的显示其实也是使用trust-ray提供的接口，trust-ray 使用的是<a href="https://coinmarketcap.com/" target="_blank" rel="noopener">CoinMarketCap</a>的数据，目前使用的是CoinMarketCap免费提供的数据，CoinMarketCap现在有一套新的付费接口，免费的数据可能在将来会停用，到时需要使用CoinMarketCap 的apikey来访问。</li><li>代码中ERC20_Contract目录提供了一个ERC20合约给大家部署测试Token功能。</li></ol><p>其他的代码介绍及环境搭建大家就只有等我的文章了，大家也可以学习<a href="https://ke.qq.com/course/356068?tuin=bd898bbf" target="_blank" rel="noopener">网页钱包开发课程</a>，课程详细介绍了开发钱包必备的理论知识。</p><p>有什么需要的功能，可以提issue或加我微信留言。</p><p>对了本项目的GitHub地址为：<a href="https://github.com/xilibi2003/Upchain-wallet" target="_blank" rel="noopener">Upchain-wallet</a>,  点 Star 的同学都会发大财，哈哈哈~~~  </p><h2 id="参考的开源项目"><a href="#参考的开源项目" class="headerlink" title="参考的开源项目"></a>参考的开源项目</h2><p>本钱包在开发是站在巨人的肩膀上完成，特别感谢以下项目：</p><ul><li><a href="https://docs.web3j.io/index.html" target="_blank" rel="noopener">web3j</a></li><li><a href="https://bitcoinj.github.io/javadoc/0.14.7/" target="_blank" rel="noopener">bitcoinj</a></li><li><a href="https://github.com/TrustWallet/trust-wallet-android-source" target="_blank" rel="noopener">Trust-wallet</a></li><li><a href="https://github.com/DwyaneQ/ETHWallet" target="_blank" rel="noopener">ETHWallet</a></li><li><a href="https://github.com/bingoogolapple/BGAQRCode-Android" target="_blank" rel="noopener">BGAQRCode</a></li><li><a href="https://github.com/TrustWallet/trust-ray" target="_blank" rel="noopener">Trust-ray</a></li></ul><h2 id="再啰嗦几句"><a href="#再啰嗦几句" class="headerlink" title="再啰嗦几句"></a>再啰嗦几句</h2><p>本次开源也是受到区块链社区的影响，尤其是HiBlock区块链社区一些朋友坚持布道和开源的精神影响。</p><blockquote><p>HiBlock区块链社区 是国内最大的区块链开发者社区，社区已经聚集了数千名区块链开发者。</p></blockquote><p>登链钱包是由登链学院出品，希望大家知道<a href="https://upchain.ke.qq.com" target="_blank" rel="noopener">登链学院</a>不单出品优质课程，我们也为行业发展贡献一份力量，感谢大家转发。</p><p>PS: 我们提供专业的钱包定制开发，欢迎咨询微信：xlbxiong</p><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是否和我前段时间一样，苦苦的寻找一款好用的开源以太坊钱包，你会发现可用都很少，因为很多钱包说开源，仅仅是开源部分代码，现在不需要再找了，&lt;/p&gt;
&lt;p&gt;登链钱包完全开源，登链钱包完全开源，登链钱包完全开源，重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;再也不用傻乎乎找人开发以太坊钱包了， 直接拿去用吧；再也不用担心私钥会被上传到别人的服务器上。&lt;/p&gt;
    
    </summary>
    
      <category term="以太坊" scheme="https://learnblockchain.cn/categories/ethereum/"/>
    
    
      <category term="以太坊" scheme="https://learnblockchain.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="钱包" scheme="https://learnblockchain.cn/tags/%E9%92%B1%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析九：filecoin源码分析之支撑包分析(1)</title>
    <link href="https://learnblockchain.cn/2019/03/06/filecoin-code-analysis-9/"/>
    <id>https://learnblockchain.cn/2019/03/06/filecoin-code-analysis-9/</id>
    <published>2019-03-06T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:59.069Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第九章filecoin源码分析之支撑包分析(1)。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>简析一些支撑包，便于后面分析的理解</p></blockquote><h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><ul><li>bin目录：主要为编译用shell脚本</li><li>bls-signatures:　通过cgo编译，导出库及头文件</li><li>build: 编译相关</li><li>util/version:版本检查</li><li>scripts:相关脚本</li></ul><h2 id="cborutil"><a href="#cborutil" class="headerlink" title="cborutil"></a>cborutil</h2><ul><li>对外提供功能<ul><li>读取流消息</li><li>写入流消息</li><li>主要被协议层使用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    cborutil</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +MaxMessageSize</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +ErrMessageTooLarge</span><br><span class="line"></span><br><span class="line">▼+MsgReader : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -br : *bufio.Reader</span><br><span class="line">    [methods]</span><br><span class="line">   +ReadMsg(i interface&#123;&#125;) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewMsgReader(r io.Reader) : *MsgReader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    cborutil</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼+MsgWriter : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -w : *bufio.Writer</span><br><span class="line">    [methods]</span><br><span class="line">   +WriteMsg(i interface&#123;&#125;) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +NewMsgWriter(w io.Writer) : *MsgWriter</span><br></pre></td></tr></table></figure><h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><ul><li>对外提供功能<ul><li>地址相关操作功能</li><li>实例化铸币地址、存储市场地址、支付通道地址</li><li>实例化两个测试地址</li><li>提供主网地址、测试网地址创建接口</li><li>提供地址格式转换功能，包含22bytes与41bytes、切片字符串转换、打印。</li><li>提供地址的合法性检查功能</li></ul></li><li>地址格式<ul><li>要与id区分开，id用的是ipfs中的cid,而地址则是filecoin独立定义的。</li><li>22 bytes地址：包含1byte网络类型、1byte地址版本、20bytes哈希</li><li>41 bytes地址：包含2bytes网络类型、1byte地址版本、32bytes编码值、6bytes校验和</li><li>用命令显示的是41bytes格式的地址，address包提供了22bytes与41bytes地址的转换接口</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">location: address/constants.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    address</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // Base32编码的字符集</span><br><span class="line">   +Base32Charset</span><br><span class="line">    // 地址的哈希部分，目前为20 bytes</span><br><span class="line">   +HashLength, 20bytes，160bit</span><br><span class="line">    // 地址长度,为HashLength+1+1= 22 bytes</span><br><span class="line">   +Length</span><br><span class="line">    // 地址格式的版本定义：当前为0</span><br><span class="line">   +Version : byte</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">    // 基于Base32Charset的Base32实例,用于编解码</span><br><span class="line">   +Base32</span><br><span class="line">    // Base32 Reverse集合</span><br><span class="line">   +Base32CharsetReverse</span><br><span class="line">    // 铸币地址,基于&quot;filecoin&quot;哈希生成</span><br><span class="line">   +NetworkAddress : Address</span><br><span class="line">    // 支付通道地址</span><br><span class="line">   +PaymentBrokerAddress : Address</span><br><span class="line">    // 存储市场地址</span><br><span class="line">   +StorageMarketAddress : Address</span><br><span class="line">    // 测试地址</span><br><span class="line">   +TestAddress : Address</span><br><span class="line">    // 测试地址</span><br><span class="line">   +TestAddress2 : Address</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">location: address/address.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    address</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +Mainnet : Network</span><br><span class="line">   +Testnet</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">    // 错误提示</span><br><span class="line">   +ErrInvalidBytes</span><br><span class="line">   +ErrUnknownNetwork</span><br><span class="line">   +ErrUnknownVersion</span><br><span class="line">   -generator</span><br><span class="line">    // 配置输入哈希长度20bytes</span><br><span class="line">   -hashConfig</span><br><span class="line"></span><br><span class="line">   // Address为22字节字符串</span><br><span class="line">▼+Address : []byte</span><br><span class="line">    [methods]</span><br><span class="line">    // 转换为编码前地址切片输出</span><br><span class="line">   +Bytes() : []byte</span><br><span class="line">    // 判断地址是否为空</span><br><span class="line">   +Empty() : bool</span><br><span class="line">    // 打印地址信息</span><br><span class="line">   +Format(f fmt.State, c rune)</span><br><span class="line">    // 输出地址中的20bytes哈希值</span><br><span class="line">   +Hash() : []byte</span><br><span class="line">    // 转换为编码后地址切片输出</span><br><span class="line">   +MarshalText() : []byte, error</span><br><span class="line">    // 输出地址的网络类型</span><br><span class="line">   +Network() : Network</span><br><span class="line">    // 转换为41bytes的编码输出</span><br><span class="line">    // 2(网络类型)+1(地址版本)+32(base32编码)+6(base32校验位)</span><br><span class="line">   +String() : string</span><br><span class="line">    // 编码后地址切片输出转换为字符</span><br><span class="line">   +UnmarshalText(in []byte) : error</span><br><span class="line">    // 获取地址版本号</span><br><span class="line">   +Version() : byte</span><br><span class="line"></span><br><span class="line">    // 类型定义</span><br><span class="line"> +Network : byte</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 采用blake2b-160再次哈希</span><br><span class="line">   +Hash(input []byte) : []byte</span><br><span class="line">    // 生成测试网络地址,输入为原始哈希,会执行blake2b-160再次哈希</span><br><span class="line">   +MakeTestAddress(input string) : Address</span><br><span class="line">    // 通过字符串网络类型转换为byte网络类型</span><br><span class="line">    // fc:主网转化为0</span><br><span class="line">    // tf:测试网化为1</span><br><span class="line">   +NetworkFromString(input string) : Network, error</span><br><span class="line">    // 通过byte网络类型转换为字符串网络类型</span><br><span class="line">    // 0:主网转化为fc</span><br><span class="line">    // 1:测试网化为tf</span><br><span class="line">   +NetworkToString(n Network) : string</span><br><span class="line">    // 构建新地址：输入为原始20bytes哈希+网络类型+地址版本</span><br><span class="line">   +New(network Network, hash []byte) : Address</span><br><span class="line">    // 构建新地址：输入为22bytes的原始切片</span><br><span class="line">   +NewFromBytes(raw []byte) : Address, error</span><br><span class="line">    // 通过41bytes的字串串生成22bytes的原始地址</span><br><span class="line">   +NewFromString(s string) : Address, error</span><br><span class="line">    // 构建新地址：输入为原始20bytes哈希,调用New</span><br><span class="line">   +NewMainnet(hash []byte) : Address</span><br><span class="line">    // 生成测试网络地址,输入为原始哈希再次哈希,被MakeTestAddress调用</span><br><span class="line">   +NewTestnet(hash []byte) : Address</span><br><span class="line">    // 校验41bytes地址的合法性</span><br><span class="line">   +ParseError(addr string) : error</span><br><span class="line"></span><br><span class="line">    // base32编码校验码生成，结果为6bytes</span><br><span class="line">   -createChecksum(hrp string, data []byte) : []byte</span><br><span class="line">    // 解码</span><br><span class="line">   -decode(addr string) : string, byte, []byte, error</span><br><span class="line">    // 编码</span><br><span class="line">   -encode(hrp string, version byte, data []byte) : string, error</span><br><span class="line">   -hrpExpand(hrp string) : []byte</span><br><span class="line">   -init()</span><br><span class="line">   -polymod(values []byte) : uint32</span><br><span class="line">    // 校验和验证</span><br><span class="line">   -verifyChecksum(hrp string, data []byte) : bool</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location: address/set.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    address</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -addrSetEntry</span><br><span class="line"></span><br><span class="line">   // 地址集合</span><br><span class="line"> +Set : map[Address]</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><ul><li>对外提供功能<ul><li>提供对内存中配置的实例化操作</li><li>对具体实例的设置和读取</li><li>对配置文件的读写</li><li>包含API、启动、数据存储、网络连接、挖矿、钱包、心跳相关配置</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    config</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">    // 对特定参数的合法性校验规则集合</span><br><span class="line">    // 1 目前只是限定昵称为字符</span><br><span class="line">   +Validators</span><br><span class="line"></span><br><span class="line">▼+APIConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 是否允许跨域请求</span><br><span class="line">   +AccessControlAllowCredentials : bool</span><br><span class="line">    // 允许的方法列表</span><br><span class="line">   +AccessControlAllowMethods : []string</span><br><span class="line">    // 允许的元列表</span><br><span class="line">   +AccessControlAllowOrigin : []string</span><br><span class="line">    // 地址</span><br><span class="line">   +Address : string</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化APIconfig</span><br><span class="line">   -newDefaultAPIConfig() : *APIConfig</span><br><span class="line"></span><br><span class="line">▼+BootstrapConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 启动地址集合</span><br><span class="line">   +Addresses : []string</span><br><span class="line">    // 最小节点阈值</span><br><span class="line">   +MinPeerThreshold : int</span><br><span class="line">    // 启动时间阈值，目前为10s</span><br><span class="line">   +Period : string</span><br><span class="line">    [functions]</span><br><span class="line">    //　实例化启动配置的接口</span><br><span class="line">   -newDefaultBootstrapConfig() : *BootstrapConfig</span><br><span class="line"></span><br><span class="line">    // 存储在内存之中的filecoin配置</span><br><span class="line">▼+Config : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // API相关</span><br><span class="line">   +API : *APIConfig</span><br><span class="line">    // 启动相关</span><br><span class="line">   +Bootstrap : *BootstrapConfig</span><br><span class="line">    // 数据存储相关</span><br><span class="line">   +Datastore : *DatastoreConfig</span><br><span class="line">    // 心跳相关</span><br><span class="line">   +Heartbeat : *HeartbeatConfig</span><br><span class="line">    // 挖矿相关</span><br><span class="line">   +Mining : *MiningConfig</span><br><span class="line">    // 网络连接相关</span><br><span class="line">   +Swarm : *SwarmConfig</span><br><span class="line">    // 钱包相关</span><br><span class="line">   +Wallet : *WalletConfig</span><br><span class="line">    [methods]</span><br><span class="line">    // 获取配置，参数为API的上述子结构</span><br><span class="line">   +Get(key string) : interface&#123;&#125;, error</span><br><span class="line">    // 设置配置，参数为API的上述子结构</span><br><span class="line">   +Set(dottedKey string, jsonString string) : error</span><br><span class="line">    // 写对应目录的配置文件</span><br><span class="line">   +WriteFile(file string) : error</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化配置，会调用各字节口的实例化</span><br><span class="line">   +NewDefaultConfig() : *Config</span><br><span class="line">    // 读对应目录的配置文件</span><br><span class="line">   +ReadFile(file string) : *Config, error</span><br><span class="line"></span><br><span class="line">▼+DatastoreConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 路径</span><br><span class="line">   +Path : string</span><br><span class="line">    // 类型</span><br><span class="line">   +Type : string</span><br><span class="line">    [functions]</span><br><span class="line">   -newDefaultDatastoreConfig() : *DatastoreConfig</span><br><span class="line"></span><br><span class="line">▼+HeartbeatConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 心跳周期</span><br><span class="line">   +BeatPeriod : string</span><br><span class="line">    // 心跳目标</span><br><span class="line">   +BeatTarget : string</span><br><span class="line">    // 昵称</span><br><span class="line">   +Nickname : string</span><br><span class="line">    // 重连时间</span><br><span class="line">   +ReconnectPeriod : string</span><br><span class="line">    [functions]</span><br><span class="line">   -newDefaultHeartbeatConfig() : *HeartbeatConfig</span><br><span class="line"></span><br><span class="line">▼+MiningConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 自动密封间隔周期</span><br><span class="line">   +AutoSealIntervalSeconds : uint</span><br><span class="line">    // 区块签名地址</span><br><span class="line">   +BlockSignerAddress : address.Address</span><br><span class="line">    // 矿工地址</span><br><span class="line">   +MinerAddress : address.Address</span><br><span class="line">    // 存储报价</span><br><span class="line">   +StoragePrice : *types.AttoFIL</span><br><span class="line">    [functions]</span><br><span class="line">   -newDefaultMiningConfig() : *MiningConfig</span><br><span class="line"></span><br><span class="line">▼+SwarmConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 地址</span><br><span class="line">   +Address : string</span><br><span class="line">    // 转发地址</span><br><span class="line">   +PublicRelayAddress : string</span><br><span class="line">    [functions]</span><br><span class="line">   -newDefaultSwarmConfig() : *SwarmConfig</span><br><span class="line"></span><br><span class="line">▼+WalletConfig : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 默认钱包地址</span><br><span class="line">   +DefaultAddress : address.Address</span><br><span class="line">    [functions]</span><br><span class="line">   -newDefaultWalletConfig() : *WalletConfig</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -validate(dottedKey string, jsonString string) : error</span><br><span class="line">   -validateLettersOnly(key string, value string) : error</span><br></pre></td></tr></table></figure><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><ul><li>对外提供功能<ul><li>生成私钥接口</li><li>签名接口</li><li>私钥转公钥接口</li><li>从签名消息中提取公钥接口</li><li>验证消息合法性接口</li><li>主要用于地址生成、钱包相关</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    crypto</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 定义私钥长度32位</span><br><span class="line">   +PrivateKeyBytes</span><br><span class="line">    // 定义公钥长度65位</span><br><span class="line">   +PublicKeyBytes</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 从签名消息中恢复公钥</span><br><span class="line">   +EcRecover(msg, signature []byte) : []byte, error</span><br><span class="line">    // 比较私钥是否相同</span><br><span class="line">   +Equals(sk, other []byte) : bool</span><br><span class="line">    // 生成私钥,调用GenerateKeyFromSeed</span><br><span class="line">   +GenerateKey() : []byte, error</span><br><span class="line">    // 生成私钥</span><br><span class="line">   +GenerateKeyFromSeed(seed io.Reader) : []byte, error</span><br><span class="line">    // 由私钥得到公钥</span><br><span class="line">   +PublicKey(sk []byte) : []byte</span><br><span class="line">    // 使用私钥签名</span><br><span class="line">   +Sign(sk, msg []byte) : []byte, error</span><br><span class="line">    // 验证签名合法性</span><br><span class="line">   +Verify(pk, msg, signature []byte) : bool</span><br></pre></td></tr></table></figure><h2 id="util-convert"><a href="#util-convert" class="headerlink" title="util/convert"></a>util/convert</h2><ul><li>提供功能<br>  ToCid:转cid功能</li></ul><h2 id="functional-tests"><a href="#functional-tests" class="headerlink" title="functional-tests"></a>functional-tests</h2><ul><li>测试脚本</li></ul><h2 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h2><ul><li>通过ldflags注入,表示git提交版本号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Commit string</span><br></pre></td></tr></table></figure><h2 id="fixtures"><a href="#fixtures" class="headerlink" title="fixtures"></a>fixtures</h2><ul><li>提供功能<ul><li>定义不同网络启动相关地址</li><li>预先分配初始网络状态，比如代币的预先分配</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    fixtures</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 开发人员，开发网络启动相关地址</span><br><span class="line">   -nightlyFilecoinBootstrap0 : string</span><br><span class="line">   -nightlyFilecoinBootstrap1 : string</span><br><span class="line">   -nightlyFilecoinBootstrap2 : string</span><br><span class="line">   -nightlyFilecoinBootstrap3 : string</span><br><span class="line">   -nightlyFilecoinBootstrap4 : string</span><br><span class="line">    // 测试网络启动相关地址</span><br><span class="line">   -testFilecoinBootstrap0 : string</span><br><span class="line">   -testFilecoinBootstrap1 : string</span><br><span class="line">   -testFilecoinBootstrap2 : string</span><br><span class="line">   -testFilecoinBootstrap3 : string</span><br><span class="line">   -testFilecoinBootstrap4 : string</span><br><span class="line">    // 用户，开发网络启动相关地址</span><br><span class="line">   -userFilecoinBootstrap0 : string</span><br><span class="line">   -userFilecoinBootstrap1 : string</span><br><span class="line">   -userFilecoinBootstrap2 : string</span><br><span class="line">   -userFilecoinBootstrap3 : string</span><br><span class="line">   -userFilecoinBootstrap4 : string</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">    // 开发人员，开发网络启动相关地址</span><br><span class="line">   +DevnetNightlyBootstrapAddrs</span><br><span class="line">    // 测试网络启动相关地址</span><br><span class="line">   +DevnetTestBootstrapAddrs</span><br><span class="line">    // 用户，开发网络启动相关地址</span><br><span class="line">   +DevnetUserBootstrapAddrs</span><br><span class="line">    // 预生成测试网络地址集合</span><br><span class="line">   +TestAddresses : []string</span><br><span class="line">    // 预生成测试矿工账户集合</span><br><span class="line">   +TestMiners : []string</span><br><span class="line">    // 预生成地址的私钥</span><br><span class="line">   -testKeys : []string</span><br><span class="line"></span><br><span class="line">▼-detailsStruct : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 创世区块cid</span><br><span class="line">   +GenesisCid : cid.Cid</span><br><span class="line">   +Keys : []*types.KeyInfo</span><br><span class="line">   +Miners : []</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 预生成的Key文件路径</span><br><span class="line">   +KeyFilePaths() : []string</span><br><span class="line"></span><br><span class="line">    // 预生成信息</span><br><span class="line">    // 1 解析gen.json文件到detailsStruct结构体</span><br><span class="line">    // 2 追击Miners信息到TestMiners中</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><ul><li>如下为gen.json文件,可据此预先给特定矿工分配代币</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;keys&quot;: 5,</span><br><span class="line">  &quot;preAlloc&quot;: [</span><br><span class="line">    &quot;1000000000000&quot;,</span><br><span class="line">    &quot;1000000000000&quot;,</span><br><span class="line">    &quot;1000000000000&quot;,</span><br><span class="line">    &quot;1000000000000&quot;,</span><br><span class="line">    &quot;1000000000000&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;miners&quot;: [&#123;</span><br><span class="line">    &quot;owner&quot;: 0,</span><br><span class="line">    &quot;power&quot;: 1</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filnet"><a href="#filnet" class="headerlink" title="filnet"></a>filnet</h2><ul><li>提供功能<ul><li>节点启动</li><li>定期检查连接节点，如果数量不够会链接随机节点</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location: filnet/address.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    filnet</span><br><span class="line"></span><br><span class="line">▼ imports</span><br><span class="line">    gx/ipfs/QmNTCey11oxhb1AxDnQBRHtdhap6Ctud872NjAYPYYXPuc/go-multiaddr</span><br><span class="line">    gx/ipfs/QmRhFARzTHcFh8wUxwN5KvyTGq73FLC65EfFAhz8Ng7aGb/go-libp2p-peerstore</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 节点id转换为完整的节点信息，包括所有的多地址格式</span><br><span class="line">   +PeerAddrsToPeerInfos(addrs []string) : []pstore.PeerInfo, error</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">location: filnet/bootstrap.go</span><br><span class="line"></span><br><span class="line">▼ package</span><br><span class="line">    filnet</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">▼+Bootstrapper : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 对应bootstrap</span><br><span class="line">   +Bootstrap : func([]peer.ID)</span><br><span class="line">    // 连接超时时间，用于连接随机节点</span><br><span class="line">   +ConnectionTimeout : time.Duration</span><br><span class="line">    // 最小连接节点数量阈值</span><br><span class="line">   +MinPeerThreshold : int</span><br><span class="line">    // 定时检查连接节点数量,小于阈值会处理</span><br><span class="line">   +Period : time.Duration</span><br><span class="line">    // 随机节点切片</span><br><span class="line">   -bootstrapPeers : []pstore.PeerInfo</span><br><span class="line">   -cancel : context.CancelFunc</span><br><span class="line">   -ctx : context.Context</span><br><span class="line">   -d : inet.Dialer</span><br><span class="line">   -dhtBootStarted : bool</span><br><span class="line">   -h : host.Host</span><br><span class="line">   -r : routing.IpfsRouting</span><br><span class="line">   -ticker : *time.Ticker</span><br><span class="line">    [methods]</span><br><span class="line">    // 定时调用Bootstrap 检查连接节点数量,小于阈值会处理</span><br><span class="line">   +Start(ctx context.Context)</span><br><span class="line">    // 停止节点</span><br><span class="line">   +Stop()</span><br><span class="line">    // 如果启动节点不够，将会尝试连接随机节点。</span><br><span class="line">   -bootstrap(currentPeers []peer.ID)</span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化</span><br><span class="line">   +NewBootstrapper(bootstrapPeers []pstore.PeerInfo, h host.Host, d inet.Dialer, r routing.IpfsRouting, minPeer int, period time.Duration) : *Bootstrapper</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -hasPID(pids []peer.ID, pid peer.ID) : bool</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第九章filecoin源码分析之支撑包分析(1)。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析八：filecoin源码分析之协议层检索协议</title>
    <link href="https://learnblockchain.cn/2019/03/05/filecoin-code-analysis-8/"/>
    <id>https://learnblockchain.cn/2019/03/05/filecoin-code-analysis-8/</id>
    <published>2019-03-05T09:35:33.000Z</published>
    <updated>2019-03-12T07:25:54.600Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第八章filecoin源码分析之协议层检索协议。</p><a id="more"></a><h2 id="协议概览图"><a href="#协议概览图" class="headerlink" title="协议概览图"></a>协议概览图</h2><p><img src="/images/retrieval_protocol.png" alt=""></p><ul><li>此概览图为当前的实现，整个检索的代码还没有完善</li><li>目前的逻辑比较简单，需要指定矿工、内容cid即可进行免费检索</li></ul><h2 id="源码信息"><a href="#源码信息" class="headerlink" title="源码信息"></a>源码信息</h2><ul><li>version<ul><li>master分支 619b0eb1（2019年３月２日）</li></ul></li><li>package<ul><li>retrieval</li></ul></li><li>location<ul><li>protocol/retrieval</li></ul></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="检索矿工"><a href="#检索矿工" class="headerlink" title="检索矿工"></a>检索矿工</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    retrieval</span><br><span class="line"></span><br><span class="line">▼ imports</span><br><span class="line">    github.com/filecoin-project/go-filecoin/cborutil</span><br><span class="line">    github.com/filecoin-project/go-filecoin/proofs/sectorbuilder</span><br><span class="line">    gx/ipfs/QmTGxDz2CjBucFzPNTiWwzQmTWdrBnzqbqrMucDYMsjuPb/go-libp2p-net</span><br><span class="line">    gx/ipfs/QmZNkThpqfVXs9GNbexPrfBbXSLNYeKrE7jwFM2oqHbyqN/go-libp2p-protocol</span><br><span class="line">    gx/ipfs/QmbkT7eMTyXfpeyB3ZMxxcxg7XH8t6uXp49jqzz4HB7BGF/go-log</span><br><span class="line">    gx/ipfs/Qmd52WKRSwrBK5gUaJKawryZQ5by6UbNB8KVW2Zy6JtbyW/go-libp2p-host</span><br><span class="line">    io/ioutil</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 定义检索协议: &quot;/fil/retrieval/free/0.0.0&quot;</span><br><span class="line">   -retrievalFreeProtocol</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">▼+Miner : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 矿工节点，参见minerNode </span><br><span class="line">   -node : minerNode</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 执行具体的检索服务</span><br><span class="line">    // 通过解析协议流数据，执行检索动作并返回</span><br><span class="line">   -handleRetrievePieceForFree(s inet.Stream)</span><br><span class="line"></span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化检索矿工</span><br><span class="line">    // 设置处理免费检索的handle方法：handleRetrievePieceForFree</span><br><span class="line">   +NewMiner(nd minerNode) : *Miner</span><br><span class="line"></span><br><span class="line">▼-minerNode : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Host() : host.Host</span><br><span class="line">   +SectorBuilder() : sectorbuilder.SectorBuilder</span><br></pre></td></tr></table></figure><h3 id="检索客户"><a href="#检索客户" class="headerlink" title="检索客户"></a>检索客户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    retrieval</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    // 检索内容大小限制</span><br><span class="line">   +RetrievePieceChunkSize</span><br><span class="line"></span><br><span class="line">▼+Client : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -node : clientNode</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 通过cid进行检索</span><br><span class="line">    // 通过协议流，发送检索请求以及接受检索回复和数据</span><br><span class="line">   +RetrievePiece(ctx context.Context, minerPeerID peer.ID, pieceCID cid.Cid) : io.ReadCloser, error</span><br><span class="line"></span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化检索客户</span><br><span class="line">   +NewClient(nd clientNode) : *Client</span><br><span class="line"></span><br><span class="line">▼-clientNode : interface</span><br><span class="line">    [methods]</span><br><span class="line">   +Host() : host.Host</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第八章filecoin源码分析之协议层检索协议。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析七：filecoin源码协议层分析之存储协议</title>
    <link href="https://learnblockchain.cn/2019/03/05/filecoin-code-analysis-7/"/>
    <id>https://learnblockchain.cn/2019/03/05/filecoin-code-analysis-7/</id>
    <published>2019-03-05T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:49.045Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第七章filecoin源码协议层分析之存储协议。</p><a id="more"></a><h2 id="协议概览图"><a href="#协议概览图" class="headerlink" title="协议概览图"></a>协议概览图</h2><p><img src="/images/storage_protocol.png" alt=""></p><h2 id="源码信息"><a href="#源码信息" class="headerlink" title="源码信息"></a>源码信息</h2><ul><li>version<ul><li>master分支 619b0eb1（2019年３月２日）</li></ul></li><li>package<ul><li>storage</li></ul></li><li>location<ul><li>protocol/storage</li></ul></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="存储矿工"><a href="#存储矿工" class="headerlink" title="存储矿工"></a>存储矿工</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    storage</span><br><span class="line"></span><br><span class="line">▶ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">    //等待密封数据前缀</span><br><span class="line">   -dealsAwatingSealDatastorePrefix</span><br><span class="line">    // 存储交易协议名称：&quot;/fil/storage/mk/1.0.0&quot;</span><br><span class="line">   -makeDealProtocol</span><br><span class="line">    // 矿工数据存储前缀</span><br><span class="line">   -minerDatastorePrefix</span><br><span class="line">    // 存储查询协议名称：&quot;/fil/storage/qry/1.0.0&quot;</span><br><span class="line">   -queryDealProtocol</span><br><span class="line">    // Gas及Gas限制</span><br><span class="line">   -submitPostGasLimit</span><br><span class="line">   -submitPostGasPrice</span><br><span class="line">    // 支付通道建立等待时间</span><br><span class="line">   -waitForPaymentChannelDuration</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   -log</span><br><span class="line"></span><br><span class="line">▼+Miner : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 交易集合</span><br><span class="line">   -deals : map[cid.Cid]*storageDeal</span><br><span class="line">    // 等待密封结构体</span><br><span class="line">   -dealsAwaitingSeal : *dealsAwaitingSealStruct</span><br><span class="line">    // 交易的资源对象</span><br><span class="line">   -dealsDs : repo.Datastore</span><br><span class="line">    // 交易锁</span><br><span class="line">   -dealsLk : sync.Mutex</span><br><span class="line">    // 存储矿工地址</span><br><span class="line">   -minerAddr : address.Address</span><br><span class="line">    // 节点的Owner地址</span><br><span class="line">   -minerOwnerAddr : address.Address</span><br><span class="line">    // 节点对象，有定义存储矿工必须实现的接口</span><br><span class="line">   -node : node</span><br><span class="line">    // 存储矿工的高层API</span><br><span class="line">   -porcelainAPI : minerPorcelain</span><br><span class="line">    // 是否在生成时空证明中,以及对应的锁</span><br><span class="line">   -postInProcess : *types.BlockHeight</span><br><span class="line">   -postInProcessLk : sync.Mutex</span><br><span class="line">    // 接受交易以及拒绝交易</span><br><span class="line">   -proposalAcceptor : func(ctx context.Context, m *Miner, p *DealProposal) *DealResponse, error</span><br><span class="line">   -proposalRejector : func(ctx context.Context, m *Miner, p *DealProposal, reason string) *DealResponse, error</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 密封消息提交到区块链时候，所执行的回调函数,在node中执行</span><br><span class="line">    // 1 失败，则调用dealsAwaitingSeal.fail</span><br><span class="line">    // 2 成功，则调用dealsAwaitingSeal.success</span><br><span class="line">    // 3 成功之后，需要保存密封扇区信息，如果失败调用dealsAwaitingSeal.fail</span><br><span class="line">   +OnCommitmentAddedToChain(sector *sectorbuilder.SealedSectorMetadata, err error)</span><br><span class="line">    // 新区块产生的回调，由node调用,它将会触发新的存储证明</span><br><span class="line">    // 如果时空证明过期，将会在新的周期重新出发时空证明</span><br><span class="line">   +OnNewHeaviestTipSet(ts types.TipSet)</span><br><span class="line">   // 由handleQueryDeal调用,返回查询结果</span><br><span class="line">   +Query(ctx context.Context, c cid.Cid) : *DealResponse</span><br><span class="line">   // 生成时空证明</span><br><span class="line">   -generatePoSt(commRs []proofs.CommR, challenge proofs.PoStChallengeSeed) : proofs.PoStProof, []uint64, error</span><br><span class="line">   // 获取支付通道信息</span><br><span class="line">   // 1 等待支付通道建立完成</span><br><span class="line">   // 2 获取支付通道信息并返回</span><br><span class="line">   // 3 支付信息包括：合约地址、支付者地址、通道信息、支付通道消息cid、支付凭证合集</span><br><span class="line">   -getPaymentChannel(ctx context.Context, p *DealProposal) : *paymentbroker.PaymentChannel, error</span><br><span class="line">   // 获取新的时空证明时间</span><br><span class="line">   -getProvingPeriodStart() : *types.BlockHeight, error</span><br><span class="line">   // 获取存储矿工的特定交易</span><br><span class="line">   -getStorageDeal(c cid.Cid) : *storageDeal</span><br><span class="line">   // 获取存储矿工报价</span><br><span class="line">   -getStoragePrice() : *types.AttoFIL, error</span><br><span class="line">    // 存储交易请求的入口方法,交易请求流的handle函数</span><br><span class="line">    // 1 读取流中交易请求信息</span><br><span class="line">    // 2 调用receiveStorageProposal处理交易请求</span><br><span class="line">    // 3 回复处理回复</span><br><span class="line">   -handleMakeDeal(s inet.Stream)</span><br><span class="line">    //解析具体流信息，处理查询请求，会调用Query请求</span><br><span class="line">   -handleQueryDeal(s inet.Stream)</span><br><span class="line">    // 从资源目录中加载交易信息到Miner实例中</span><br><span class="line">   -loadDeals() : error</span><br><span class="line">    // 加载待密封的信息</span><br><span class="line">   -loadDealsAwaitingSeal() : error</span><br><span class="line">   // 密封失败，更新响应信息</span><br><span class="line">   -onCommitFail(dealCid cid.Cid, message string)</span><br><span class="line">   // 密封成功，更新响应信息</span><br><span class="line">   // 1 切换状态至Posted</span><br><span class="line">   // 2 更新证明信息：扇区ID,副本信息，原始数据信息</span><br><span class="line">   -onCommitSuccess(dealCid cid.Cid, sector *sectorbuilder.SealedSectorMetadata)</span><br><span class="line">   // 处理存储交易</span><br><span class="line">   // 1,获取存储交易信息</span><br><span class="line">   // 2,数据处理，密封</span><br><span class="line">   -processStorageDeal(c cid.Cid)</span><br><span class="line">    // 处理交易请求</span><br><span class="line">    // 1 检查签名的正确性</span><br><span class="line">    // 2 检查支付信息正确性,调用validateDealPayment方法</span><br><span class="line">    // 3 不合法调用proposalRejector(rejectProposal)拒绝请求;合法调用proposalAcceptor(acceptProposal)回复</span><br><span class="line">   -receiveStorageProposal(ctx context.Context, sp *SignedDealProposal) : *DealResponse, error</span><br><span class="line">    // 从Miner对象中存储交易信息到资源目录中</span><br><span class="line">   -saveDeal(proposalCid cid.Cid) : error</span><br><span class="line">    // 存储待密封信息至资源目录</span><br><span class="line">   -saveDealsAwaitingSeal() : error</span><br><span class="line">   // 提交时空证明</span><br><span class="line">   // 1 产生随机种子</span><br><span class="line">   // 2 根据时空证明输入长度，生成副本切片</span><br><span class="line">   // 3 随机种子＋副本切片作为输入生成时空证明</span><br><span class="line">   // 4 调用高层接口发送消息</span><br><span class="line">   -submitPoSt(start, end *types.BlockHeight, inputs []generatePostInput)</span><br><span class="line">   // 更新交易响应消息</span><br><span class="line">   -updateDealResponse(proposalCid cid.Cid, f func(*DealResponse)) : error</span><br><span class="line">   // 检查支付信息的正确性</span><br><span class="line">   // 1 客户出价必须高于矿工报价</span><br><span class="line">   // 2 收款人必须为本节点矿工</span><br><span class="line">   // 3 支付通道总资金必须大于矿工报价</span><br><span class="line">   // 4 必须有交易凭证，且交易凭证总金额必须大于矿工报价</span><br><span class="line">   -validateDealPayment(ctx context.Context, p *DealProposal) : error</span><br><span class="line"></span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化存储矿工</span><br><span class="line">    // 1 通过node传参赋值</span><br><span class="line">    // 2 指定密封成功失败的回调函数</span><br><span class="line">    // 3 设置交易请求以及交易查询的流handle方法</span><br><span class="line">   +NewMiner(ctx context.Context, minerAddr, minerOwnerAddr address.Address, nd node, dealsDs repo.Datastore, porcelainAPI minerPorcelain) : *Miner, error</span><br><span class="line"></span><br><span class="line">▼-dealsAwaitingSealStruct : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 从扇区id获取失败信息</span><br><span class="line">   +FailedSectors : map[uint64]string</span><br><span class="line">    // 从扇区id获取交易的cid</span><br><span class="line">   +SectorsToDeals : map[uint64][]cid.Cid</span><br><span class="line">    // 从扇区id获取sector元数据</span><br><span class="line">   +SuccessfulSectors : map[uint64]*sectorbuilder.SealedSectorMetadata</span><br><span class="line">   -l : sync.Mutex</span><br><span class="line">    // 失败处理回调，在实例化Miner指向onCommitFail</span><br><span class="line">   -onFail : func(dealCid cid.Cid, message string)</span><br><span class="line">    // 成功处理回调,在实例化Miner指向onCommitSuccess</span><br><span class="line">   -onSuccess : func(dealCid cid.Cid, sector *sectorbuilder.SealedSectorMetadata)</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 对数据进行密封</span><br><span class="line">   -add(sectorID uint64, dealCid cid.Cid)</span><br><span class="line">    // 密封失败处理dealsAwaitingSeal.onFail</span><br><span class="line">   -fail(sectorID uint64, message string)</span><br><span class="line">    // 密封成功处理dealsAwaitingSeal.onSuccess</span><br><span class="line">   -success(sector *sectorbuilder.SealedSectorMetadata)</span><br><span class="line"></span><br><span class="line">▼-generatePostInput : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 副本merkle根</span><br><span class="line">   -commD : proofs.CommD</span><br><span class="line">    // 原始数据merkle根</span><br><span class="line">   -commR : proofs.CommR</span><br><span class="line">    // 中间数据merkle根</span><br><span class="line">   -commRStar : proofs.CommRStar</span><br><span class="line">    // 扇区ID</span><br><span class="line">   -sectorID : uint64</span><br><span class="line"></span><br><span class="line">▼-storageDeal : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 交易请求结构体</span><br><span class="line">   +Proposal : *DealProposal</span><br><span class="line">    // 交易请求响应结构体</span><br><span class="line">   +Response : *DealResponse</span><br><span class="line"></span><br><span class="line">    // 存储矿工高层API</span><br><span class="line">▼-minerPorcelain : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 区块高度</span><br><span class="line">   +ChainBlockHeight(ctx context.Context) : *types.BlockHeight, error</span><br><span class="line">    // 获取配置</span><br><span class="line">   +ConfigGet(dottedPath string) : interface&#123;&#125;, error</span><br><span class="line">    // 发送、查询、等待消息</span><br><span class="line">   +MessageQuery(ctx context.Context, optFrom, to address.Address, method string, params ...interface&#123;&#125;) : [][]byte, *exec.FunctionSignature, error</span><br><span class="line">   +MessageSend(ctx context.Context, from, to address.Address, value *types.AttoFIL, gasPrice types.AttoFIL, gasLimit types.GasUnits, method string, params ...interface&#123;&#125;) : cid.Cid, error</span><br><span class="line">   +MessageWait(ctx context.Context, msgCid cid.Cid, cb func(*types.Block, *types.SignedMessage, *types.MessageReceipt) error) : error</span><br><span class="line"></span><br><span class="line">▼-node : interface</span><br><span class="line">    [methods]</span><br><span class="line">    // 区块高度</span><br><span class="line">   +BlockHeight() : *types.BlockHeight, error</span><br><span class="line">    // 区块服务，存储/查询服务</span><br><span class="line">   +BlockService() : bserv.BlockService</span><br><span class="line">    // 区块时间</span><br><span class="line">   +GetBlockTime() : time.Duration</span><br><span class="line">    // 主机信息</span><br><span class="line">   +Host() : host.Host</span><br><span class="line">    // 扇区创建,具体包含</span><br><span class="line">    // 1 增加、读取piece;</span><br><span class="line">    // 2 密封所有非空分期扇区</span><br><span class="line">    // 3 密封结果通过返回，通过通道channel的方式</span><br><span class="line">    // 4 获取扇区中最大的piece字节大小</span><br><span class="line">    // 5 生成时空证明</span><br><span class="line">   +SectorBuilder() : sectorbuilder.SectorBuilder</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">    // 存储交易信息之后，调用processStorageDeal处理交易信息</span><br><span class="line">   -acceptProposal(ctx context.Context, sm *Miner, p *DealProposal) : *DealResponse, error</span><br><span class="line">    // 获取具体文件大小</span><br><span class="line">   -getFileSize(ctx context.Context, c cid.Cid, dserv ipld.DAGService) : uint64, error</span><br><span class="line">   -init()</span><br><span class="line">    // 存储交易信息,更新响应消息，并返回</span><br><span class="line">   -rejectProposal(ctx context.Context, sm *Miner, p *DealProposal, reason string) : *DealResponse, error</span><br></pre></td></tr></table></figure><h3 id="存储客户"><a href="#存储客户" class="headerlink" title="存储客户"></a>存储客户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">▼ package</span><br><span class="line">    storage</span><br><span class="line"></span><br><span class="line">▼ imports</span><br><span class="line"></span><br><span class="line">▼ constants</span><br><span class="line">   +ChannelExpiryInterval</span><br><span class="line">    // Gas及Gas限制</span><br><span class="line">   +CreateChannelGasLimit</span><br><span class="line">   +CreateChannelGasPrice</span><br><span class="line">   +ErrDupicateDeal</span><br><span class="line">    // 建立Voucher的周期</span><br><span class="line">   +VoucherInterval</span><br><span class="line">    // 存储前缀</span><br><span class="line">   -clientDatastorePrefix</span><br><span class="line"></span><br><span class="line">▼ variables</span><br><span class="line">   +Errors</span><br><span class="line"></span><br><span class="line">▼+Client : struct</span><br><span class="line">    [fields]</span><br><span class="line">    </span><br><span class="line">    // 存储客户高层API</span><br><span class="line">   -api : clientPorcelainAPI</span><br><span class="line">    // 交易集合</span><br><span class="line">   -deals : map[cid.Cid]*clientDeal</span><br><span class="line">    // 交易资源目录对象及锁</span><br><span class="line">   -dealsDs : repo.Datastore</span><br><span class="line">   -dealsLk : sync.Mutex</span><br><span class="line">    // 存储客户节点</span><br><span class="line">   -node : clientNode</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 加载特定交易的凭证</span><br><span class="line">   +LoadVouchersForDeal(dealCid cid.Cid) : []*paymentbroker.PaymentVoucher, error</span><br><span class="line"></span><br><span class="line">    // 发起存储交易</span><br><span class="line">    // 1 获取文件大小、矿工报价、区块高度、目的地址 </span><br><span class="line">    // 2 建立支付通道</span><br><span class="line">    // 3 调用MakeProtocolRequest发起交易请求</span><br><span class="line">    // 4 检查交易响应</span><br><span class="line">    // 5 持久化交易响应并回复</span><br><span class="line">   +ProposeDeal(ctx context.Context, miner address.Address, data cid.Cid, askID uint64, duration uint64, allowDuplicates bool) : *DealResponse, error</span><br><span class="line"></span><br><span class="line">    // 查询交易</span><br><span class="line">    // 1 获取矿工信息，地址、节点ID</span><br><span class="line">    // 2 调用MakeProtocolRequest发起请求</span><br><span class="line">   +QueryDeal(ctx context.Context, proposalCid cid.Cid) : *DealResponse, error</span><br><span class="line"></span><br><span class="line">    // 检查交易响应</span><br><span class="line">   -checkDealResponse(ctx context.Context, resp *DealResponse) : error</span><br><span class="line"></span><br><span class="line">    // 判断是否为重复交易</span><br><span class="line">   -isMaybeDupDeal(p *DealProposal) : bool</span><br><span class="line"></span><br><span class="line">    // 加载交易信息</span><br><span class="line">   -loadDeals() : error</span><br><span class="line"></span><br><span class="line">    // 返回目标矿工地址</span><br><span class="line">   -minerForProposal(c cid.Cid) : address.Address, error</span><br><span class="line"></span><br><span class="line">    // 持久化交易响应</span><br><span class="line">   -recordResponse(resp *DealResponse, miner address.Address, p *DealProposal) : error</span><br><span class="line"></span><br><span class="line">    // 保存交易信息</span><br><span class="line">   -saveDeal(cid cid.Cid) : error</span><br><span class="line"></span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化存储客户</span><br><span class="line">   +NewClient(nd clientNode, api clientPorcelainAPI, dealsDs repo.Datastore) : *Client, error</span><br><span class="line"></span><br><span class="line">▼+ClientNodeImpl : struct</span><br><span class="line">    [fields]</span><br><span class="line">   -blockTime : time.Duration</span><br><span class="line">   -dserv : ipld.DAGService</span><br><span class="line">   -host : host.Host</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    //实现clientNode接口</span><br><span class="line">   +GetBlockTime() : time.Duration</span><br><span class="line"></span><br><span class="line">    // 获取文件大小</span><br><span class="line">   +GetFileSize(ctx context.Context, c cid.Cid) : uint64, error</span><br><span class="line"></span><br><span class="line">    // 发起协议请求</span><br><span class="line">    // 1 建立对应的存储交易或者请求的协议流</span><br><span class="line">    // 2 发起请求</span><br><span class="line">   +MakeProtocolRequest(ctx context.Context, protocol protocol.ID, peer peer.ID, request interface&#123;&#125;, response interface&#123;&#125;) : error</span><br><span class="line"></span><br><span class="line">    [functions]</span><br><span class="line">    // 实例化客户节点</span><br><span class="line">   +NewClientNodeImpl(ds ipld.DAGService, host host.Host, bt time.Duration) : *ClientNodeImpl</span><br><span class="line"></span><br><span class="line">▼-clientDeal : struct</span><br><span class="line">    [fields]</span><br><span class="line">    // 目标矿工，请求及响应</span><br><span class="line">   +Miner : address.Address</span><br><span class="line">   +Proposal : *DealProposal</span><br><span class="line">   +Response : *DealResponse</span><br><span class="line"></span><br><span class="line">▼-clientNode : interface</span><br><span class="line">    // 由ClientNodeImpl实现</span><br><span class="line">    [methods]</span><br><span class="line">   +GetBlockTime() : time.Duration</span><br><span class="line">   +GetFileSize(context.Context, cid.Cid) : uint64, error</span><br><span class="line">   +MakeProtocolRequest(ctx context.Context, protocol protocol.ID, peer peer.ID, request interface&#123;&#125;, response interface&#123;&#125;) : error</span><br><span class="line"></span><br><span class="line">▼-clientPorcelainAPI : interface</span><br><span class="line">    [embedded]</span><br><span class="line">   +types.Signer</span><br><span class="line"></span><br><span class="line">    [methods]</span><br><span class="line">    // 获取区块高度</span><br><span class="line">   +ChainBlockHeight(ctx context.Context) : *types.BlockHeight, error</span><br><span class="line">    // 创建支付通道</span><br><span class="line">    // 包括源及目的地址，价格，时间，支付间隔，通道超时时间，Gas及限制</span><br><span class="line">   +CreatePayments(ctx context.Context, config porcelain.CreatePaymentsParams) : *porcelain.CreatePaymentsReturn, error</span><br><span class="line">    // 获取目标地址</span><br><span class="line">   +GetAndMaybeSetDefaultSenderAddress() : address.Address, error</span><br><span class="line">    // 获取矿工报价</span><br><span class="line">   +MinerGetAsk(ctx context.Context, minerAddr address.Address, askID uint64) : miner.Ask, error</span><br><span class="line">    // 获取矿工Owner地址</span><br><span class="line">   +MinerGetOwnerAddress(ctx context.Context, minerAddr address.Address) : address.Address, error</span><br><span class="line">    // 获取矿工节点ID</span><br><span class="line">   +MinerGetPeerID(ctx context.Context, minerAddr address.Address) : peer.ID, error</span><br><span class="line"></span><br><span class="line">▼ functions</span><br><span class="line">   -init()</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第七章filecoin源码协议层分析之存储协议。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析六:filecoin源码协议层分析之hello握手协议</title>
    <link href="https://learnblockchain.cn/2019/03/04/filecoin-code-analysis-6/"/>
    <id>https://learnblockchain.cn/2019/03/04/filecoin-code-analysis-6/</id>
    <published>2019-03-04T09:35:33.000Z</published>
    <updated>2019-03-12T07:25:43.833Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第六章filecoin源码协议层分析之hello握手协议.</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>处理节点上线后的区块同步握手。</li></ul><h2 id="源码信息"><a href="#源码信息" class="headerlink" title="源码信息"></a>源码信息</h2><ul><li>version<ul><li>master分支 619b0eb1（2019年３月２日）</li></ul></li><li>package<ul><li>hello</li></ul></li><li>location<ul><li>protocol/hello</li><li>node/node.go</li></ul></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>定义协议名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Protocol is the libp2p protocol identifier for the hello protocol.</span><br><span class="line">const protocol = &quot;/fil/hello/1.0.0&quot;</span><br></pre></td></tr></table></figure><ul><li>定义hello协议消息体结构<ul><li>TipSet切片</li><li>TipSet高度</li><li>创世区块cid</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Message is the data structure of a single message in the hello protocol.</span><br><span class="line">type Message struct &#123;</span><br><span class="line">HeaviestTipSetCids   []cid.Cid</span><br><span class="line">HeaviestTipSetHeight uint64</span><br><span class="line">GenesisHash          cid.Cid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同步回调函数类型定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type syncCallback func(from peer.ID, cids []cid.Cid, height uint64)</span><br></pre></td></tr></table></figure><ul><li>获取Tipset函数类型定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type getTipSetFunc func() types.TipSet</span><br></pre></td></tr></table></figure><ul><li>Handler结构体,当连接到其他节点的时候，其一,会发送包含本节点信息的hello 消息给对端节点; 其二, 对端也会回复一个包含对端节点信息的消息体过来。<ul><li>host 对应libp2p上的主机</li><li>创世区块cid</li><li>区块同步回调函数</li><li>获取TipSet的函数</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Handler implements the &apos;Hello&apos; protocol handler. Upon connecting to a new</span><br><span class="line">// node, we send them a message containing some information about the state of</span><br><span class="line">// our chain, and receive the same information from them. This is used to</span><br><span class="line">// initiate a chainsync and detect connections to forks.</span><br><span class="line">type Handler struct &#123;</span><br><span class="line">host host.Host</span><br><span class="line"></span><br><span class="line">genesis cid.Cid</span><br><span class="line"></span><br><span class="line">// chainSyncCB is called when new peers tell us about their chain</span><br><span class="line">chainSyncCB syncCallback</span><br><span class="line"></span><br><span class="line">// getHeaviestTipSet is used to retrieve the current heaviest tipset</span><br><span class="line">// for filling out our hello messages.</span><br><span class="line">getHeaviestTipSet getTipSetFunc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>错误的创世区块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ErrBadGenesis is the error returned when a missmatch in genesis blocks happens.</span><br><span class="line">var ErrBadGenesis = fmt.Errorf(&quot;bad genesis block&quot;)</span><br></pre></td></tr></table></figure><ul><li>以上基本是作为hello客户端的一些定义，以下作为hello服务端的一些定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// New peer connection notifications</span><br><span class="line">type helloNotify Handler</span><br><span class="line"></span><br><span class="line">//　连接超时时间</span><br><span class="line">const helloTimeout = time.Second * 10</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="Handler-方法"><a href="#Handler-方法" class="headerlink" title="Handler 方法"></a>Handler 方法</h4><ul><li>流函数处理，接收远端节点的hello消息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func (h *Handler) handleNewStream(s net.Stream) &#123;</span><br><span class="line">defer s.Close() // nolint: errcheck</span><br><span class="line"></span><br><span class="line">    //获取远端节点实例</span><br><span class="line">from := s.Conn().RemotePeer()</span><br><span class="line"></span><br><span class="line">var hello Message</span><br><span class="line">    // 读取流信息到hello结构体中</span><br><span class="line">if err := cbu.NewMsgReader(s).ReadMsg(&amp;hello); err != nil &#123;</span><br><span class="line">log.Warningf(&quot;bad hello message from peer %s: %s&quot;, from, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 调用processHelloMessage方法对接收到的消息进行处理</span><br><span class="line">switch err := h.processHelloMessage(from, &amp;hello); err &#123;</span><br><span class="line">    // 如果创世区块不一样，关闭流连接退出，不予处理</span><br><span class="line">case ErrBadGenesis:</span><br><span class="line">log.Warningf(&quot;genesis cid: %s does not match: %s, disconnecting from peer: %s&quot;, &amp;hello.GenesisHash, h.genesis, from)</span><br><span class="line">s.Conn().Close() // nolint: errcheck</span><br><span class="line">return</span><br><span class="line">case nil: // ok, noop</span><br><span class="line">default:</span><br><span class="line">log.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理hello消息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func (h *Handler) processHelloMessage(from peer.ID, msg *Message) error &#123;</span><br><span class="line">    // 如果创世区块不一样，报错</span><br><span class="line">if !msg.GenesisHash.Equals(h.genesis) &#123;</span><br><span class="line">return ErrBadGenesis</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 调用区块同步方法</span><br><span class="line">    // 此回调函数实在node包实例化hello协议的时候中定义的</span><br><span class="line">h.chainSyncCB(from, msg.HeaviestTipSetCids, msg.HeaviestTipSetHeight)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应远端节点的连接，回复hello消息体 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">func (h *Handler) getOurHelloMessage() *Message &#123;</span><br><span class="line">heaviest := h.getHeaviestTipSet()</span><br><span class="line">height, err := heaviest.Height()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;somehow heaviest tipset is empty&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;Message&#123;</span><br><span class="line">GenesisHash:          h.genesis,</span><br><span class="line">HeaviestTipSetCids:   heaviest.ToSortedCidSet().ToSlice(),</span><br><span class="line">HeaviestTipSetHeight: height,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (h *Handler) sayHello(ctx context.Context, p peer.ID) error &#123;</span><br><span class="line">s, err := h.host.NewStream(ctx, p, protocol)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">defer s.Close() // nolint: errcheck</span><br><span class="line"></span><br><span class="line">    //获取本节点的hello消息体</span><br><span class="line">msg := h.getOurHelloMessage()</span><br><span class="line"></span><br><span class="line">    //向远端节点发送消息体</span><br><span class="line">return cbu.NewMsgWriter(s).WriteMsg(&amp;msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="helloNotify方法"><a href="#helloNotify方法" class="headerlink" title="helloNotify方法"></a>helloNotify方法</h4><ul><li>hello方法，返回一个handler实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (hn *helloNotify) hello() *Handler &#123;</span><br><span class="line">return (*Handler)(hn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>helloNotify实现了libp2p-net/interface.go中的Notifiee接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func (hn *helloNotify) Connected(n net.Network, c net.Conn) &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), helloTimeout)</span><br><span class="line">defer cancel()</span><br><span class="line">p := c.RemotePeer()</span><br><span class="line">        // 有其他节点连接的时候调用sayHello,发送hello消息体</span><br><span class="line">if err := hn.hello().sayHello(ctx, p); err != nil &#123;</span><br><span class="line">log.Warningf(&quot;failed to send hello handshake to peer %s: %s&quot;, p, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (hn *helloNotify) Listen(n net.Network, a ma.Multiaddr)      &#123;&#125;</span><br><span class="line">func (hn *helloNotify) ListenClose(n net.Network, a ma.Multiaddr) &#123;&#125;</span><br><span class="line">func (hn *helloNotify) Disconnected(n net.Network, c net.Conn)    &#123;&#125;</span><br><span class="line">func (hn *helloNotify) OpenedStream(n net.Network, s net.Stream)  &#123;&#125;</span><br><span class="line">func (hn *helloNotify) ClosedStream(n net.Network, s net.Stream)  &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>创建hello实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// New creates a new instance of the hello protocol and registers it to</span><br><span class="line">// the given host, with the provided callbacks.</span><br><span class="line">func New(h host.Host, gen cid.Cid, syncCallback syncCallback, getHeaviestTipSet getTipSetFunc) *Handler &#123;</span><br><span class="line">hello := &amp;Handler&#123;</span><br><span class="line">host:              h,</span><br><span class="line">genesis:           gen,</span><br><span class="line">chainSyncCB:       syncCallback,</span><br><span class="line">getHeaviestTipSet: getHeaviestTipSet,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //设置流处理回调函数</span><br><span class="line">h.SetStreamHandler(protocol, hello.handleNewStream)</span><br><span class="line"></span><br><span class="line">    //注册网络状态改变通知回调函数</span><br><span class="line">// register for connection notifications</span><br><span class="line">h.Network().Notify((*helloNotify)(hello))</span><br><span class="line"></span><br><span class="line">return hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//上文中的helloNotify 实现了libp2p-net/interface.go中的Notifiee接口</span><br><span class="line">// Notifiee is an interface for an object wishing to receive</span><br><span class="line">// notifications from a Network.</span><br><span class="line">type Notifiee interface &#123;</span><br><span class="line">Listen(Network, ma.Multiaddr)      // called when network starts listening on an addr</span><br><span class="line">ListenClose(Network, ma.Multiaddr) // called when network stops listening on an addr</span><br><span class="line">Connected(Network, Conn)           // called when a connection opened</span><br><span class="line">Disconnected(Network, Conn)        // called when a connection closed</span><br><span class="line">OpenedStream(Network, Stream)      // called when a stream opened</span><br><span class="line">ClosedStream(Network, Stream)      // called when a stream closed</span><br><span class="line"></span><br><span class="line">// TODO</span><br><span class="line">// PeerConnected(Network, peer.ID)    // called when a peer connected</span><br><span class="line">// PeerDisconnected(Network, peer.ID) // called when a peer disconnected</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化及业务逻辑"><a href="#实例化及业务逻辑" class="headerlink" title="实例化及业务逻辑"></a>实例化及业务逻辑</h3><ul><li><p>location: node/node.go</p></li><li><p>Node节点中定义了hello服务</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Node struct &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">HelloSvc     *hello.Handler</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动hello服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Start boots up the node.</span><br><span class="line">func (node *Node) Start(ctx context.Context) error &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">// Start up &apos;hello&apos; handshake service</span><br><span class="line">    // 定义区块同步的回调函数</span><br><span class="line">syncCallBack := func(pid libp2ppeer.ID, cids []cid.Cid, height uint64) &#123;</span><br><span class="line">// TODO it is possible the syncer interface should be modified to</span><br><span class="line">// make use of the additional context not used here (from addr + height).</span><br><span class="line">// To keep things simple for now this info is not used.</span><br><span class="line">        // 触发调用会启动同步区块的动作</span><br><span class="line">err := node.Syncer.HandleNewBlocks(context.Background(), cids)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Infof(&quot;error handling blocks: %s&quot;, types.NewSortedCidSet(cids...).String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    //实例化hello服务</span><br><span class="line">node.HelloSvc = hello.New(node.Host(), node.ChainReader.GenesisCid(), syncCallBack, node.ChainReader.Head)</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第六章filecoin源码协议层分析之hello握手协议.&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析五:filecoin源码分析之协议层心跳协议</title>
    <link href="https://learnblockchain.cn/2019/03/04/filecoin-code-analysis-5/"/>
    <id>https://learnblockchain.cn/2019/03/04/filecoin-code-analysis-5/</id>
    <published>2019-03-04T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:38.613Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第五章filecoin源码分析之协议层心跳协议。</p><a id="more"></a><h2 id="源码信息"><a href="#源码信息" class="headerlink" title="源码信息"></a>源码信息</h2><ul><li>version<ul><li>master分支 619b0eb1（2019年３月２日）</li></ul></li><li>package<ul><li>metrics</li></ul></li><li>location<ul><li>metrics/heartbeat.go</li><li>node/node.go</li></ul></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>定义心跳协议名称以及连接超时时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// HeartbeatProtocol is the libp2p protocol used for the heartbeat service</span><br><span class="line">const (</span><br><span class="line">HeartbeatProtocol = &quot;fil/heartbeat/1.0.0&quot;</span><br><span class="line">// Minutes to wait before logging connection failure at ERROR level</span><br><span class="line">connectionFailureErrorLogPeriodMinutes = 10 * time.Minute</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>定义心跳信息结构<ul><li>节点的区块头</li><li>节点的区块高度</li><li>节点的昵称</li><li>是否在区块同步中（ＴＯＤＯ）</li><li>矿工地址（如果没有挖矿，这里为零地址）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// Heartbeat contains the information required to determine the current state of a node.</span><br><span class="line">// Heartbeats are used for aggregating information about nodes in a log aggregator</span><br><span class="line">// to support alerting and devnet visualization.</span><br><span class="line">type Heartbeat struct &#123;</span><br><span class="line">// Head represents the heaviest tipset the nodes is mining on</span><br><span class="line">Head string</span><br><span class="line">// Height represents the current height of the Tipset</span><br><span class="line">Height uint64</span><br><span class="line">// Nickname is the nickname given to the filecoin node by the user</span><br><span class="line">Nickname string</span><br><span class="line">// TODO: add when implemented</span><br><span class="line">// Syncing is `true` iff the node is currently syncing its chain with the network.</span><br><span class="line">// Syncing bool</span><br><span class="line"></span><br><span class="line">// Address of this node&apos;s active miner. Can be empty - will return the zero address</span><br><span class="line">MinerAddress address.Address</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>心跳服务结构体<ul><li>主机结构体：对应libp2p主机</li><li>心跳配置</li><li>区块头获取</li><li>挖矿地址获取</li><li>stream锁</li><li>stream</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// HeartbeatService is responsible for sending heartbeats.</span><br><span class="line">type HeartbeatService struct &#123;</span><br><span class="line">Host   host.Host</span><br><span class="line">Config *config.HeartbeatConfig</span><br><span class="line"></span><br><span class="line">// A function that returns the heaviest tipset</span><br><span class="line">HeadGetter func() types.TipSet</span><br><span class="line"></span><br><span class="line">// A function that returns the miner&apos;s address</span><br><span class="line">MinerAddressGetter func() address.Address</span><br><span class="line"></span><br><span class="line">streamMu sync.Mutex</span><br><span class="line">stream   net.Stream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义心跳服务Option函数<ul><li>函数入参为心跳服务结构体,主要用于对心跳服务结构体传参或者解析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// HeartbeatServiceOption is the type of the heartbeat service&apos;s functional options.</span><br><span class="line">type HeartbeatServiceOption func(service *HeartbeatService)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>获取心跳服务的stream实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Stream returns the HeartbeatService stream. Safe for concurrent access.</span><br><span class="line">// Stream is a libp2p connection that heartbeat messages are sent over to an aggregator.</span><br><span class="line">func (hbs *HeartbeatService) Stream() net.Stream &#123;</span><br><span class="line">hbs.streamMu.Lock()</span><br><span class="line">defer hbs.streamMu.Unlock()</span><br><span class="line">return hbs.stream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置心跳服务的stream实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// SetStream sets the stream on the HeartbeatService. Safe for concurrent access.</span><br><span class="line">func (hbs *HeartbeatService) SetStream(s net.Stream) &#123;</span><br><span class="line">hbs.streamMu.Lock()</span><br><span class="line">defer hbs.streamMu.Unlock()</span><br><span class="line">hbs.stream = s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定时确认连接性，并调用运行心跳服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// Start starts the heartbeat service by, starting the connection loop. The connection</span><br><span class="line">// loop will attempt to connected to the aggregator service, once a successful</span><br><span class="line">// connection is made with the aggregator service hearbeats will be sent to it.</span><br><span class="line">// If the connection is broken the heartbeat service will attempt to reconnect via</span><br><span class="line">// the connection loop. Start will not return until context `ctx` is &apos;Done&apos;.</span><br><span class="line">func (hbs *HeartbeatService) Start(ctx context.Context) &#123;</span><br><span class="line">log.Debug(&quot;starting heartbeat service&quot;)</span><br><span class="line"></span><br><span class="line">rd, err := time.ParseDuration(hbs.Config.ReconnectPeriod)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;invalid heartbeat reconnectPeriod: %s&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //启动重连定时器</span><br><span class="line">reconTicker := time.NewTicker(rd)</span><br><span class="line">defer reconTicker.Stop()</span><br><span class="line">// Timestamp of the first connection failure since the last successful connection.</span><br><span class="line">// Zero initially and while connected.</span><br><span class="line">var failedAt time.Time</span><br><span class="line">// Timestamp of the last ERROR log (or of failure, before the first ERROR log).</span><br><span class="line">var erroredAt time.Time</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">return</span><br><span class="line">case &lt;-reconTicker.C:</span><br><span class="line">            //重连定时周期到，重新连接</span><br><span class="line">if err := hbs.Connect(ctx); err != nil &#123;</span><br><span class="line">// Logs once as a warning immediately on failure, then as error every 10 minutes.</span><br><span class="line">now := time.Now()</span><br><span class="line">logfn := log.Debugf</span><br><span class="line">if failedAt.IsZero() &#123; // First failure since connection</span><br><span class="line">failedAt = now</span><br><span class="line">erroredAt = failedAt // Start the timer on raising to ERROR level</span><br><span class="line">logfn = log.Warningf</span><br><span class="line">&#125; else if now.Sub(erroredAt) &gt; connectionFailureErrorLogPeriodMinutes &#123;</span><br><span class="line">logfn = log.Errorf</span><br><span class="line">erroredAt = now // Reset the timer</span><br><span class="line">&#125;</span><br><span class="line">failureDuration := now.Sub(failedAt)</span><br><span class="line">logfn(&quot;Heartbeat service failed to connect for %s: %s&quot;, failureDuration, err)</span><br><span class="line">// failed to connect, continue reconnect loop</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">failedAt = time.Time&#123;&#125;</span><br><span class="line"></span><br><span class="line">// we connected, send heartbeats!</span><br><span class="line">// Run will block until it fails to send a heartbeat.</span><br><span class="line">            //如果连接成功，运行心跳服务</span><br><span class="line">if err := hbs.Run(ctx); err != nil &#123;</span><br><span class="line">log.Warning(&quot;disconnecting from aggregator, failed to send heartbeat&quot;)</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行心跳服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// Run is called once the heartbeat service connects to the aggregator. Run</span><br><span class="line">// send the actual heartbeat. Run will block until `ctx` is &apos;Done`. An error will</span><br><span class="line">// be returned if Run encounters an error when sending the heartbeat and the connection</span><br><span class="line">// to the aggregator will be closed.</span><br><span class="line">func (hbs *HeartbeatService) Run(ctx context.Context) error &#123;</span><br><span class="line">bd, err := time.ParseDuration(hbs.Config.BeatPeriod)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;invalid heartbeat beatPeriod: %s&quot;, err)</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //启动心跳定时器</span><br><span class="line">beatTicker := time.NewTicker(bd)</span><br><span class="line">defer beatTicker.Stop()</span><br><span class="line"></span><br><span class="line">    //通过encoder进行流写入</span><br><span class="line">// TODO use cbor instead of json</span><br><span class="line">encoder := json.NewEncoder(hbs.stream)</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-ctx.Done():</span><br><span class="line">return nil</span><br><span class="line">case &lt;-beatTicker.C:</span><br><span class="line">        //心跳定时周期到，调用Beat方法获取心跳参数</span><br><span class="line">hb := hbs.Beat()</span><br><span class="line">            //写入流，发起心跳</span><br><span class="line">if err := encoder.Encode(hb); err != nil &#123;</span><br><span class="line">                //发生错误会关闭流连接</span><br><span class="line">hbs.stream.Conn().Close() // nolint: errcheck</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取心跳参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// Beat will create a heartbeat.</span><br><span class="line">func (hbs *HeartbeatService) Beat() Heartbeat &#123;</span><br><span class="line">nick := hbs.Config.Nickname</span><br><span class="line">ts := hbs.HeadGetter()</span><br><span class="line">tipset := ts.ToSortedCidSet().String()</span><br><span class="line">height, err := ts.Height()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Warningf(&quot;heartbeat service failed to get chain height: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">addr := hbs.MinerAddressGetter()</span><br><span class="line">return Heartbeat&#123;</span><br><span class="line">Head:         tipset,</span><br><span class="line">Height:       height,</span><br><span class="line">Nickname:     nick,</span><br><span class="line">MinerAddress: addr,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>心跳流连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// Connect will connects to `hbs.Config.BeatTarget` or returns an error</span><br><span class="line">func (hbs *HeartbeatService) Connect(ctx context.Context) error &#123;</span><br><span class="line">log.Debugf(&quot;Heartbeat service attempting to connect, targetAddress: %s&quot;, hbs.Config.BeatTarget)</span><br><span class="line">targetMaddr, err := ma.NewMultiaddr(hbs.Config.BeatTarget)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid, err := targetMaddr.ValueForProtocol(ma.P_P2P)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">peerid, err := peer.IDB58Decode(pid)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Decapsulate the /p2p/&lt;peerID&gt; part from the target</span><br><span class="line">// /ip4/&lt;a.b.c.d&gt;/p2p/&lt;peer&gt; becomes /ip4/&lt;a.b.c.d&gt;</span><br><span class="line">targetPeerAddr, _ := ma.NewMultiaddr(</span><br><span class="line">fmt.Sprintf(&quot;/p2p/%s&quot;, peer.IDB58Encode(peerid)))</span><br><span class="line">targetAddr := targetMaddr.Decapsulate(targetPeerAddr)</span><br><span class="line"></span><br><span class="line">hbs.Host.Peerstore().AddAddr(peerid, targetAddr, pstore.PermanentAddrTTL)</span><br><span class="line"></span><br><span class="line">    // 建立心跳服务流</span><br><span class="line">s, err := hbs.Host.NewStream(ctx, peerid, HeartbeatProtocol)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Debugf(&quot;failed to open stream, peerID: %s, targetAddr: %s %s&quot;, peerid, targetAddr, err)</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">log.Infof(&quot;successfully to open stream, peerID: %s, targetAddr: %s&quot;, peerid, targetAddr)</span><br><span class="line"></span><br><span class="line">    //设置流函数</span><br><span class="line">hbs.SetStream(s)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>向心跳服务结构体传参,用于设置获取矿工地址函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// WithMinerAddressGetter returns an option that can be used to set the miner address getter.</span><br><span class="line">func WithMinerAddressGetter(ag func() address.Address) HeartbeatServiceOption &#123;</span><br><span class="line">return func(service *HeartbeatService) &#123;</span><br><span class="line">service.MinerAddressGetter = ag</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取默认的矿工地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func defaultMinerAddressGetter() address.Address &#123;</span><br><span class="line">return address.Address&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例化心跳服务,具体的实例化在node包中实现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// NewHeartbeatService returns a HeartbeatService</span><br><span class="line">func NewHeartbeatService(h host.Host, hbc *config.HeartbeatConfig, hg func() types.TipSet, options ...HeartbeatServiceOption) *HeartbeatService &#123;</span><br><span class="line">srv := &amp;HeartbeatService&#123;</span><br><span class="line">Host:               h,</span><br><span class="line">Config:             hbc,</span><br><span class="line">HeadGetter:         hg,</span><br><span class="line">MinerAddressGetter: defaultMinerAddressGetter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 设置心跳服务的获取矿工属性,这会覆盖到上面设置的默认矿工地址</span><br><span class="line">for _, option := range options &#123;</span><br><span class="line">option(srv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return srv</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化及业务逻辑"><a href="#实例化及业务逻辑" class="headerlink" title="实例化及业务逻辑"></a>实例化及业务逻辑</h3><ul><li><p>主要由node调用,location:node/node.go,主要逻辑如下</p></li><li><p>在node的启动方法中，调用node.setupHeartbeatServices方法，建立心跳服务</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Start boots up the node.</span><br><span class="line">func (node *Node) Start(ctx context.Context) error &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">if err := node.setupHeartbeatServices(ctx); err != nil &#123;</span><br><span class="line">return errors.Wrap(err, &quot;failed to start heartbeat services&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建立心跳服务,具体见如下注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">func (node *Node) setupHeartbeatServices(ctx context.Context) error &#123;</span><br><span class="line">    // 设置“矿工地址获取函数”</span><br><span class="line">mag := func() address.Address &#123;</span><br><span class="line">addr, err := node.miningAddress()</span><br><span class="line">// the only error miningAddress() returns is ErrNoMinerAddress.</span><br><span class="line">// if there is no configured miner address, simply send a zero</span><br><span class="line">// address across the wire.</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return address.Address&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">return addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 存在心跳目标的时候，实例化心跳服务实例</span><br><span class="line">// start the primary heartbeat service</span><br><span class="line">if len(node.Repo.Config().Heartbeat.BeatTarget) &gt; 0 &#123;</span><br><span class="line">        //调用metrics包中的建立心跳服务实例、以及启动心跳服务实例方法</span><br><span class="line">hbs := metrics.NewHeartbeatService(node.Host(), node.Repo.Config().Heartbeat, node.ChainReader.Head, metrics.WithMinerAddressGetter(mag))</span><br><span class="line">go hbs.Start(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    // 确认是否用户有通过环境变量配置额外的心跳告警服务（自定义指向其他节点），根据用户配置的数目，拉起对应的多线程心跳服务。</span><br><span class="line">// check if we want to connect to an alert service. An alerting service is a heartbeat</span><br><span class="line">// service that can trigger alerts based on the contents of heatbeats.</span><br><span class="line">if alertTarget := os.Getenv(&quot;FIL_HEARTBEAT_ALERTS&quot;); len(alertTarget) &gt; 0 &#123;</span><br><span class="line">ahbs := metrics.NewHeartbeatService(node.Host(), &amp;config.HeartbeatConfig&#123;</span><br><span class="line">BeatTarget:      alertTarget,</span><br><span class="line">BeatPeriod:      &quot;10s&quot;,</span><br><span class="line">ReconnectPeriod: &quot;10s&quot;,</span><br><span class="line">Nickname:        node.Repo.Config().Heartbeat.Nickname,</span><br><span class="line">&#125;, node.ChainReader.Head, metrics.WithMinerAddressGetter(mag))</span><br><span class="line">go ahbs.Start(ctx)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第五章filecoin源码分析之协议层心跳协议。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析四：filecoin源码顶层架构分析</title>
    <link href="https://learnblockchain.cn/2019/02/28/filecoin-code-analysis-4/"/>
    <id>https://learnblockchain.cn/2019/02/28/filecoin-code-analysis-4/</id>
    <published>2019-02-28T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:34.059Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第四章filecoin源码顶层架构分析。</p><a id="more"></a><h2 id="题外话——关于竞争力"><a href="#题外话——关于竞争力" class="headerlink" title="题外话——关于竞争力"></a>题外话——关于竞争力<a name="题外话关于竞争力"></a></h2><blockquote><p>网络技术的高速发展带领我们进入了知识大爆炸、技术快速跃迁的时代，5G已经开始走向商业落地，网络速率的再次跃迁给我们带来了无限的想象空间，全息投影、即时翻译、远程医疗、人工智能等等会更加成熟落地？路由器在个人家庭中的角色可能会发生变化？IOT万物互联的时代将会真正到来？区块链的TPS提升？高速网络下的云应用、大数据会出现什么新的玩法？</p><p>笔者想说的是，整个世界都在急速变化，在波涛汹涌的竞争浪潮之中，如何保持自己的竞争力。我偶尔会问同事、朋友，你与刚毕业的大学生相比，优势在哪里？</p></blockquote><p>笔者认为如下两点才是在这个高速时代的真正竞争力，个人如此，公司团队亦如此。</p><ul><li>高效的学习能力</li><li>高维的思维能力</li></ul><p>以上为笔者观点，也欢迎大家探讨。在分析具体架构之前，笔者在4.2.1中分享自己的分析思路，我认为这也许也值得分享。</p><h2 id="filecoin源码顶层架构概览及分析思路"><a href="#filecoin源码顶层架构概览及分析思路" class="headerlink" title="filecoin源码顶层架构概览及分析思路"></a>filecoin源码顶层架构概览及分析思路<a name="filecoin源码顶层架构概览及分析思路"></a></h2><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路<a name="分析思路"></a></h3><ul><li><p>终于进入到源码分析环节了，其实回顾一下前面三章，filecoin的概念及通用语言可以总结为filecoin的本质，分析源码的过程归根接底还是理解设计者的意图，第三章filecoin开发网络的实战使用对于笔者来说也是为了更清晰地对filecoin本质及设计意图进行深入理解。</p></li><li><p>分析总思路为：抓住本质分析，理解设计者意图</p><ul><li>自上而下逐层分析，从抽象到具体</li><li>自下而上反向总结，从具体到抽象</li></ul></li><li><p>分析过程分为三大步骤</p><ul><li>第一步，理解filecoin本质及设计目的（前面三章）</li><li>第二步，理解filecoin的顶层架构设计（本章），反向加深对filecoin本质的理解</li><li>第三步，各层的具体源码分析（后面章节），反向加深对filecoin本质的理解</li></ul></li></ul><blockquote><p>详细参见下图</p></blockquote><p><img src="/images/filecoin_arch.png" alt=""></p><ul><li>在顶层源码中分为go-filecon和rust-fil-proofs。分别为主框架和存储证明部分，本文主要分析go-filecoin源码的顶层框架。</li></ul><h3 id="filecoin顶层架构概览"><a href="#filecoin顶层架构概览" class="headerlink" title="filecoin顶层架构概览"></a>filecoin顶层架构概览<a name="filecoin顶层架构概览"></a></h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">           ┌─────────────────────────────────────┐</span><br><span class="line">           │                                     │</span><br><span class="line">  Network  │  network (gossipsub, bitswap, etc.) │                 | | \/</span><br><span class="line">           │                                     │                 |_| /\</span><br><span class="line">           └─────▲────────────▲────────────▲─────┘</span><br><span class="line">                 │            │            │           ┌────────────────────────────┐</span><br><span class="line">           ┌─────▼────┐ ┌─────▼─────┐ ┌────▼─────┐     │                            │</span><br><span class="line">           │          │ │           │ │          │     │    Commands / REST API     │</span><br><span class="line">Protocols  │ Storage  │ │  Mining   │ │Retrieval │     │                            │</span><br><span class="line">           │ Protocol │ │ Protocol  │ │ Protocol │     └────────────────────────────┘</span><br><span class="line">           │          │ │           │ │          │                    │</span><br><span class="line">           └──────────┘ └───────────┘ └──────────┘                    │</span><br><span class="line">                 │            │             │                         │</span><br><span class="line">                 └──────────┬─┴─────────────┴───────────┐             │</span><br><span class="line">                            ▼                           ▼             ▼</span><br><span class="line">           ┌────────────────────────────────┐ ┌───────────────────┬─────────────────┐</span><br><span class="line"> Internal  │            Core API            │ │     Porcelain     │     Plumbing    │</span><br><span class="line">      API  │                                │ ├───────────────────┘                 │</span><br><span class="line">           └────────────────────────────────┘ └─────────────────────────────────────┘</span><br><span class="line">                            │                                    │</span><br><span class="line">                  ┌─────────┴────┬──────────────┬──────────────┬─┴────────────┐</span><br><span class="line">                  ▼              ▼              ▼              ▼              ▼</span><br><span class="line">           ┌────────────┐ ┌────────────┐ ┌────────────┐ ┌────────────┐ ┌────────────┐</span><br><span class="line">           │            │ │            │ │            │ │            │ │            │</span><br><span class="line">     Core  │  Message   │ │   Chain    │ │ Processor  │ │   Block    │ │   Wallet   │</span><br><span class="line">           │    Pool    │ │   Store    │ │            │ │  Service   │ │            │</span><br><span class="line">           │            │ │            │ │            │ │            │ │            │</span><br><span class="line">           └────────────┘ └────────────┘ └────────────┘ └────────────┘ └────────────┘</span><br></pre></td></tr></table></figure><ul><li>官方给出的如上架构概览图是小于实际源码的，但是不影响理解。</li><li>官方的spec项目中，有较多文档说明已经滞后于源码，其引用的源码有些已经从go-filecoin源码中消失了，想深入分析的朋友建议可以结合源码和文档同步进行看。</li><li>本文后面的章节中，只会简述各个层的设计目的，每一层的具体源码分析，将放到后面章节分享给大家。</li></ul><h4 id="IPFS与filecoin在技术架构层面的关系"><a href="#IPFS与filecoin在技术架构层面的关系" class="headerlink" title="IPFS与filecoin在技术架构层面的关系"></a>IPFS与filecoin在技术架构层面的关系</h4><p><img src="/images/ipfsandfilecoin.png" alt=""></p><ul><li>IPFS与filecoin同样采用IPLD结构，数据结构是互通的，简而言之，在IPFS之上存储的数据，filecoin可以读取。filecoin存储的未密封数据，IPFS也是可以读取的。</li><li>IPFS与filecoin网络部分均复用libp2p部分。</li><li>filecoin复用了大量IPFS组件，比如CID、IPLD、bitswap等等。</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层<a name="网络层"></a></h2><ul><li><p>网络层的实现依赖协议实验室的libp2p项目，如果不熟悉的可以先简单记住如下要点，后面笔者考虑视情况补充IPFS/libp2p的相关分享。</p><ul><li><p>libp2p的网络层实现了节点之间的联通性问题，包括节点发现、NAT穿透、pubsub、relay等。</p></li><li><p>libp2p的路由层的主要目的，包括节点路由、内容路由、DHT键值存储。</p></li><li><p>multistream需要理解，filecoin的协议层之协议定义就是基于mulitistream的。</p></li></ul></li><li><p>filecoin网络层的目的</p><ul><li>处理请求信息、回复响应信息，包括存储订单处理、检索请求处理、区块同步等等。</li></ul></li></ul><h2 id="协议层"><a href="#协议层" class="headerlink" title="协议层"></a>协议层<a name="协议层"></a></h2><p>协议层主要处理应用级的逻辑，状态切换等，具体会通过api层调用具体的core服务进行处理。</p><h3 id="hello握手协议"><a href="#hello握手协议" class="headerlink" title="hello握手协议"></a>hello握手协议</h3><ul><li>协议名称： /fil/hello/1.0.0</li><li>目的：<ul><li>本节点上线，向其他节点发起hello握手请求，进而进行区块同步。</li><li>响应其他新上线的节点hello握手请求，触发其进行区块同步。</li></ul></li></ul><h3 id="存储协议"><a href="#存储协议" class="headerlink" title="存储协议"></a>存储协议</h3><h4 id="存储矿工"><a href="#存储矿工" class="headerlink" title="存储矿工"></a>存储矿工</h4><ul><li>协议名称：/fil/storage/mk/1.0.0、 /fil/storage/qry/1.0.0</li><li>目的：<ul><li>接受客户发起的订单交易请求、查询订单请求，会提交对应处理状态到区块链上（包括清单处理成功或失败；密封成功或者失败等等）。</li><li>更新本地的密封或者订单状态。</li></ul></li></ul><h4 id="存储客户"><a href="#存储客户" class="headerlink" title="存储客户"></a>存储客户</h4><ul><li>采用上述的/fil/storage/mk/1.0.0、 /fil/storage/qry/1.0.0协议，建立multistream，向矿工发起交易或者查询交易状态。</li></ul><h3 id="检索协议"><a href="#检索协议" class="headerlink" title="检索协议"></a>检索协议</h3><h4 id="检索矿工"><a href="#检索矿工" class="headerlink" title="检索矿工"></a>检索矿工</h4><ul><li>协议名称：/fil/retrieval/free/0.0.0</li><li><p>目的：</p><ul><li><p>接受客户的检索请求，并响应处理</p></li><li><p>注意：目前仅仅支持free检索，白皮书所描述的完整检索功能尚未实现。</p></li></ul></li></ul><h4 id="检索客户"><a href="#检索客户" class="headerlink" title="检索客户"></a>检索客户</h4><ul><li>采用上述的/fil/retrieval/free/0.0.0协议，建立multistream，向矿工发起检索请求。</li></ul><h3 id="心跳协议"><a href="#心跳协议" class="headerlink" title="心跳协议"></a>心跳协议</h3><ul><li>协议名称：fil/heartbeat/1.0.0</li><li>目的：<ul><li>启动之后向指定节点发起心跳。</li><li>如前面3.2.1章节中的设置Nick Name，以及激活极点，都属于心跳协议实现的。</li></ul></li></ul><h2 id="REST-CMD"><a href="#REST-CMD" class="headerlink" title="REST/CMD"></a>REST/CMD<a name="restcmd"></a></h2><ul><li>这个应该不用多解释，提供ｃｍｄ或者ＲＥＳＴ接口供用户操作具体节点。第三章中的开发网络使用基本都是使用的CMD方式。</li></ul><h2 id="内部api层"><a href="#内部api层" class="headerlink" title="内部api层"></a>内部api层<a name="内部api层"></a></h2><h3 id="node对象"><a href="#node对象" class="headerlink" title="node对象"></a>node对象</h3><ul><li><p>filecoin的node节点是一个上帝对象，从下面Node的结构可以看出，基本贯穿了filecoin的整个业务。</p></li><li><p>为了解决耦合性问题，尤其是后续轻节点的实现，官方已经开始将原有的api包，往plumbing包以及porcelain包迁移，这样做的目的是让系统具备更好的解耦性，以满足更灵活的需求。</p></li><li><p>plumbing和 porcelain模式也是借鉴git的思维。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">▼+Node : struct</span><br><span class="line">    [fields]</span><br><span class="line">   +AddNewlyMinedBlock : newBlockFunc</span><br><span class="line">   +BlockSub : ps.Subscription</span><br><span class="line">   +Blockstore : bstore.Blockstore</span><br><span class="line">   +Bootstrapper : *filnet.Bootstrapper</span><br><span class="line">   +ChainReader : chain.ReadStore</span><br><span class="line">   +Consensus : consensus.Protocol</span><br><span class="line">   +Exchange : exchange.Interface</span><br><span class="line">   +HeaviestTipSetCh : chan interface&#123;&#125;</span><br><span class="line">   +HeaviestTipSetHandled : func()</span><br><span class="line">   +HelloSvc : *hello.Handler</span><br><span class="line">   +MessageSub : ps.Subscription</span><br><span class="line">   +MiningScheduler : mining.Scheduler</span><br><span class="line">   +MsgPool : *core.MessagePool</span><br><span class="line">   +OfflineMode : bool</span><br><span class="line">   +OnlineStore : *hamt.CborIpldStore</span><br><span class="line">   +PeerHost : host.Host</span><br><span class="line">   +Ping : *ping.PingService</span><br><span class="line">   +PorcelainAPI : *porcelain.API</span><br><span class="line">   +PowerTable : consensus.PowerTableView</span><br><span class="line">   +Repo : repo.Repo</span><br><span class="line">   +RetrievalClient : *retrieval.Client</span><br><span class="line">   +RetrievalMiner : *retrieval.Miner</span><br><span class="line">   +Router : routing.IpfsRouting</span><br><span class="line">   +StorageMiner : *storage.Miner</span><br><span class="line">   +StorageMinerClient : *storage.Client</span><br><span class="line">   +Syncer : chain.Syncer</span><br><span class="line">   +Wallet : *wallet.Wallet</span><br><span class="line">   -blockTime : time.Duration</span><br><span class="line">   -blockservice : bserv.BlockService</span><br><span class="line">   -cancelMining : context.CancelFunc</span><br><span class="line">   -cancelSubscriptionsCtx : context.CancelFunc</span><br><span class="line">   -cborStore : *hamt.CborIpldStore</span><br><span class="line">   -host : host.Host</span><br><span class="line">   -lookup : lookup.PeerLookupService</span><br><span class="line">   -mining</span><br><span class="line">   -miningCtx : context.Context</span><br><span class="line">   -miningDoneWg : *sync.WaitGroup</span><br><span class="line">   -sectorBuilder : sectorbuilder.SectorBuilder</span><br><span class="line">    [methods]</span><br><span class="line">   +BlockHeight() : *types.BlockHeight, error</span><br><span class="line">   +BlockService() : bserv.BlockService</span><br><span class="line">   +CborStore() : *hamt.CborIpldStore</span><br><span class="line">   +ChainReadStore() : chain.ReadStore</span><br><span class="line">   +CreateMiner(ctx context.Context, accountAddr address.Address, gasPrice types.AttoFIL, gasLimit types.GasUnits, pledge uint64, pid libp2ppeer.ID, collateral *types.AttoFIL) : *address.Address, error</span><br><span class="line">   +GetBlockTime() : time.Duration</span><br><span class="line">   +Host() : host.Host</span><br><span class="line">   +Lookup() : lookup.PeerLookupService</span><br><span class="line">   +MiningSignerAddress() : address.Address</span><br><span class="line">   +MiningTimes() : time.Duration, time.Duration</span><br><span class="line">   +NewAddress() : address.Address, error</span><br><span class="line">   +SectorBuilder() : sectorbuilder.SectorBuilder</span><br><span class="line">   +SetBlockTime(blockTime time.Duration)</span><br><span class="line">   +Start(ctx context.Context) : error</span><br><span class="line">   +StartMining(ctx context.Context) : error</span><br><span class="line">   +Stop(ctx context.Context)</span><br><span class="line">   +StopMining(ctx context.Context)</span><br><span class="line">   -addNewlyMinedBlock(ctx context.Context, b *types.Block)</span><br><span class="line">   -cancelSubscriptions()</span><br><span class="line">   -getLastUsedSectorID(ctx context.Context, minerAddr address.Address) : uint64, error</span><br><span class="line">   -getMinerActorPubKey() : []byte, error</span><br><span class="line">   -handleNewHeaviestTipSet(ctx context.Context, head types.TipSet)</span><br><span class="line">   -handleNewMiningOutput(miningOutCh chan mining.Output)</span><br><span class="line">   -handleSubscription(ctx context.Context, f pubSubProcessorFunc, fname string, s ps.Subscription, sname string)</span><br><span class="line">   -isMining() : bool</span><br><span class="line">   -miningAddress() : address.Address, error</span><br><span class="line">   -miningOwnerAddress(ctx context.Context, miningAddr address.Address) : address.Address, error</span><br><span class="line">   -saveMinerConfig(minerAddr address.Address, signerAddr address.Address) : error</span><br><span class="line">   -setIsMining(isMining bool)</span><br><span class="line">   -setupMining(ctx context.Context) : error</span><br><span class="line">    [functions]</span><br><span class="line">   +New(ctx context.Context, opts ...ConfigOpt) : *Node, error</span><br></pre></td></tr></table></figure><h3 id="api包"><a href="#api包" class="headerlink" title="api包"></a>api包</h3><ul><li>这基本上是早期实现的api接口，对应4.2.2.1中的Core API，严重依赖于Node，耦合性大。现在在逐步迁移。感兴趣可以参照如下源码逐层深入去看。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package: api</span><br><span class="line">location: api/api.go</span><br><span class="line"></span><br><span class="line">type API interface &#123;</span><br><span class="line">    Actor() Actor</span><br><span class="line">    Address() Address</span><br><span class="line">    Client() Client</span><br><span class="line">    Daemon() Daemon</span><br><span class="line">    Dag() Dag</span><br><span class="line">    ID() ID</span><br><span class="line">    Log() Log</span><br><span class="line">    Miner() Miner</span><br><span class="line">    Mining() Mining</span><br><span class="line">    Paych() Paych</span><br><span class="line">    Ping() Ping</span><br><span class="line">    RetrievalClient() RetrievalClient</span><br><span class="line">    Swarm() Swarm</span><br><span class="line">    Version() Version</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="plumbing和porcelain包"><a href="#plumbing和porcelain包" class="headerlink" title="plumbing和porcelain包"></a>plumbing和porcelain包</h3><ul><li>plumbing api简而言之，是实现底层的公共api，其不依赖于Node的实现。</li><li>而porcelain api则是在plumbing api之上，更偏应用级的调用，同样不依赖于Node实现。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源码分别参见go-filecoin目录下，./plumbing和./porcelain。</span><br></pre></td></tr></table></figure><h2 id="core服务层"><a href="#core服务层" class="headerlink" title="core服务层"></a>core服务层<a name="core服务层"></a></h2><blockquote><p>关于核心业务调度以及业务持久化的底层处理基本都在这一层，包含但不限于如下服务。</p></blockquote><h3 id="Message-pool"><a href="#Message-pool" class="headerlink" title="Message pool"></a>Message pool</h3><blockquote><p>消息池主要保存还未上链的消息。</p></blockquote><h3 id="Chain-store"><a href="#Chain-store" class="headerlink" title="Chain store"></a>Chain store</h3><blockquote><p>链存储主要持久化链信息，注意同步区块的逻辑是在协议层的hello协议所出发的。</p></blockquote><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><blockquote><p>处理事务消息如何驱动状态转换。</p></blockquote><h3 id="Block-service"><a href="#Block-service" class="headerlink" title="Block service"></a>Block service</h3><blockquote><p>负责IPLD数据的内容寻址，包括区块链等。</p></blockquote><h3 id="Wallet"><a href="#Wallet" class="headerlink" title="Wallet"></a>Wallet</h3><blockquote><p>钱包管理。</p></blockquote><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第四章filecoin源码顶层架构分析。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析三：filecoin开发网络使用</title>
    <link href="https://learnblockchain.cn/2019/02/22/filecoin-code-analysis-3/"/>
    <id>https://learnblockchain.cn/2019/02/22/filecoin-code-analysis-3/</id>
    <published>2019-02-22T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:27.939Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/201903/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第三章filecoin开发网络使用。</p><a id="more"></a><h2 id="filecoin开发网络使用"><a href="#filecoin开发网络使用" class="headerlink" title="filecoin开发网络使用"></a>filecoin开发网络使用<a name="filecoin开发网络使用"></a></h2><h3 id="辅助资源"><a href="#辅助资源" class="headerlink" title="辅助资源"></a>辅助资源</h3><ul><li><p>Filecoin状态:  <a href="https://stats.kittyhawk.wtf" target="_blank" rel="noopener">https://stats.kittyhawk.wtf</a></p><ul><li>网络<ul><li>存储实时价格 FIL/GB/Month</li><li>当前存储容量 GB</li><li>当前网络利用率</li><li>检索平均价格</li><li>激活节点以及分布图</li><li>存储平均价格曲线</li><li>best tipset</li></ul></li><li>存储矿工<ul><li>存储矿工数量变化曲线</li><li>存储矿工共识结果</li><li>近30天的矿工top图</li></ul></li><li>检索矿工<ul><li>平均检索价格</li><li>平均检索时间</li><li>平均检索容量</li></ul></li><li>FIL指数<ul><li>流通FIL及抵押FIL变化图</li><li>FIL地址总数</li><li>FIL总抵押数及对应存储空间</li><li>FIL总数上升曲线图</li><li>FIL区块奖励下降曲线图</li></ul></li></ul></li><li><p>Filecoin区块浏览器：  <a href="http://user.kittyhawk.wtf:8000" target="_blank" rel="noopener">http://user.kittyhawk.wtf:8000</a></p><ul><li>Chain信息</li><li>BestBlock信息</li><li>Actor合约信息</li></ul></li><li><p>获取FIL用于抵押或支付：<a href="http://user.kittyhawk.wtf:9797" target="_blank" rel="noopener">http://user.kittyhawk.wtf:9797</a></p><ul><li>获取mock FIL代币</li></ul></li><li><p>Dashboard: <a href="http://user.kittyhawk.wtf:8010" target="_blank" rel="noopener">http://user.kittyhawk.wtf:8010</a></p><ul><li>Network概览，最新区块信息</li><li>区块浏览器链接</li></ul></li><li><p>Genesis File: <a href="http://user.kittyhawk.wtf:8020/genesis.car" target="_blank" rel="noopener">http://user.kittyhawk.wtf:8020/genesis.car</a></p><ul><li>创始文件，用于初始化filecoin资源</li></ul></li><li><p>Prometheus Endpoint: <a href="http://user.kittyhawk.wtf:9082/metrics" target="_blank" rel="noopener">http://user.kittyhawk.wtf:9082/metrics</a></p><ul><li>一些技术指标，比如内存、进程、线程等</li></ul></li><li><p>Connected Nodes PeerID’s: <a href="http://user.kittyhawk.wtf:9082/nodes" target="_blank" rel="noopener">http://user.kittyhawk.wtf:9082/nodes</a></p><ul><li>连接的节点信息</li></ul></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用<a name="使用"></a></h3><h4 id="接入filecoin开发网络"><a href="#接入filecoin开发网络" class="headerlink" title="接入filecoin开发网络"></a>接入filecoin开发网络<a name="接入filecoin开发网络"></a></h4><ul><li>初始化filecoin资源目录</li></ul><blockquote><p>如果之前有运行过filecoin，想重新开始，需要删除filecoin资源，同时重新初始化是需要重新花时间同步开发网区块信息的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.filecoin</span><br></pre></td></tr></table></figure><blockquote><p>初始化资源目录，使用–devnet-user表示连接至开发网</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:Downloads waynewyang$ go-filecoin init --devnet-user --genesisfile=http://user.kittyhawk.wtf:8020/genesis.car</span><br><span class="line">initializing filecoin node at ~/.filecoin</span><br><span class="line">waynewyang:Downloads waynewyang$</span><br></pre></td></tr></table></figure><ul><li><p>启动filecoin进程，接入开发网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin daemon</span><br><span class="line"></span><br><span class="line">//如果开发者，需要接入nightly devnet，请设置环境变量后启动filecoin</span><br><span class="line">env FIL_USE_SMALL_SECTORS=true go-filecoin daemon</span><br></pre></td></tr></table></figure></li><li><p>检查连接性</p></li></ul><blockquote><p>go-filecoin swarm peers 查看已经连接的节点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin swarm peers</span><br><span class="line">/ip4/115.238.154.84/tcp/19109/ipfs/Qmb6ZYi7GLFAje3UekGZ2LZymck7RVHKSKb1bhPzzPTQkm</span><br><span class="line">/ip4/115.238.154.84/tcp/41187/ipfs/QmZ9UHdU2fwDN7emWW8AeaUdkF9fT7RwJrnbbdcQFUq9X6</span><br><span class="line">/ip4/123.134.67.81/tcp/6000/ipfs/QmccrEQsauwge4BZQeN1jBtFyd7dnTi4pSDvkikMWaFccw</span><br><span class="line">/ip4/123.134.67.82/tcp/6000/ipfs/QmWuA1AW4qDqztDrwo2pBgT2au67BJbGtEzWRufbc8isgn</span><br><span class="line">/ip4/123.134.67.83/tcp/6000/ipfs/QmbPCabGcngs3bCgMK8dC3w9pjoyPd1NFyDhbkgLyT2eJ7</span><br><span class="line">/ip4/123.134.67.85/tcp/6000/ipfs/QmUqSSZrwfSUU3vfw7D1UyKaLvEv1Ykcvx3ntvSXWaA7kj</span><br><span class="line">/ip4/123.134.67.86/tcp/6000/ipfs/QmPrz2z764AVaHivM7iX2JqRw5EdE3jcZTrjwVxS4VukyK</span><br><span class="line">/ip4/123.134.67.87/tcp/6000/ipfs/QmTxVFq3u7qPxsXFQdoyqPrdh6meW6JBGkSJ8HJXAiMUfh</span><br><span class="line">/ip4/123.134.67.88/tcp/6000/ipfs/QmXAVRPYu57XDwJHszn9U9x1KtTwPsJBaS1mTdNZzAQVyQ</span><br><span class="line">/ip4/123.134.67.89/tcp/6000/ipfs/Qmc5umx9R3bpD5VxvUmfyLoDz5wtVT43p5xjSEmTe26qTD</span><br></pre></td></tr></table></figure><blockquote><p>go-filecoin ping peerID 确认连通性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin ping QmW4Z8p7FCspLV1FeTRW6uCNApUXqkm8xYYw4yuBnqBGeB</span><br><span class="line">PING &lt;peer.ID Qm*nqBGeB&gt;</span><br><span class="line">Pong received: time=245.12 ms</span><br><span class="line">Pong received: time=245.61 ms</span><br><span class="line">Pong received: time=251.98 ms</span><br><span class="line">Pong received: time=245.69 ms</span><br><span class="line">Pong received: time=255.64 ms</span><br></pre></td></tr></table></figure><ul><li><p>给你的filecoin Node设置昵称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin config heartbeat.nickname &quot;wwwarsyuncom&quot;</span><br><span class="line">&quot;wwwarsyuncom&quot;</span><br><span class="line">waynewyang:filecoin waynewyang$ go-filecoin config heartbeat.nickname</span><br><span class="line">&quot;wwwarsyuncom&quot;</span><br></pre></td></tr></table></figure></li><li><p>激活节点</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin config heartbeat.beatTarget &quot;/dns4/stats-infra.kittyhawk.wtf/tcp/8080/ipfs/QmUWmZnpZb6xFryNDeNU7KcJ1Af5oHy7fB9npU67sseEjR&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在 <a href="https://stats.kittyhawk.wtf/" target="_blank" rel="noopener">https://stats.kittyhawk.wtf/</a> 查看filecoin网络，节点已经激活</p></blockquote><p><img src="/images/active.png" alt=""></p><h4 id="获取Mock-FIL用于测试"><a href="#获取Mock-FIL用于测试" class="headerlink" title="获取Mock FIL用于测试"></a>获取Mock FIL用于测试<a name="从faucet中获取mock代币"></a></h4><blockquote><p>FIL用于矿工抵押；或者作为客户进行交易需要</p></blockquote><ul><li>注意：开发网目前运行的都是全节点，获取mock FIL需要建立在本地区块数据同步完成的基础上进行，必须同步完区块之后才能生效，根据个人机器配置情况，这需要较长一段时间。</li><li>go-filecoin message wait ${MESSAGE_CID}  本质上是转账交易，wiki上说明的是等待30s，但是这是在本地区块数据同步完成的基础上才行的。</li><li>笔者已提交建议给官方，在wiki上更为清晰地表述。</li></ul><p><img src="/images/wikiissue1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin wallet addrs ls</span><br><span class="line">fcq09qtmrxgq5sdr95gs93tx79u9uymdwfdsaphpa</span><br><span class="line"></span><br><span class="line">waynewyang:filecoin waynewyang$ export WALLET_ADDR=`go-filecoin wallet addrs ls`</span><br><span class="line"></span><br><span class="line">waynewyang:filecoin waynewyang$ MESSAGE_CID=`curl -X POST -F &quot;target=$&#123;WALLET_ADDR&#125;&quot; &quot;http://user.kittyhawk.wtf:9797/tap&quot; | cut -d&quot; &quot; -f4`</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   232  100    50  100   182     48    177  0:00:01  0:00:01 --:--:--   177</span><br><span class="line"></span><br><span class="line">waynewyang:go-filecoin waynewyang$ go-filecoin message wait $&#123;MESSAGE_CID&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;meteredMessage&quot;: &#123;</span><br><span class="line">&quot;message&quot;: &#123;</span><br><span class="line">&quot;to&quot;: &quot;fcqm0u932ja5thlsy4dgpz5urlapk8qhtd0clqv5e&quot;,</span><br><span class="line">&quot;from&quot;: &quot;fcq09sqhrd4gls86muuenzvqdc37mzscagapjveal&quot;,</span><br><span class="line">&quot;nonce&quot;: &quot;rQQ=&quot;,</span><br><span class="line">&quot;value&quot;: &quot;1000&quot;,</span><br><span class="line">&quot;method&quot;: &quot;&quot;,</span><br><span class="line">&quot;params&quot;: null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;gasPrice&quot;: &quot;0&quot;,</span><br><span class="line">&quot;gasLimit&quot;: &quot;AA==&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;signature&quot;: &quot;WKA+eRY7XCQlSmallzoFu8Tps7NZ2AOAKLRFo21rTERFYJqXJT2qEWZ8sFvm6ZShR5syb7RSAJnDp4Am2Vzp0gE=&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;exitCode&quot;: 0,</span><br><span class="line">&quot;return&quot;: null,</span><br><span class="line">&quot;gasAttoFIL&quot;: &quot;0&quot;</span><br><span class="line">&#125;</span><br><span class="line">waynewyang:filecoin waynewyang$ go-filecoin wallet balance  fcq09qtmrxgq5sdr95gs93tx79u9uymdwfdsaphpa</span><br><span class="line">1000</span><br><span class="line">waynewyang:filecoin waynewyang$ go-filecoin wallet balance  $&#123;WALLET_ADDR&#125;</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><h4 id="矿工操作"><a href="#矿工操作" class="headerlink" title="矿工操作"></a>矿工操作<a name="矿工操作"></a></h4><h4 id="存储矿工"><a href="#存储矿工" class="headerlink" title="存储矿工"></a>存储矿工<a name="存储矿工"></a></h4><ul><li>创建存储矿工示例，需要等待1分钟左右<ul><li>抵押10个扇区的存储空间（当前默认每个扇区256MiB）</li><li>支付100个FIL为担保</li><li>gas价格为0</li><li>限制gas消耗最大为1000个FIL</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin miner create 10 100 --price=0 --limit=1000 --peerid `go-filecoin id | jq -r &apos;.ID&apos;`</span><br><span class="line">fcqjge872spqrgtm8dhlndjgfhhuxzx0y3ujvxxsl //所返回的就是矿工地址minerAddress</span><br></pre></td></tr></table></figure><ul><li><p>启动挖矿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:filecoin waynewyang$ go-filecoin mining start</span><br><span class="line">Started mining</span><br></pre></td></tr></table></figure></li><li><p>收益之一: 启动挖矿之后就可以参与挖区块奖励</p><blockquote><p>查询区块头</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:go-filecoin waynewyang$ go-filecoin chain head</span><br><span class="line">[&#123;&quot;/&quot;:&quot;zDPWYqFD2mBqLx7bwQNdeVoMxj6SC5HxzorZAoXpT6xjaythnENw&quot;&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>查询具体区块信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin show block &lt;blockID&gt;</span><br><span class="line"></span><br><span class="line">waynewyang:go-filecoin waynewyang$ go-filecoin show block zDPWYqFD2mBqLx7bwQNdeVoMxj6SC5HxzorZAoXpT6xjaythnENw</span><br><span class="line">Block Details</span><br><span class="line">Miner:  fcq0y72meekgwnvchwml0uzx759q25nk0rqc47ret</span><br><span class="line">Weight: 293567.552</span><br><span class="line">Height: 10787</span><br><span class="line">Nonce:  0</span><br></pre></td></tr></table></figure><ul><li>收益之二：创建报价单ask</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1) 获取矿工地址</span><br><span class="line">export MINER_ADDR=`go-filecoin config mining.minerAddress | tr -d \&quot;` </span><br><span class="line"></span><br><span class="line">2) 设置矿机Owner</span><br><span class="line">export MINER_OWNER_ADDR=`go-filecoin miner owner $MINER_ADDR`</span><br><span class="line"></span><br><span class="line">3) 创建报价单，价格0.000000001 FIL/byte/block, 交易费0，gas限制1000，提供2880个block空间存储</span><br><span class="line"></span><br><span class="line">go-filecoin miner set-price --from=$MINER_OWNER_ADDR --miner=$MINER_ADDR --price=0 --limit=1000 0.000000001 2880 # output: CID of the ask</span><br><span class="line"></span><br><span class="line">发布报价单，需要打包进去区块</span><br><span class="line"></span><br><span class="line">waynewyang:filecoin waynewyang$ go-filecoin miner set-price --from=$MINER_OWNER_ADDR --miner=$MINER_ADDR --price=0 --limit=1000 0.000000001 15315</span><br><span class="line">Set price for miner fcqjge872spqrgtm8dhlndjgfhhuxzx0y3ujvxxsl to 0.000000001.</span><br><span class="line">Published ask, cid: zDPWYqFCxL3VW3xzmHhCBqPTvhoQa53pn6DzV3uY23jNL76za1Vt.</span><br><span class="line">Ask confirmed on chain in block: zDPWYqFD7wjnj74sdB9HqupDmWmpPPEvygB14Pbo6rQC7ho2687D.</span><br><span class="line"></span><br><span class="line">4) 查询区块信息（第三步中是zDPWYqFD7wjnj74sdB9HqupDmWmpPPEvygB14Pbo6rQC7ho2687D）可以找到对应报价单信息</span><br><span class="line"></span><br><span class="line">waynewyang:filecoin waynewyang$ go-filecoin show block zDPWYqFD7wjnj74sdB9HqupDmWmpPPEvygB14Pbo6rQC7ho2687D --enc=json</span><br><span class="line">&#123;&quot;miner&quot;:&quot;fcqnam6n2qml2eyngws25srzvhcdf0t8gcgrsvnrk&quot;,&quot;ticket&quot;:&quot;AM0p5IC9ph+o9dTwd/MXYdeOJW25PfDwhTgonNRkSP4=&quot;,&quot;parents&quot;:[&#123;&quot;/&quot;:&quot;zDPWYqFCwNWHJXdeXcjx7ipUvRKFq5WhLbtSm6ESuNufkLuGiAgW&quot;&#125;],&quot;parentWeight&quot;:&quot;kujBrQE=&quot;,&quot;height&quot;:&quot;2Hc=&quot;,&quot;nonce&quot;:&quot;AA==&quot;,&quot;messages&quot;:[&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqp606qfk5gwmq6ac24g4mhv3cr8zzf67vqkpulh&quot;,&quot;from&quot;:&quot;fcqr89lj0lvduj475zw002j6q5yrl30ks7uep2p5e&quot;,&quot;nonce&quot;:&quot;Ag==&quot;,&quot;value&quot;:&quot;215.6046624&quot;,&quot;method&quot;:&quot;createChannel&quot;,&quot;params&quot;:&quot;glYAABXMs4C0hXqcW94YGyVKxii6SLQhQ6HoAg==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;rAI=&quot;&#125;,&quot;signature&quot;:&quot;vHzwO73TvM8MW1FKg8Qgfy/IP+wfJIQkEK0ExBB75gBbPMhv6GiU4aBq1T2Gb2OeMfrch8Zg3EFOJd0uUJltwAE=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqafmqgvzkzpvc6wjxecm7gsweuawjv8t6falk6r&quot;,&quot;from&quot;:&quot;fcqr89lj0lvduj475zw002j6q5yrl30ks7uep2p5e&quot;,&quot;nonce&quot;:&quot;Aw==&quot;,&quot;value&quot;:&quot;100&quot;,&quot;method&quot;:&quot;createMiner&quot;,&quot;params&quot;:&quot;g0EKWEEEiA8ArEoyzhjWwijpTWYqDsOFfwxa2F0pUfOyRI/6yY28OD4QHcwUdb3a9omX9DNxVzdS2a8pWgiLNowe9wYVcFgiEiD3rKfg/NyDnrLF9IGxfp6U72jZxuniXlPcv5SG5OZHrA==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;6Ac=&quot;&#125;,&quot;signature&quot;:&quot;/X/87zil8InOeLeQ6kqkqnpg7mP/e5jMaaVS4LRMIdYN84HTbABBpvt6quRqVQsadJnqOW7mn+6NA+2d9FDjPAA=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqp606qfk5gwmq6ac24g4mhv3cr8zzf67vqkpulh&quot;,&quot;from&quot;:&quot;fcqmqr5f2a5qnwnvftpuzd6sjfy5tcq5dd0k24h85&quot;,&quot;nonce&quot;:&quot;Ug==&quot;,&quot;value&quot;:&quot;0.008596&quot;,&quot;method&quot;:&quot;createChannel&quot;,&quot;params&quot;:&quot;glYAAIVV3axUhfe7OGwwSH/IIONRcbinQ/OWAQ==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;rAI=&quot;&#125;,&quot;signature&quot;:&quot;dxhSaVRvFBtdrbnEByza7a5JqLzm6n6rVZYGuFN6zegCTMDKbGGh++EvVmWo0WSbdcUo2vB/jFTgqzATh9+1NQA=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqugc6nql2eqglfwq0dw7ep7l9a07jacqgstely7&quot;,&quot;from&quot;:&quot;fcq0nmdcq7updgwc3uh2lz2rnjms7gprdggcvxjqj&quot;,&quot;nonce&quot;:&quot;BA==&quot;,&quot;value&quot;:null,&quot;method&quot;:&quot;commitSector&quot;,&quot;params&quot;:&quot;hUECWCCFzRGqHyJ3VWk3GueHzfkcWF218hOqRGtLxsJ0oJ3pXVgg6qrxCGo6SSjyUSbJWVKPKGaY/wrymC21t5LSScCNpQBYIOeZkdzp7lPt8Fh/Sdl9YqJ8BCaJ7etWEnDnLzRnV/geWQGAlTMp95t1Hh61eFBmzy6Ex/Ee1cso7Cethz+Z2EHCfhi5UzOMeLqeA/Wfypcnrw15mF4OrYR8648RXx6jp8svbgZ6Jg9fP/q0RukszZ/SD9f0pCMg2N/xt5hVIPG7jowSCfkj//CpdRj1GRPLzXvzyWmW4SgKR4lNpJNnmuiXSe8nYLsZgY2v8xy4NB448e/slxh7D4NQPanCoN3WO10oBR42ZxeCZY6stq+JfwucGr5OajgXSK2rGwz/Sj+GYpMbtgpfxSd4Z+jZ6mnoY03NaIHvwnDKchRz797lFL3so6AQRRnctN3Pl7LSn52YA0EOkmhJLMev6DKBWEqSfjXTY4AJSJ7RmGq88BXoHzwGjndRj0QHFtSTjHIoxF9uN86zB6gfSS+A7ZviuTvfturtKee243b9OIojIf2ne2hF8+7PSIwCp5FPLXEqR/UtXnJ6pxjBKhF36k3FRdzsxo52DMImgPhluGWI3xRhpIMmFNDMNynOBQ9F6mnR8fRBdPKB&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;rAI=&quot;&#125;,&quot;signature&quot;:&quot;hEluqbFG8TTSeeJyfOs10fZD/gOsrnFV8QgRAb4mhSFlzYpcijT9ye1yUYam5hcsW1eq1MFRfVGHhqYYUZ4LYwA=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqjge872spqrgtm8dhlndjgfhhuxzx0y3ujvxxsl&quot;,&quot;from&quot;:&quot;fcqm0u932ja5thlsy4dgpz5urlapk8qhtd0clqv5e&quot;,&quot;nonce&quot;:&quot;AQ==&quot;,&quot;value&quot;:&quot;0&quot;,&quot;method&quot;:&quot;addAsk&quot;,&quot;params&quot;:&quot;gkWAlOvcA0I70w==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;6Ac=&quot;&#125;,&quot;signature&quot;:&quot;IGUvf7CZ8lKDSTyzbg5kyArIPv8TIoFEWpA3ihRC7I86NFvgebCdEKQ6PqYhTJj1GQK/+JF28kCinXFN/9G8FgE=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqp606qfk5gwmq6ac24g4mhv3cr8zzf67vqkpulh&quot;,&quot;from&quot;:&quot;fcqsvmdzpy5mjc9m0cuh6uhmprr6gk5w2zcrnjy02&quot;,&quot;nonce&quot;:&quot;Aw==&quot;,&quot;value&quot;:&quot;0.0000301989888&quot;,&quot;method&quot;:&quot;createChannel&quot;,&quot;params&quot;:&quot;glYAAGsLRe4dsJwsvfE2+dkEh1DPX11jQ+OdAQ==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;rAI=&quot;&#125;,&quot;signature&quot;:&quot;Zg5kUOtEZ9Um+mGKicHaqTCaORppGv5KAaSlTpN/qTcoTptRUP3ZbQ5YOL7zjTG6aF7Y4r0Ck0NsnG0J/i2B0AA=&quot;&#125;,&#123;&quot;meteredMessage&quot;:&#123;&quot;message&quot;:&#123;&quot;to&quot;:&quot;fcqp606qfk5gwmq6ac24g4mhv3cr8zzf67vqkpulh&quot;,&quot;from&quot;:&quot;fcqrqtfcug5hlx7gugvwj0f2dyx6j9cxdn0ynmpu3&quot;,&quot;nonce&quot;:&quot;Ag==&quot;,&quot;value&quot;:&quot;0&quot;,&quot;method&quot;:&quot;createChannel&quot;,&quot;params&quot;:&quot;glYAAJsQ6e5i/M0X04YZwzl3VWckPu4RQ62HAQ==&quot;&#125;,&quot;gasPrice&quot;:&quot;0&quot;,&quot;gasLimit&quot;:&quot;rAI=&quot;&#125;,&quot;signature&quot;:&quot;oisXV83sTFkJw7y5KbO5fLhx2oa48qZKAVwX+1fIvWUDgm5PQNDddPeCkklPg2L+fmp4wL2fLF9R2qPRciLUfAA=&quot;&#125;],&quot;stateRoot&quot;:&#123;&quot;/&quot;:&quot;zdpuAvwpuqNR4J6PJDqGfF5GbyjWarD1BhujTUfyREMHSY1eF&quot;&#125;,&quot;messageReceipts&quot;:[&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;Ag==&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;AAA2Qrupiubk6ljOMnMUrnnHKaVXmQ==&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;0gA=&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:null,&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;Aw==&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;,&#123;&quot;exitCode&quot;:0,&quot;return&quot;:[&quot;Ag==&quot;],&quot;gasAttoFIL&quot;:&quot;0&quot;&#125;],&quot;proof&quot;:[177,165,90,219,1,18,240,190,113,56,243,22,167,201,232,75,124,152,130,111,74,132,5,192,33,191,102,220,102,9,99,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&#125;</span><br><span class="line"></span><br><span class="line">//查询最新区块信息</span><br><span class="line">waynewyang:go-filecoin waynewyang$ go-filecoin show block `go-filecoin chain head --repodir=~/.filecoin2/ |jq -r &apos;.[0]&apos;|jq -r &apos;.[&quot;/&quot;]&apos;`</span><br><span class="line">Block Details</span><br><span class="line">Miner:  fcq973y2y7hvcce8zkwds7r2847xmfjvdecn98lws</span><br><span class="line">Weight: 134386.836</span><br><span class="line">Height: 5013</span><br><span class="line">Nonce:  0</span><br><span class="line"></span><br><span class="line">5) 获取所有矿工的报价信息</span><br><span class="line">go-filecoin client list-asks --enc=json | jq</span><br></pre></td></tr></table></figure><blockquote><p>现在默认是只要客户出价高于矿工报价，默认接受交易。</p></blockquote><ul><li>停止挖矿</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin mining stop</span><br><span class="line">rm -rf ~/.filecoin  //删除filecoin矿工实例，区块同步也被删除，再次实例化，需要再次同步区块</span><br></pre></td></tr></table></figure><h4 id="检索矿工"><a href="#检索矿工" class="headerlink" title="检索矿工"></a>检索矿工<a name="检索矿工"></a></h4><blockquote><p>暂未发现支持，目前可以自己的供应商（具体矿工）处获取；后面通过更深入的分析之后另行补充。</p></blockquote><h4 id="修复矿工"><a href="#修复矿工" class="headerlink" title="修复矿工"></a>修复矿工<a name="修复矿工"></a></h4><blockquote><p>修复矿工的概念是白皮书之后提出的，后面继续深入分析之后再另行补充。</p></blockquote><h4 id="客户操作"><a href="#客户操作" class="headerlink" title="客户操作"></a>客户操作<a name="客户操作"></a></h4><h4 id="存储客户"><a href="#存储客户" class="headerlink" title="存储客户"></a>存储客户<a name="存储客户"></a></h4><ul><li>filecoin 与IPFS数据结构是兼容的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//创建测试文件</span><br><span class="line">waynewyang:test waynewyang$ echo &quot;Hi my name is $USER&quot;&gt; hello.txt</span><br><span class="line">waynewyang:test waynewyang$ cat hello.txt </span><br><span class="line">Hi my name is waynewyang</span><br><span class="line"></span><br><span class="line">//导入filecoin本地资源库</span><br><span class="line">waynewyang:test waynewyang$ export CID=`go-filecoin client import ./hello.txt`</span><br><span class="line">waynewyang:test waynewyang$ echo $CID</span><br><span class="line">Qmchgh3N3kxWiaZ2cp9PbV93i77H3K8KtQCBTeVR5Q7wzs</span><br><span class="line"></span><br><span class="line">//这里会发现用IPFS上传得到的CID也是一样</span><br><span class="line">waynewyang:test waynewyang$ ipfs add hello.txt </span><br><span class="line">added Qmchgh3N3kxWiaZ2cp9PbV93i77H3K8KtQCBTeVR5Q7wzs hello.txt</span><br><span class="line"> 25 B / 25 B [========================================================================] 100.00%</span><br><span class="line"></span><br><span class="line">//用go-filecoin或者IPFS命令获取数据，结果一致</span><br><span class="line">waynewyang:test waynewyang$ go-filecoin client cat $CID</span><br><span class="line">Hi my name is waynewyang</span><br><span class="line">waynewyang:test waynewyang$ ipfs block get $CID</span><br><span class="line">Hi my name is waynewyang</span><br></pre></td></tr></table></figure><ul><li><p>导入测试数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:sample-data waynewyang$ export CID=`go-filecoin client import camel.jpg`</span><br><span class="line">waynewyang:sample-data waynewyang$ go-filecoin client cat $CID &gt; image.png &amp;&amp; open image.png</span><br><span class="line">waynewyang:sample-data waynewyang$ echo $CID</span><br><span class="line">QmeubcGKFXpafFT4xRFGf3NqDRzJUVoAqe5sh1ugbRPZ7u</span><br></pre></td></tr></table></figure></li><li><p>查询矿工的报价单</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">waynewyang:sample-data waynewyang$ go-filecoin client list-asks --enc=json | jq</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Miner&quot;: &quot;fcqvnwlanfu7ecflnp3rc5gm0ecdamvxgvlawref4&quot;,</span><br><span class="line">  &quot;Price&quot;: &quot;0.000000001&quot;,</span><br><span class="line">  &quot;Expiry&quot;: 7079,</span><br><span class="line">  &quot;ID&quot;: 0,</span><br><span class="line">  &quot;Error&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Miner&quot;: &quot;fcqsmut6jnwchq0qlc3t6v44pzgf8l49lg6r8wl4a&quot;,</span><br><span class="line">  &quot;Price&quot;: &quot;0.000000001&quot;,</span><br><span class="line">  &quot;Expiry&quot;: 16522,</span><br><span class="line">  &quot;ID&quot;: 0,</span><br><span class="line">  &quot;Error&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Miner&quot;: &quot;fcqsmut6jnwchq0qlc3t6v44pzgf8l49lg6r8wl4a&quot;,</span><br><span class="line">  &quot;Price&quot;: &quot;0.000000000000000001&quot;,</span><br><span class="line">  &quot;Expiry&quot;: 18753,</span><br><span class="line">  &quot;ID&quot;: 1,</span><br><span class="line">  &quot;Error&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Miner&quot;: &quot;fcqghrce7vaf6czj54x5qke0mn2uzzg8ckvgvcjpe&quot;,</span><br><span class="line">  &quot;Price&quot;: &quot;0.000000001&quot;,</span><br><span class="line">  &quot;Expiry&quot;: 14404,</span><br><span class="line">  &quot;ID&quot;: 0,</span><br><span class="line">  &quot;Error&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>下单</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin client propose-storage-deal &lt;miner&gt; &lt;data&gt; &lt;ask&gt; &lt;duration&gt;</span><br><span class="line"></span><br><span class="line">&lt;miner&gt; address of the miner from list-asks</span><br><span class="line">&lt;data&gt; CID of the imported data that you want to store</span><br><span class="line">&lt;ask&gt; ID of the ask, also from list-asks (usually 0)</span><br><span class="line">&lt;duration&gt; how long you want to store (in # of ~30sec blocks). For example, storing for 1 day (2 blocks/min * 60 min/hr * 24 hr/day) = 2880 blocks.</span><br></pre></td></tr></table></figure><ul><li>发送数据和支付</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 支付</span><br><span class="line"></span><br><span class="line">1）支付到paych中</span><br><span class="line">2）定期向矿工付款</span><br><span class="line"></span><br><span class="line">2 数据</span><br><span class="line"></span><br><span class="line">1）未密封完的数据称之为暂存区</span><br><span class="line">2）密封完成后阶段性支付</span><br></pre></td></tr></table></figure><h4 id="检索客户"><a href="#检索客户" class="headerlink" title="检索客户"></a>检索客户<a name="检索客户"></a></h4><blockquote><p>现在是指定所对应的存储矿工进行检索，暂未发现更多支持，在后面的深入分析中会继续跟进。</p></blockquote><ul><li>查询订单状态，必须是密封，posted交易结束后才能查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin client query-storage-deal &lt; dealID &gt;</span><br></pre></td></tr></table></figure><ul><li>检索</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-filecoin retrieval-client retrieve-piece &lt; minerAddress &gt;  &lt; CID &gt;</span><br></pre></td></tr></table></figure><h3 id="filecoin合约"><a href="#filecoin合约" class="headerlink" title="filecoin合约"></a>filecoin合约<a name="filecoin合约"></a></h3><h4 id="文件合约"><a href="#文件合约" class="headerlink" title="文件合约"></a>文件合约<a name="文件合约"></a></h4><blockquote><p>其实现在的创建存储矿工，以及矿工创建报价、存储客户提交订单存储，这些笔者认为属于filecoin文件合约的范畴。</p><p>与以太坊类似，以太坊抽象出了代币合约以及通用智能合约； 而filecoin则是抽象出了文件合约和通用智能合约。</p></blockquote><h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约<a name="智能合约"></a></h4><blockquote><p>暂未发现支持，在后面的深入分析中会继续跟进。</p></blockquote><h3 id="单机运行多个filecoin节点"><a href="#单机运行多个filecoin节点" class="headerlink" title="单机运行多个filecoin节点"></a>单机运行多个filecoin节点<a name="单机运行多个filecoin节点"></a></h3><h4 id="修改资源目录和服务端口的方式"><a href="#修改资源目录和服务端口的方式" class="headerlink" title="修改资源目录和服务端口的方式"></a>修改资源目录和服务端口的方式<a name="修改资源目录和服务端口的方式"></a></h4><ul><li><p>go-filecoin init的时候，通过 ‘–repodir=所指定资源目录路径’ 命令进行初始化目录资源，后面的其他命令同样需要所指定资源目录路径进行操作。</p></li><li><p>修改资源目录下的config.json文件，将默认的端口予以修改，避免与另外的本机实例相冲突。</p></li></ul><h4 id="容器部署方式"><a href="#容器部署方式" class="headerlink" title="容器部署方式"></a>容器部署方式<a name="容器部署方式"></a></h4><ul><li>可以打包成docker镜像，有兴趣的朋友可以自行尝试。</li></ul><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/201903/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第三章filecoin开发网络使用。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析二：filecoin通用语言理解</title>
    <link href="https://learnblockchain.cn/2019/02/20/filecoin-code-analysis-2/"/>
    <id>https://learnblockchain.cn/2019/02/20/filecoin-code-analysis-2/</id>
    <published>2019-02-20T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:20.234Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第二章filecoin通用语言理解。</p><a id="more"></a><h2 id="为什么要把filecoin通用语言单独列为一讲"><a href="#为什么要把filecoin通用语言单独列为一讲" class="headerlink" title="为什么要把filecoin通用语言单独列为一讲"></a>为什么要把filecoin通用语言单独列为一讲<a name="为什么要把filecoin通用语言单独列为一讲"></a></h2><p>笔者认为一位优秀的软件从业人员，必须具备两种必备能力</p><pre><code>- 架构设计能力- 架构剖析能力</code></pre><blockquote><p>这两者是相辅相成的，架构设计师所设计之架构不可能超过自己的认知范畴，故架构设计师必须有效高效地拓展自己的技术认知视图，以适应当代软件架构高速发展的现实。而拓展的途径，一方面就是相关理论体系的快速学习跟进；另一方面，就是实战，对有显著价值的优秀软件项目进行架构剖析。有理论、有实战方是王道。理解具体架构的通用语言就是分析他人架构设计思维的一条捷径。</p></blockquote><ul><li>理解具体技术架构的通用语言是分析架构的一条捷径<ul><li>通用语言是架构设计人员为实现某个具体技术架构，所高度抽象出来的名词或者称谓，通过理解通用语言，可以快速理解架构设计人员的思维和设计目的。</li><li>与读书方法类似（薄读-&gt;厚读&gt;再薄读），理解通用语言就是第一次的薄读过程，非常重要。</li></ul></li></ul><ul><li><p>对业务的理解是非常有必要的，所以在<a href="/2019/02/18/filecoin-code-analysis-1">第一章</a>中，笔者铺垫了filecoin的一些基本概念，任何架构的设计不能脱离业务而行，业务驱动开发仍是非常实用的架构模式；filecoin 技术架构从业务来划分，可划分为两个大的范畴。</p><ul><li>分布式存储解决方案<ul><li>存储矿工</li><li>检索矿工</li><li>存储客户端</li><li>检索客户端</li></ul></li><li>区块链项目<ul><li>filecoin公链</li><li>filecoin actors 智能合约 </li></ul></li></ul></li><li><p>filecoin核心通用业务组件</p></li></ul><table><thead><tr><th style="text-align:center">组件名称</th><th style="text-align:center">目的</th></tr></thead><tbody><tr><td style="text-align:center">DSN</td><td style="text-align:center">保障数据安全、包括故障容错、数据完整性、数据可恢复等</td></tr><tr><td style="text-align:center">新型存储证明</td><td style="text-align:center">证明矿工按照协议规范存储了客户指定的数据，数据有效性</td></tr><tr><td style="text-align:center">可验证市场</td><td style="text-align:center">对矿工与客户组成的交易市场进行了建模，保证交易的有效性</td></tr><tr><td style="text-align:center">有效工作量证明</td><td style="text-align:center">出块的共识机制，很重要，做到激励兼容</td></tr></tbody></table><p><strong>下面各节将会对filecoin技术架构中的核心通用语言进行解释。</strong></p><h2 id="存储证明"><a href="#存储证明" class="headerlink" title="存储证明"></a>存储证明<a name="存储证明"></a></h2><p>Proof-of-Storage包含复制证明(PoR)和时空证明(PoSt)，其作用主要有两点：</p><ul><li><p>证明矿工做了有效存储</p></li><li><p>竞争区块打包出块，获取区块奖励</p></li></ul><h3 id="2-2-1-为什么使用存储证明"><a href="#2-2-1-为什么使用存储证明" class="headerlink" title="2.2.1 为什么使用存储证明"></a>2.2.1 为什么使用存储证明<a name="为什么使用存储证明"></a></h3><ul><li><p>相对于PoW(Proof-of-Work)或者PoC</p><ul><li>PoW耗能严重；PoC以空间换时间，同样存在耗能严重问题</li><li>而filecoin网络的耗能必须远低于类似比特币的PoW，参见<a href="/2019/02/18/filecoin-code-analysis-1">第一讲</a>filecoin的对标对象，filecoin必须实现以更低的成对去应对商业竞争，同时提供相同级别的安全性，以及文件存储的效用</li><li>存储证明需要做要与实体经济挂钩，减少无谓浪费</li></ul></li><li><p>相对于PoS(Proof-of-Stake)或者PoC</p><ul><li>Proof-of-Storage在定向领域（分布式存储）以更简单方式，协调激励，并驱使矿工以有竞争力的价格提供真实的新存储，它促使矿工积极保证filecoin网络的效用</li><li>当然Proof-of-Stake是区块链领域的热点研究问题</li></ul></li><li><p>Proof-of-Storage阻止网络攻击</p></li></ul><table><thead><tr><th style="text-align:center">攻击类型</th><th style="text-align:center">说明</th><th>阻止攻击原理</th></tr></thead><tbody><tr><td style="text-align:center">女巫攻击Sybil attack</td><td style="text-align:center">作恶节点创造多个女巫身份，谎称存储了多个副本</td><td>每个节点的副本都是有签名的，想通过复制证明，就相当于真实做了有效存储</td></tr><tr><td style="text-align:center">外包攻击outsourcing attacks</td><td style="text-align:center">作恶节点快速从其他节点获取内容，谎称他们存储了比他们实际存储更多的内容</td><td>针对外包攻击，从其他节点获取的整个过程，满足不了证明人随机挑战的要求，依然需要重新生成副本（重新seal需要时间），从而阻止外包攻击</td></tr><tr><td style="text-align:center">生成攻击generation attacks</td><td style="text-align:center">作恶节点宣称将要存储超过其实际容量的内容但并未存储内容，以此增加出块的概率</td><td>宣称无用，存储证明一定要确认密封动作并能应对随机挑战才能OK，如果重新密封就来不及证明，每次挑战是有时间要求的</td></tr></tbody></table><h3 id="复制证明"><a href="#复制证明" class="headerlink" title="复制证明"></a>复制证明<a name="复制证明"></a></h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>复制证明本质上可以理解为一种零知识证明，既然是零知识证明，我们在后面需要理解filecoin复制证明的题目和答案</li></ul><blockquote><p>zk-SNARK zero knowledge Succinct Non-interactive ARgument of Knowledge<br>zero knowledge：零知识，即在证明的过程中不透露任何内情<br>succinct：简洁的，主要是指验证过程不涉及大量数据传输以及验证算法简单<br>non-interactive：无交互。</p></blockquote><ul><li>生成证明的方法在filecoin架构中称之为seal密封</li></ul><blockquote><p>密封过程是需要时间的，Seal过程串行加密的过程，无法并行操作，seal密封过程是有意设计慢的，主要目的是为了防攻击。</p></blockquote><h4 id="filecoin复制证明的题目和答案"><a href="#filecoin复制证明的题目和答案" class="headerlink" title="filecoin复制证明的题目和答案"></a>filecoin复制证明的题目和答案</h4><ul><li><p>公开的信息</p><ul><li>矿工的节点公钥、密封公钥、存储公钥、原始Data哈希、该矿工存储的副本根哈希</li></ul></li><li><p>隐含因素理解：</p><ul><li>特有节点的副本哈希是由哪些哈希组成（DAG），任意挑战者或者攻击者是不知情的</li><li>挑战随机参数，通过CRH(防碰撞的哈希散列Collision-resistant hashing)生成哈希之后传递给证明者，作用是确定特定的叶子节点的哈希，比如让证明者自行计算离H(c))最近的叶子节点哈希。</li></ul></li><li><p>复制证明的题目与答案</p><ul><li>挑战参数：副本哈希rt，挑战随机参数c -&gt; H(c)</li><li>证明者输入（题目）：<ul><li>H(c)（每一次挑战都会变）</li><li>隐含信息比喻：该叶子节点是与H(c)最近的节点</li></ul></li><li>证明者输出（答案）：<ul><li>H(c)对应的叶子节点 ——&gt; rt的路径（攻击者是很难反推的）</li></ul></li></ul></li></ul><h3 id="时空证明"><a href="#时空证明" class="headerlink" title="时空证明"></a>时空证明<a name="时空证明"></a></h3><ul><li>时空证明可以理解为矿工持续性地生成复制证明<ul><li>挑战者输入一个随机参数c，后面的随机参数由证明者基于上一个的挑战答案去生成。(不用与挑战者持续交互)</li><li>下图中变量i会轮询生成新的时间变量产生随机挑战。</li></ul></li></ul><p><img src="/images/post.png" alt=""></p><h2 id="预期共识"><a href="#预期共识" class="headerlink" title="预期共识"></a>预期共识<a name="预期共识"></a></h2><h3 id="基础前提"><a href="#基础前提" class="headerlink" title="基础前提"></a>基础前提<a name="基础前提"></a></h3><ul><li>filecoin基于存储证明(有效存储量)来作为矿工在整个网络中的power</li></ul><table><thead><tr><th style="text-align:center">power属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">公开</td><td style="text-align:center">1 某一时刻，整个网络存储总量是公开的<br>2 单个矿工某一时刻，有效存储总量是公开的</td></tr><tr><td style="text-align:center">可公开验证的</td><td style="text-align:center">对于每个存储任务，矿工都需要生成”时空证明“，证明持续提供服务。通过读取区块链，任何人都可以验证矿工的power声明是否是正确的。</td></tr><tr><td style="text-align:center">变化</td><td style="text-align:center">在任意时间点，矿工都可以通过增加新增扇区和扇区补充的抵押来增加新的存储。这样矿工就能变更他们能提供的power。</td></tr></tbody></table><h4 id="使用power达成共识"><a href="#使用power达成共识" class="headerlink" title="使用power达成共识"></a>使用power达成共识<a name="使用power达成共识"></a></h4><ul><li><p>目的：</p><blockquote><p>每一轮选举一个（或多个）矿工，<strong>使得赢得选举的概率与每个矿工分配的存储成比例</strong></p></blockquote></li><li><p>filecoin预期共识(Expected Consensus,EC)</p><ul><li>预期共识的基本直觉是确定性的，不可预测的</li><li>预期的期望是每个周期内当选的Leader是1，但一些周期内可能有0个或者许多的Leader。</li><li>在每个周期，每个区块链被延伸一个或多个区块，见下图</li><li>区块线性扩展，但是数据结构是DAG</li><li>EC是一个概率共识，每个周期都使得比前面的区块更加确定，最终达到了足够的确定性</li></ul></li></ul><h4 id="选举方案"><a href="#选举方案" class="headerlink" title="选举方案"></a>选举方案<a name="选举方案"></a></h4><blockquote><p>预期共识通过选举方案产生</p></blockquote><p><img src="/images/sle.png" alt=""></p><p><img src="/images/sle2.png" alt=""></p><table><thead><tr><th style="text-align:center">选举方案属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">公平</td><td style="text-align:center">每个参与者每次选举只有一次试验，因为签名是确定性的，而且t和rand(t)是固定的。随机值rand(t)在时刻t之前是未知的<br></td></tr><tr><td style="text-align:center">保密</td><td style="text-align:center">由于有能力的攻击者不拥有Mi用来计算签名的秘钥<br></td></tr><tr><td style="text-align:center">公开可验证</td><td style="text-align:center">当选Leader i ∈ Lt 可以通过给出t，rand(t)，H(i)/2L，来说服一个有效的验证者。鉴于前面的观点（复制证明与时间证明），有能力的攻击者在不拥有获胜秘密秘钥的情况下不能生成证明。</td></tr></tbody></table><h2 id="filecoin智能合约"><a href="#filecoin智能合约" class="headerlink" title="filecoin智能合约"></a>filecoin智能合约<a name="filecoin智能合约"></a></h2><h3 id="文件合约"><a href="#文件合约" class="headerlink" title="文件合约"></a>文件合约<a name="文件合约"></a></h3><blockquote><p>允许用户对他们提供的存储服务进行条件编程，<strong>会形成一个多样化市场</strong>。</p></blockquote><ul><li>承包矿工：客户可以提前指定矿工提供服务而不参与市场 </li><li>付款策略：客户可以为矿工设计不同的奖励策略，例如合约可以给矿工支付随着时间的推移越来高的费用</li><li>票务服务：合约可以允许矿工存放token和用于代表用户的存储/检索的支付</li><li>更复杂的操作：客户可以创建合约来运行数据更新</li></ul><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约<a name="智能合约"></a></h3><blockquote><p>用户可以将程序关联到其他系统（如以太坊)的交易上，他们不直接依赖存储的使用。</p></blockquote><h3 id="与其他系统的兼容"><a href="#与其他系统的兼容" class="headerlink" title="与其他系统的兼容"></a>与其他系统的兼容<a name="与其他系统的兼容"></a></h3><blockquote><p>规格支持跨链交互，以便能将filecoin存储带入其他基于区块链的平台，同时也将其他平台的功能带入filecoin。</p></blockquote><h2 id="交易市场"><a href="#交易市场" class="headerlink" title="交易市场"></a>交易市场<a name="交易市场"></a></h2><ul><li>存储需求和供给组成了两个Filecoin市场：存储市场和检索市场。这两个市场是两个去中心化交易所，简而言之，客户和矿工们通过向各自的市场提交订单来设定他们请求服务或者提供服务的订单的价格。交易所为客户和矿工们提供了一种方式来查看匹配出价并执行订单。如果服务请求被成功满足，通过运行管理协议，网络保证了矿工得到报酬，客户将被收取费用。</li><li>可以类比为淘宝商城</li></ul><h3 id="存储市场"><a href="#存储市场" class="headerlink" title="存储市场"></a>存储市场<a name="存储市场"></a></h3><ul><li>交易数据会上链，包含于区块之中。</li><li>本质上也属于filecoin智能合约中的文件合约。</li><li>20190214上线的开发网络已支持</li></ul><h3 id="检索市场"><a href="#检索市场" class="headerlink" title="检索市场"></a>检索市场<a name="检索市场"></a></h3><ul><li>交易数据不会上链，属于offchain的方式。</li><li>本质上也属于filecoin智能合约中的文件合约。</li></ul><h2 id="filecoin节点"><a href="#filecoin节点" class="headerlink" title="filecoin节点"></a>filecoin节点<a name="filecoin节点"></a></h2><ul><li>filecoin节点相关<ul><li>node id表示filecoin网络节点</li><li>account　id并表示账号，默认与钱包地址一致</li><li>wallet addr表示钱包地址</li><li>miner id表示矿工id</li></ul></li></ul><p><img src="/images/filecoin-1.png" alt=""></p><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第二章filecoin通用语言理解。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>filecoin技术架构分析一：filecoin概念</title>
    <link href="https://learnblockchain.cn/2019/02/18/filecoin-code-analysis-1/"/>
    <id>https://learnblockchain.cn/2019/02/18/filecoin-code-analysis-1/</id>
    <published>2019-02-18T08:35:33.000Z</published>
    <updated>2019-03-12T07:25:13.813Z</updated>
    
    <content type="html"><![CDATA[<p>我是先河系统CTO杨尉，欢迎大加关注的的Github: <a href="https://github.com/waynewyang" target="_blank" rel="noopener">waynewyang</a>，本文是<a href="https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/">filecoin技术架构分析系列文章</a>第一章介绍filecoin概念。</p><a id="more"></a><h2 id="filecoin的定义"><a href="#filecoin的定义" class="headerlink" title="filecoin的定义"></a>filecoin的定义<a name="filecoin的定义"></a></h2><ul><li><p>Filecoin是一个去中心化的存储网络（<strong>DSN</strong>），是一个<strong>云存储的自由交易市场</strong>，通过Filecoin<strong>项目</strong>来实现其<strong>协议</strong>。矿工通过提供数据存储或检索来获得<strong>token</strong>（也称为“filecoin”）。相反，客户向矿工支付token以存储或分发数据并进行检索。</p></li><li><p>Filecoin的多重含义：</p><ul><li>网络</li><li>市场</li><li>项目</li><li>协议</li><li>Token</li></ul></li></ul><h2 id="filecoin的设计目的"><a href="#filecoin的设计目的" class="headerlink" title="filecoin的设计目的"></a>filecoin的设计目的<a name="filecoin的设计目的"></a></h2><ul><li><p>filecoin设计符合<strong>激励相容</strong>，每一个参与者的最有利可图的选择（包括目标客户，矿工，投资者和开发人员）将是采取行动提高网络服务质量，这也是他们的最优策略。</p></li><li><p>以超高竞争力的价格可靠地存储文件（低成本、高效率）</p></li><li><p>客户可以调整其存储策略以满足他们的需求，在冗余，检索速度和成本之间创建自定义平衡。全球的Filecoin存储和检索市场使供应商竞争以最优惠的价格为客户提供灵活的选择</p></li></ul><h2 id="filecoin与IPFS的关系"><a href="#filecoin与IPFS的关系" class="headerlink" title="filecoin与IPFS的关系"></a>filecoin与IPFS的关系<a name="filecoin与ipfs的关系"></a></h2><h3 id="filecoin与IPFS属性对比"><a href="#filecoin与IPFS属性对比" class="headerlink" title="filecoin与IPFS属性对比"></a>filecoin与IPFS属性对比<a name="filecoin与ipfs属性对比"></a></h3><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">IPFS</th><th style="text-align:left">Filecoin</th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:left">基于内容寻址的分布式存储基础设施</td><td style="text-align:left">IPFS网络之上的激励层，提供一个云存储领域的自由交易市场</td></tr><tr><td style="text-align:center">对标对象</td><td style="text-align:left">HTTP</td><td style="text-align:left">大型集中式孤岛存储提供商，如国外的aws、国内的aliyun等</td></tr><tr><td style="text-align:center">存储权限</td><td style="text-align:left">对有所有权的IPFS节点具备存储权限</td><td style="text-align:left">1 除对有所有权的IPFS节点具备存储权限外<br>2 还可以通过支付的方式，在其供应商的节点之上具备存储权限</td></tr><tr><td style="text-align:center">读取权限</td><td style="text-align:left">ALL（只要知道内容cid）</td><td style="text-align:left">ALL（只要知道内容cid）</td></tr><tr><td style="text-align:center">架构设计</td><td style="text-align:left"><strong>另行文章补充分析</strong></td><td style="text-align:left">原则上需要无缝对接到IPFS<br>1Filecoin将IPLD用于区块链数据结构<br>2 Filecoin节点使用libp2p建立彼此的安全连接<br>3 节点和Filecoin块传播之间的消息传递使用libp2p pubsub</td></tr><tr><td style="text-align:center">使用场景</td><td style="text-align:left">1 存储自己的节点数据，分享数据等，类似BT<br>2 基于IPFS或其中部分组件构建企业自己的分布式云存储架构、区块链架构等</td><td style="text-align:left">1 成为filecoin矿工，提供分布式检索及存储服务<br>2 成为filecoin客户，支付费用享受filecoin网络的检索及存储服务<br>3 基于filecoin，开发第三方管理系统</td></tr></tbody></table><ul><li>IPFS现在和将来都可以免费下载，运行和使用，并且将独立于Filecoin运行。一旦Filecoin正式网络启动，IPFS节点还可以免费或利润地在Filecoin检索市场上提供其文件的检索。</li></ul><h3 id="IPFS的对标对象"><a href="#IPFS的对标对象" class="headerlink" title="IPFS的对标对象"></a>IPFS的对标对象<a name="ipfs的对标对象"></a></h3><table><thead><tr><th style="text-align:center">特点</th><th style="text-align:center">HTTP</th><th style="text-align:center">IPFS</th></tr></thead><tbody><tr><td style="text-align:center"><strong>寻址方式</strong></td><td style="text-align:center"><strong>位置寻址</strong><br>一维寻址，低效、脆弱</td><td style="text-align:center"><strong>内容寻址</strong><br>多维寻址，高效、稳定</td></tr><tr><td style="text-align:center">效率</td><td style="text-align:center">低效</td><td style="text-align:center">高效</td></tr><tr><td style="text-align:center">稳定性</td><td style="text-align:center">脆弱</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">开放性</td><td style="text-align:center">封闭、垄断</td><td style="text-align:center">开放、共享</td></tr></tbody></table><h3 id="filecoin的对标对象"><a href="#filecoin的对标对象" class="headerlink" title="filecoin的对标对象"></a>filecoin的对标对象<a name="filecoin的对标对象"></a></h3><table><thead><tr><th style="text-align:center">特点</th><th style="text-align:left">传统云存储提供商（大型集中式孤岛存储网络）</th><th style="text-align:center">Filecoin</th></tr></thead><tbody><tr><td style="text-align:center">网络模式</td><td style="text-align:left">集中式</td><td style="text-align:center">DSN</td></tr><tr><td style="text-align:center">加入门槛</td><td style="text-align:left">高，从硬件底层基础设施、一直到软件、服务的提供，小企业很难插足</td><td style="text-align:center">低、自由交易市场，Filecoin做好基础设施</td></tr><tr><td style="text-align:center">宏观视野：闲置存储空间</td><td style="text-align:left">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">价格</td><td style="text-align:left">昂贵，垄断、可人为保持高水平</td><td style="text-align:center">便宜，自由竞争市场</td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:left">差，破坏隐私<br>1 云存储上可查看用户隐私<br>2 甚至许多密码鉴权信息都没有隐私可言<br>3 单个提供商的故障影响大</td><td style="text-align:center">强<br>1 无第三方或者中心机构，文件加密安全得到保障<br>2 单个云提供商的故障小</td></tr><tr><td style="text-align:center">利益分配群体</td><td style="text-align:left">巨头</td><td style="text-align:center">All</td></tr></tbody></table><h2 id="filecoin网络中的角色"><a href="#filecoin网络中的角色" class="headerlink" title="filecoin网络中的角色"></a>filecoin网络中的角色<a name="filecoin网络中的角色"></a></h2><table><thead><tr><th style="text-align:center">角色</th><th style="text-align:left">说明</th><th style="text-align:left">主要影响因素</th></tr></thead><tbody><tr><td style="text-align:center">存储矿工</td><td style="text-align:left">存储矿工通过为客户存储数据来获得Filecoin；获得区块奖励和交易费用的概率与矿工对Filecoin网络的存储量成正比</td><td style="text-align:left">存储容量</td></tr><tr><td style="text-align:center">检索矿工</td><td style="text-align:left">检索矿工的带宽和交易的出价/响应时间（即延迟和与客户的接近度）将决定其在网络上关闭检索交易的能力</td><td style="text-align:left">带宽</td></tr><tr><td style="text-align:center">检索客户</td><td style="text-align:left">支付filecoin获取检索服务</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">存储客户</td><td style="text-align:left">支付filecoin获取存储服务</td></tr></tbody></table><h3 id="矿工收益方式类比理解"><a href="#矿工收益方式类比理解" class="headerlink" title="矿工收益方式类比理解"></a>矿工收益方式类比理解<a name="矿工收益方式类比理解"></a></h3><ul><li>类比<strong>filecoin为一家股份公司，类比存储矿工为股东（股份出资人）</strong></li></ul><table><thead><tr><th style="text-align:center">收益来源</th><th style="text-align:left">类比分析</th></tr></thead><tbody><tr><td style="text-align:center">提供存储服务</td><td style="text-align:left">存储矿工收益来自两部分<br>1 工资（提供存储并收取服务费用）<br>2 按照出资比例分红（区块奖励就是按照有效存储占比来实现的）</td></tr><tr><td style="text-align:center">提供检索服务</td><td style="text-align:left">检索矿工是offchain的，不参与挖矿，收益来自<br>1 工资（提供检索并收取服务费用）</td></tr></tbody></table><h3 id="存储矿工"><a href="#存储矿工" class="headerlink" title="存储矿工"></a>存储矿工<a name="存储矿工"></a></h3><p>存储两类数据，<strong>存储整个区块链所需的总存储量将远低于矿工为交易存储的密封数据</strong>。</p><ul><li>密封客户的存储数据</li><li>blockchain数据的数据的副本</li></ul><h3 id="检索矿工"><a href="#检索矿工" class="headerlink" title="检索矿工"></a>检索矿工<a name="检索矿工"></a></h3><ul><li>提供检索的途径<ul><li>可以存储热门数据（非存储矿工），以便更优质提供服务</li><li>自己同时做存储矿工，或者从存储矿工处获取</li><li>不限于从filecoin网络获取，可以从免费的IPFS网络获取</li></ul></li><li>检索效率的保证<pre><code>- 检索矿工是不运行在blockchain中的，是off blockchain的。- 全球分布式</code></pre></li></ul><h3 id="客户-检索客户和存储客户-选择filecoin的理由"><a href="#客户-检索客户和存储客户-选择filecoin的理由" class="headerlink" title="客户(检索客户和存储客户)选择filecoin的理由"></a>客户(检索客户和存储客户)选择filecoin的理由<a name="检索客户和存储客户"></a></h3><ul><li><p>企业客户愿意使用filecoin来支付数据存储和检索的理由</p><ul><li>filecoin是一套激励相容的系统，filecoin的设计目标保证了每个参与者（包括客户，矿工，投资者和开发人员）的最有利可图的选择或者说是最优策略是采取行动来提高网络的服务质量。具备技术先进性。</li><li><p>数据更为安全</p><ul><li>抵押机制促使矿工提供稳定安全服务，预计会出现声誉系统。矿工需要自行保证系统内的稳定性。</li><li>即便提供商出现故障，<strong>filecoin网络可以在多个存储提供商之间进行额外的修复。</strong></li><li>客户可以根据数据安全等级选择副本数量。</li></ul></li><li><p>价格更为廉价</p><ul><li>内容寻址的本质决定了其全局冗余度低。</li><li>filecoin作为全球性的分布式存储系统，可以做全球性去重，从而降低整个网络存储成本。</li></ul></li></ul></li><li><p>个人客户选择使用filecoin的理由</p><ul><li>预计filecoin将提供允许一方支付另一方来检索数据的结构<ul><li>包括web 2.0网站的主要内容分发模型，在该模型中，网站所有者为基础设施服务付费，以免费向其用户提供数据，然后以其他方式通过内容获利。</li></ul></li><li>filecoin的设计目标，让用户和内容创作者能够探索各种新的内容分发和经济模型。<ul><li>例如版权问题的解决</li></ul></li></ul></li></ul><p><a href="https://learnblockchain.cn/">深入浅出区块链</a> - 系统学习区块链，打造最好的区块链技术博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是先河系统CTO杨尉，欢迎大加关注的的Github: &lt;a href=&quot;https://github.com/waynewyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;waynewyang&lt;/a&gt;，本文是&lt;a href=&quot;https://learnblockchain.cn/2019/03/11/filecoin-code-analysis-0/&quot;&gt;filecoin技术架构分析系列文章&lt;/a&gt;第一章介绍filecoin概念。&lt;/p&gt;
    
    </summary>
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/categories/FileCoin/"/>
    
    
      <category term="FileCoin" scheme="https://learnblockchain.cn/tags/FileCoin/"/>
    
  </entry>
  
  <entry>
    <title>第10期 - 区块链安全的至暗时刻</title>
    <link href="https://learnblockchain.cn/2019/01/18/dev_meeting_10/"/>
    <id>https://learnblockchain.cn/2019/01/18/dev_meeting_10/</id>
    <published>2019-01-18T02:47:23.000Z</published>
    <updated>2019-03-12T01:48:31.835Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分享嘉宾：邓永凯-零时科技-CEO"><a href="#分享嘉宾：邓永凯-零时科技-CEO" class="headerlink" title="分享嘉宾：邓永凯 零时科技 CEO"></a>分享嘉宾：邓永凯 零时科技 CEO</h4><p>话题简介：区块链安全的至暗时刻</p><p>活动大纲：</p><p>一、区块链安全现状<br>二、交易平台安全<br>三、智能合约安全<br>四、共识安全<br>五、区块链安全解决方案</p><p><a href="https://learnblockchain.cn//pdf/10_blockchain_serurity.pdf">点击下载PPT</a><br>因可能涉及的某些安全问题可能对一些项目产生影响，本期的视频暂不公开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分享嘉宾：邓永凯-零时科技-CEO&quot;&gt;&lt;a href=&quot;#分享嘉宾：邓永凯-零时科技-CEO&quot; class=&quot;headerlink&quot; title=&quot;分享嘉宾：邓永凯 零时科技 CEO&quot;&gt;&lt;/a&gt;分享嘉宾：邓永凯 零时科技 CEO&lt;/h4&gt;&lt;p&gt;话题简介：区块链安全
      
    
    </summary>
    
      <category term="技术工坊" scheme="https://learnblockchain.cn/categories/dev-meeting/"/>
    
    
  </entry>
  
  <entry>
    <title>第9期 - 漫谈区块图技术之XDAG和Conflux</title>
    <link href="https://learnblockchain.cn/2019/01/11/dev_meeting_9/"/>
    <id>https://learnblockchain.cn/2019/01/11/dev_meeting_9/</id>
    <published>2019-01-11T02:47:23.000Z</published>
    <updated>2019-03-12T01:48:23.674Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分享嘉宾：以太零-高级工程师-苏显华"><a href="#分享嘉宾：以太零-高级工程师-苏显华" class="headerlink" title="分享嘉宾：以太零 高级工程师 苏显华"></a>分享嘉宾：以太零 高级工程师 苏显华</h4><p>话题：漫谈区块图技术之XDAG和Conflux</p><p>1、区块图技术重量级区块链项目-conflux<br>2、图灵奖姚教授发明的Conflux是什么？<br>3、XDAG的工作量证明和区块图算法<br>4、XDAG现存问题和未来改进<br>5、Conflux特性和发布时间</p><p><a href="https://wiki.learnblockchain.cn/pdf/xdag_conflux.pdf" target="_blank" rel="noopener">点击下载PPT</a> 及 <a href="https://m.qlchat.com/live/channel/channelPage/2000003282116880.htm" target="_blank" rel="noopener">现场视频</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分享嘉宾：以太零-高级工程师-苏显华&quot;&gt;&lt;a href=&quot;#分享嘉宾：以太零-高级工程师-苏显华&quot; class=&quot;headerlink&quot; title=&quot;分享嘉宾：以太零 高级工程师 苏显华&quot;&gt;&lt;/a&gt;分享嘉宾：以太零 高级工程师 苏显华&lt;/h4&gt;&lt;p&gt;话题：漫谈区
      
    
    </summary>
    
      <category term="技术工坊" scheme="https://learnblockchain.cn/categories/dev-meeting/"/>
    
    
  </entry>
  
  <entry>
    <title>第8期 - 大白话区块链共识机制算法</title>
    <link href="https://learnblockchain.cn/2019/01/04/dev_meeting_8/"/>
    <id>https://learnblockchain.cn/2019/01/04/dev_meeting_8/</id>
    <published>2019-01-04T02:47:23.000Z</published>
    <updated>2019-03-12T01:48:16.625Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分享嘉宾：Nerthus-CTO-虞双齐"><a href="#分享嘉宾：Nerthus-CTO-虞双齐" class="headerlink" title="分享嘉宾：Nerthus CTO 虞双齐"></a>分享嘉宾：Nerthus CTO 虞双齐</h4><p>力求用最普通的话语讲解区块链共识机制。</p><p>话题大纲：</p><ol><li><p>区块链史前文明</p></li><li><p>工作量证明(PoW)共识机制算法与分析、以及算力和区块难度等区块链概念。</p></li><li><p>权益证明(PoS)共识机制、各种优化版的Pos介绍与分析。</p></li></ol><p><a href="https://wiki.learnblockchain.cn/pdf/meetup_8.pdf" target="_blank" rel="noopener">点击下载PPT</a> 及 <a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000003201470300" target="_blank" rel="noopener">现场视频</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分享嘉宾：Nerthus-CTO-虞双齐&quot;&gt;&lt;a href=&quot;#分享嘉宾：Nerthus-CTO-虞双齐&quot; class=&quot;headerlink&quot; title=&quot;分享嘉宾：Nerthus CTO 虞双齐&quot;&gt;&lt;/a&gt;分享嘉宾：Nerthus CTO 虞双齐&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="技术工坊" scheme="https://learnblockchain.cn/categories/dev-meeting/"/>
    
    
  </entry>
  
</feed>
